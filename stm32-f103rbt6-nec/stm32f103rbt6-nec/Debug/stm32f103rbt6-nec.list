
stm32f103rbt6-nec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800424c  0800424c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800424c  0800424c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800424c  0800424c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  080042bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080042bc  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4fa  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e43  00000000  00000000  0002c5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  0002e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fb  00000000  00000000  0002f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186ef  00000000  00000000  0002fadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2e9  00000000  00000000  000481ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c14e  00000000  00000000  000564b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d10  00000000  00000000  000e2604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e6314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080041a8 	.word	0x080041a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080041a8 	.word	0x080041a8

0800014c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	2364      	movs	r3, #100	; 0x64
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <_write+0x24>)
 8000162:	f002 ff07 	bl	8002f74 <HAL_UART_Transmit>
	return len;
 8000166:	687b      	ldr	r3, [r7, #4]
}
 8000168:	4618      	mov	r0, r3
 800016a:	3710      	adds	r7, #16
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	20000110 	.word	0x20000110

08000174 <nec_init>:

void nec_init(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)timer_buffer, 34);
 8000178:	2322      	movs	r3, #34	; 0x22
 800017a:	4a03      	ldr	r2, [pc, #12]	; (8000188 <nec_init+0x14>)
 800017c:	2104      	movs	r1, #4
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <nec_init+0x18>)
 8000180:	f001 fe2a 	bl	8001dd8 <HAL_TIM_IC_Start_DMA>
}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	20000158 	.word	0x20000158
 800018c:	20000084 	.word	0x20000084

08000190 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a05      	ldr	r2, [pc, #20]	; (80001b0 <HAL_TIM_IC_CaptureCallback+0x20>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d102      	bne.n	80001a6 <HAL_TIM_IC_CaptureCallback+0x16>
	{
		end_flag = 1;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <HAL_TIM_IC_CaptureCallback+0x24>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
	}
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	20000084 	.word	0x20000084
 80001b4:	2000019c 	.word	0x2000019c

080001b8 <nec_decode>:

void nec_decode(void)
{
 80001b8:	b5b0      	push	{r4, r5, r7, lr}
 80001ba:	b092      	sub	sp, #72	; 0x48
 80001bc:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80001be:	2300      	movs	r3, #0
 80001c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint16_t temp[32];

	memcpy(temp, &timer_buffer[2], sizeof(uint16_t) * 32);
 80001c4:	4b43      	ldr	r3, [pc, #268]	; (80002d4 <nec_decode+0x11c>)
 80001c6:	1d3c      	adds	r4, r7, #4
 80001c8:	1d1d      	adds	r5, r3, #4
 80001ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (timer_buffer[1] > 13500)
 80001de:	4b3d      	ldr	r3, [pc, #244]	; (80002d4 <nec_decode+0x11c>)
 80001e0:	885b      	ldrh	r3, [r3, #2]
 80001e2:	f243 42bc 	movw	r2, #13500	; 0x34bc
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d970      	bls.n	80002cc <nec_decode+0x114>
	{
		printf("HEADER PULSE Captured\r\n");
 80001ea:	483b      	ldr	r0, [pc, #236]	; (80002d8 <nec_decode+0x120>)
 80001ec:	f003 f96a 	bl	80034c4 <puts>

	  for (i=0; i<32; i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80001f6:	e04e      	b.n	8000296 <nec_decode+0xde>
	  {
//	  	uint8_t j=i-2;
		  if (temp[i] > 1100 && temp[i] < 1200)
 80001f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80001fc:	005b      	lsls	r3, r3, #1
 80001fe:	3348      	adds	r3, #72	; 0x48
 8000200:	443b      	add	r3, r7
 8000202:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8000206:	f240 424c 	movw	r2, #1100	; 0x44c
 800020a:	4293      	cmp	r3, r2
 800020c:	d914      	bls.n	8000238 <nec_decode+0x80>
 800020e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	3348      	adds	r3, #72	; 0x48
 8000216:	443b      	add	r3, r7
 8000218:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800021c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000220:	d20a      	bcs.n	8000238 <nec_decode+0x80>
		  {
			  decode[i/8] += (0<<(i%8));
 8000222:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000226:	08db      	lsrs	r3, r3, #3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	4619      	mov	r1, r3
 800022c:	461a      	mov	r2, r3
 800022e:	4b2b      	ldr	r3, [pc, #172]	; (80002dc <nec_decode+0x124>)
 8000230:	5c59      	ldrb	r1, [r3, r1]
 8000232:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <nec_decode+0x124>)
 8000234:	5499      	strb	r1, [r3, r2]
 8000236:	e029      	b.n	800028c <nec_decode+0xd4>
		  }
		  else if (temp[i] > 2200 && temp[i] < 2300)
 8000238:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	3348      	adds	r3, #72	; 0x48
 8000240:	443b      	add	r3, r7
 8000242:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8000246:	f640 0298 	movw	r2, #2200	; 0x898
 800024a:	4293      	cmp	r3, r2
 800024c:	d91e      	bls.n	800028c <nec_decode+0xd4>
 800024e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	3348      	adds	r3, #72	; 0x48
 8000256:	443b      	add	r3, r7
 8000258:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800025c:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8000260:	4293      	cmp	r3, r2
 8000262:	d813      	bhi.n	800028c <nec_decode+0xd4>
		  {
			  decode[i/8] += (1<<(i%8));
 8000264:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000268:	08db      	lsrs	r3, r3, #3
 800026a:	b2d8      	uxtb	r0, r3
 800026c:	4602      	mov	r2, r0
 800026e:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <nec_decode+0x124>)
 8000270:	5c9a      	ldrb	r2, [r3, r2]
 8000272:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000276:	f003 0307 	and.w	r3, r3, #7
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4601      	mov	r1, r0
 8000284:	4413      	add	r3, r2
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <nec_decode+0x124>)
 800028a:	545a      	strb	r2, [r3, r1]
	  for (i=0; i<32; i++)
 800028c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000290:	3301      	adds	r3, #1
 8000292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000296:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800029a:	2b1f      	cmp	r3, #31
 800029c:	d9ac      	bls.n	80001f8 <nec_decode+0x40>
		  }
	  }
	  for (i=0; i<4; i++)
 800029e:	2300      	movs	r3, #0
 80002a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80002a4:	e00e      	b.n	80002c4 <nec_decode+0x10c>
		{
			printf("decode[%d] : 0x%x\r\n", i, decode[i]);
 80002a6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80002aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <nec_decode+0x124>)
 80002b0:	5cd3      	ldrb	r3, [r2, r3]
 80002b2:	461a      	mov	r2, r3
 80002b4:	480a      	ldr	r0, [pc, #40]	; (80002e0 <nec_decode+0x128>)
 80002b6:	f003 f89f 	bl	80033f8 <iprintf>
	  for (i=0; i<4; i++)
 80002ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80002be:	3301      	adds	r3, #1
 80002c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80002c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80002c8:	2b03      	cmp	r3, #3
 80002ca:	d9ec      	bls.n	80002a6 <nec_decode+0xee>
		}
	}
}
 80002cc:	bf00      	nop
 80002ce:	3748      	adds	r7, #72	; 0x48
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bdb0      	pop	{r4, r5, r7, pc}
 80002d4:	20000158 	.word	0x20000158
 80002d8:	080041c0 	.word	0x080041c0
 80002dc:	200001a0 	.word	0x200001a0
 80002e0:	080041d8 	.word	0x080041d8

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 fb8a 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f826 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f000 f938 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 80002f4:	f000 f918 	bl	8000528 <MX_DMA_Init>
  MX_TIM2_Init();
 80002f8:	f000 f862 	bl	80003c0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80002fc:	f000 f8ea 	bl	80004d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  nec_init();
 8000300:	f7ff ff38 	bl	8000174 <nec_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (end_flag)
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x50>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0fb      	beq.n	8000304 <main+0x20>
	  {
		end_flag = 0;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <main+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		nec_decode();
 8000312:	f7ff ff51 	bl	80001b8 <nec_decode>
	    if (end_flag == 0 && HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <main+0x50>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d1f2      	bne.n	8000304 <main+0x20>
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <main+0x54>)
 8000324:	f001 f84e 	bl	80013c4 <HAL_GPIO_ReadPin>
 8000328:	4603      	mov	r3, r0
 800032a:	2b01      	cmp	r3, #1
 800032c:	d1ea      	bne.n	8000304 <main+0x20>
			{
				nec_init();
 800032e:	f7ff ff21 	bl	8000174 <nec_init>
	  if (end_flag)
 8000332:	e7e7      	b.n	8000304 <main+0x20>
 8000334:	2000019c 	.word	0x2000019c
 8000338:	40011000 	.word	0x40011000

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f99a 	bl	8003684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	2310      	movs	r3, #16
 8000368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800036e:	2300      	movs	r3, #0
 8000370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000372:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f001 f873 	bl	8001468 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000388:	f000 f95a 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2302      	movs	r3, #2
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fae0 	bl	800196c <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003b2:	f000 f945 	bl	8000640 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3740      	adds	r7, #64	; 0x40
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003d4:	f107 031c 	add.w	r3, r7, #28
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003fa:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <MX_TIM2_Init+0x110>)
 80003fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000404:	223f      	movs	r2, #63	; 0x3f
 8000406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <MX_TIM2_Init+0x110>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800040e:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000416:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041c:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <MX_TIM2_Init+0x110>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000422:	482b      	ldr	r0, [pc, #172]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000424:	f001 fc30 	bl	8001c88 <HAL_TIM_Base_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800042e:	f000 f907 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000436:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000438:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800043c:	4619      	mov	r1, r3
 800043e:	4824      	ldr	r0, [pc, #144]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000440:	f001 fffc 	bl	800243c <HAL_TIM_ConfigClockSource>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800044a:	f000 f8f9 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800044e:	4820      	ldr	r0, [pc, #128]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000450:	f001 fc69 	bl	8001d26 <HAL_TIM_IC_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800045a:	f000 f8f1 	bl	8000640 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800045e:	2304      	movs	r3, #4
 8000460:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000462:	2360      	movs	r3, #96	; 0x60
 8000464:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_BOTHEDGE;
 8000466:	230a      	movs	r3, #10
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800046e:	f107 031c 	add.w	r3, r7, #28
 8000472:	4619      	mov	r1, r3
 8000474:	4816      	ldr	r0, [pc, #88]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000476:	f002 f8a8 	bl	80025ca <HAL_TIM_SlaveConfigSynchro>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000480:	f000 f8de 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	4619      	mov	r1, r3
 8000492:	480f      	ldr	r0, [pc, #60]	; (80004d0 <MX_TIM2_Init+0x110>)
 8000494:	f002 fcae 	bl	8002df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800049e:	f000 f8cf 	bl	8000640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80004a2:	2302      	movs	r3, #2
 80004a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004a6:	2301      	movs	r3, #1
 80004a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2204      	movs	r2, #4
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_TIM2_Init+0x110>)
 80004ba:	f001 ff23 	bl	8002304 <HAL_TIM_IC_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80004c4:	f000 f8bc 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3740      	adds	r7, #64	; 0x40
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000084 	.word	0x20000084

080004d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <MX_USART2_UART_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 800050c:	f002 fce2 	bl	8002ed4 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000516:	f000 f893 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000110 	.word	0x20000110
 8000524:	40004400 	.word	0x40004400

08000528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_DMA_Init+0x38>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <MX_DMA_Init+0x38>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_DMA_Init+0x38>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2011      	movs	r0, #17
 800054c:	f000 fb91 	bl	8000c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000550:	2011      	movs	r0, #17
 8000552:	f000 fbaa 	bl	8000caa <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_GPIO_Init+0xcc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <MX_GPIO_Init+0xcc>)
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_GPIO_Init+0xcc>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0310 	and.w	r3, r3, #16
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_GPIO_Init+0xcc>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_GPIO_Init+0xcc>)
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_GPIO_Init+0xcc>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0320 	and.w	r3, r3, #32
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_GPIO_Init+0xcc>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <MX_GPIO_Init+0xd0>)
 80005de:	f000 ff08 	bl	80013f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_GPIO_Init+0xd4>)
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_GPIO_Init+0xd8>)
 80005f8:	f000 fd60 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fc:	2320      	movs	r3, #32
 80005fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <MX_GPIO_Init+0xd0>)
 8000614:	f000 fd52 	bl	80010bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	2028      	movs	r0, #40	; 0x28
 800061e:	f000 fb28 	bl	8000c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000622:	2028      	movs	r0, #40	; 0x28
 8000624:	f000 fb41 	bl	8000caa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800
 8000638:	10110000 	.word	0x10110000
 800063c:	40011000 	.word	0x40011000

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ce:	d159      	bne.n	8000784 <HAL_TIM_Base_MspInit+0xd4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <HAL_TIM_Base_MspInit+0xdc>)
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	4a2d      	ldr	r2, [pc, #180]	; (800078c <HAL_TIM_Base_MspInit+0xdc>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	61d3      	str	r3, [r2, #28]
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <HAL_TIM_Base_MspInit+0xdc>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <HAL_TIM_Base_MspInit+0xdc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <HAL_TIM_Base_MspInit+0xdc>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <HAL_TIM_Base_MspInit+0xdc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	481f      	ldr	r0, [pc, #124]	; (8000790 <HAL_TIM_Base_MspInit+0xe0>)
 8000714:	f000 fcd2 	bl	80010bc <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <HAL_TIM_Base_MspInit+0xe8>)
 800071c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000736:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 800073a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800073e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 800074e:	f000 fac7 	bl	8000ce0 <HAL_DMA_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_TIM_Base_MspInit+0xac>
    {
      Error_Handler();
 8000758:	f7ff ff72 	bl	8000640 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <HAL_TIM_Base_MspInit+0xe4>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	201c      	movs	r0, #28
 800077a:	f000 fa7a 	bl	8000c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800077e:	201c      	movs	r0, #28
 8000780:	f000 fa93 	bl	8000caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800
 8000794:	200000cc 	.word	0x200000cc
 8000798:	40020080 	.word	0x40020080

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <HAL_UART_MspInit+0x70>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d123      	bne.n	8000804 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_UART_MspInit+0x74>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <HAL_UART_MspInit+0x74>)
 80007c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c6:	61d3      	str	r3, [r2, #28]
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_UART_MspInit+0x74>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_UART_MspInit+0x74>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_UART_MspInit+0x74>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_UART_MspInit+0x74>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ec:	230c      	movs	r3, #12
 80007ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_UART_MspInit+0x78>)
 8000800:	f000 fc5c 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004400 	.word	0x40004400
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f915 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <DMA1_Channel7_IRQHandler+0x10>)
 800086e:	f000 faf1 	bl	8000e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000cc 	.word	0x200000cc

0800087c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM2_IRQHandler+0x10>)
 8000882:	f001 fc37 	bl	80020f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000084 	.word	0x20000084

08000890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000894:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000898:	f000 fdc4 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e00a      	b.n	80008c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b2:	f3af 8000 	nop.w
 80008b6:	4601      	mov	r1, r0
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	b2ca      	uxtb	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dbf0      	blt.n	80008b2 <_read+0x12>
  }

  return len;
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <_close>:
  }
  return len;
}

int _close(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000900:	605a      	str	r2, [r3, #4]
  return 0;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
	...

0800093c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <_sbrk+0x5c>)
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <_sbrk+0x60>)
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_sbrk+0x64>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <_sbrk+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800096c:	f002 fed8 	bl	8003720 <__errno>
 8000970:	4603      	mov	r3, r0
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	e009      	b.n	8000990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_sbrk+0x64>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20005000 	.word	0x20005000
 800099c:	00000400 	.word	0x00000400
 80009a0:	200001a4 	.word	0x200001a4
 80009a4:	200002f8 	.word	0x200002f8

080009a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b4:	f7ff fff8 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ba:	490c      	ldr	r1, [pc, #48]	; (80009ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d0:	4c09      	ldr	r4, [pc, #36]	; (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009de:	f002 fea5 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff fc7f 	bl	80002e4 <main>
  bx lr
 80009e6:	4770      	bx	lr
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009f0:	08004254 	.word	0x08004254
  ldr r2, =_sbss
 80009f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009f8:	200002f8 	.word	0x200002f8

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f923 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fe16 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f93b 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f000 f903 	bl	8000c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x1c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x20>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a03      	ldr	r2, [pc, #12]	; (8000aac <HAL_IncTick+0x20>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	200001a8 	.word	0x200001a8

08000ab0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_GetTick+0x10>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	200001a8 	.word	0x200001a8

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4906      	ldr	r1, [pc, #24]	; (8000b5c <__NVIC_EnableIRQ+0x34>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c28:	d301      	bcc.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00f      	b.n	8000c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <SysTick_Config+0x40>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	210f      	movs	r1, #15
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f7ff ff90 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x40>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff2d 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff42 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ff90 	bl	8000bb4 <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5f 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff35 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffa2 	bl	8000c18 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e043      	b.n	8000d7e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_DMA_Init+0xa8>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <HAL_DMA_Init+0xac>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	009a      	lsls	r2, r3, #2
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <HAL_DMA_Init+0xb0>)
 8000d12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2202      	movs	r2, #2
 8000d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	bffdfff8 	.word	0xbffdfff8
 8000d8c:	cccccccd 	.word	0xcccccccd
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_DMA_Start_IT+0x20>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e04b      	b.n	8000e4c <HAL_DMA_Start_IT+0xb8>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d13a      	bne.n	8000e3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0201 	bic.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 f937 	bl	8001060 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d008      	beq.n	8000e0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f042 020e 	orr.w	r2, r2, #14
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e00f      	b.n	8000e2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0204 	bic.w	r2, r2, #4
 8000e1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 020a 	orr.w	r2, r2, #10
 8000e2a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e005      	b.n	8000e4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e46:	2302      	movs	r3, #2
 8000e48:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	2204      	movs	r2, #4
 8000e72:	409a      	lsls	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d04f      	beq.n	8000f1c <HAL_DMA_IRQHandler+0xc8>
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d04a      	beq.n	8000f1c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0320 	and.w	r3, r3, #32
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d107      	bne.n	8000ea4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0204 	bic.w	r2, r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a66      	ldr	r2, [pc, #408]	; (8001044 <HAL_DMA_IRQHandler+0x1f0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d029      	beq.n	8000f02 <HAL_DMA_IRQHandler+0xae>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a65      	ldr	r2, [pc, #404]	; (8001048 <HAL_DMA_IRQHandler+0x1f4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d022      	beq.n	8000efe <HAL_DMA_IRQHandler+0xaa>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a63      	ldr	r2, [pc, #396]	; (800104c <HAL_DMA_IRQHandler+0x1f8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d01a      	beq.n	8000ef8 <HAL_DMA_IRQHandler+0xa4>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a62      	ldr	r2, [pc, #392]	; (8001050 <HAL_DMA_IRQHandler+0x1fc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d012      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x9e>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a60      	ldr	r2, [pc, #384]	; (8001054 <HAL_DMA_IRQHandler+0x200>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00a      	beq.n	8000eec <HAL_DMA_IRQHandler+0x98>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a5f      	ldr	r2, [pc, #380]	; (8001058 <HAL_DMA_IRQHandler+0x204>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d102      	bne.n	8000ee6 <HAL_DMA_IRQHandler+0x92>
 8000ee0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee4:	e00e      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000ee6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eea:	e00b      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000eec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ef0:	e008      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000ef2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef6:	e005      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	e002      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	e000      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000f02:	2304      	movs	r3, #4
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <HAL_DMA_IRQHandler+0x208>)
 8000f06:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 8094 	beq.w	800103a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f1a:	e08e      	b.n	800103a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2202      	movs	r2, #2
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d056      	beq.n	8000fda <HAL_DMA_IRQHandler+0x186>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d051      	beq.n	8000fda <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 020a 	bic.w	r2, r2, #10
 8000f52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a38      	ldr	r2, [pc, #224]	; (8001044 <HAL_DMA_IRQHandler+0x1f0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d029      	beq.n	8000fba <HAL_DMA_IRQHandler+0x166>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a37      	ldr	r2, [pc, #220]	; (8001048 <HAL_DMA_IRQHandler+0x1f4>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d022      	beq.n	8000fb6 <HAL_DMA_IRQHandler+0x162>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a35      	ldr	r2, [pc, #212]	; (800104c <HAL_DMA_IRQHandler+0x1f8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01a      	beq.n	8000fb0 <HAL_DMA_IRQHandler+0x15c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a34      	ldr	r2, [pc, #208]	; (8001050 <HAL_DMA_IRQHandler+0x1fc>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d012      	beq.n	8000faa <HAL_DMA_IRQHandler+0x156>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a32      	ldr	r2, [pc, #200]	; (8001054 <HAL_DMA_IRQHandler+0x200>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00a      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x150>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a31      	ldr	r2, [pc, #196]	; (8001058 <HAL_DMA_IRQHandler+0x204>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d102      	bne.n	8000f9e <HAL_DMA_IRQHandler+0x14a>
 8000f98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f9c:	e00e      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fa2:	e00b      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	e008      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fae:	e005      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	e002      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	e000      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	4a27      	ldr	r2, [pc, #156]	; (800105c <HAL_DMA_IRQHandler+0x208>)
 8000fbe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d034      	beq.n	800103a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd8:	e02f      	b.n	800103a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	2208      	movs	r2, #8
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d028      	beq.n	800103c <HAL_DMA_IRQHandler+0x1e8>
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d023      	beq.n	800103c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020e 	bic.w	r2, r2, #14
 8001002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	4798      	blx	r3
    }
  }
  return;
 800103a:	bf00      	nop
 800103c:	bf00      	nop
}
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020008 	.word	0x40020008
 8001048:	4002001c 	.word	0x4002001c
 800104c:	40020030 	.word	0x40020030
 8001050:	40020044 	.word	0x40020044
 8001054:	40020058 	.word	0x40020058
 8001058:	4002006c 	.word	0x4002006c
 800105c:	40020000 	.word	0x40020000

08001060 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d108      	bne.n	80010a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800109e:	e007      	b.n	80010b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b08b      	sub	sp, #44	; 0x2c
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	e169      	b.n	80013a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010d0:	2201      	movs	r2, #1
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8158 	bne.w	800139e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a9a      	ldr	r2, [pc, #616]	; (800135c <HAL_GPIO_Init+0x2a0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d05e      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 80010f8:	4a98      	ldr	r2, [pc, #608]	; (800135c <HAL_GPIO_Init+0x2a0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d875      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 80010fe:	4a98      	ldr	r2, [pc, #608]	; (8001360 <HAL_GPIO_Init+0x2a4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d058      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001104:	4a96      	ldr	r2, [pc, #600]	; (8001360 <HAL_GPIO_Init+0x2a4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d86f      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 800110a:	4a96      	ldr	r2, [pc, #600]	; (8001364 <HAL_GPIO_Init+0x2a8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d052      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001110:	4a94      	ldr	r2, [pc, #592]	; (8001364 <HAL_GPIO_Init+0x2a8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d869      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001116:	4a94      	ldr	r2, [pc, #592]	; (8001368 <HAL_GPIO_Init+0x2ac>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d04c      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 800111c:	4a92      	ldr	r2, [pc, #584]	; (8001368 <HAL_GPIO_Init+0x2ac>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d863      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001122:	4a92      	ldr	r2, [pc, #584]	; (800136c <HAL_GPIO_Init+0x2b0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d046      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001128:	4a90      	ldr	r2, [pc, #576]	; (800136c <HAL_GPIO_Init+0x2b0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d85d      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 800112e:	2b12      	cmp	r3, #18
 8001130:	d82a      	bhi.n	8001188 <HAL_GPIO_Init+0xcc>
 8001132:	2b12      	cmp	r3, #18
 8001134:	d859      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <HAL_GPIO_Init+0x80>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	080011b7 	.word	0x080011b7
 8001140:	08001191 	.word	0x08001191
 8001144:	080011a3 	.word	0x080011a3
 8001148:	080011e5 	.word	0x080011e5
 800114c:	080011eb 	.word	0x080011eb
 8001150:	080011eb 	.word	0x080011eb
 8001154:	080011eb 	.word	0x080011eb
 8001158:	080011eb 	.word	0x080011eb
 800115c:	080011eb 	.word	0x080011eb
 8001160:	080011eb 	.word	0x080011eb
 8001164:	080011eb 	.word	0x080011eb
 8001168:	080011eb 	.word	0x080011eb
 800116c:	080011eb 	.word	0x080011eb
 8001170:	080011eb 	.word	0x080011eb
 8001174:	080011eb 	.word	0x080011eb
 8001178:	080011eb 	.word	0x080011eb
 800117c:	080011eb 	.word	0x080011eb
 8001180:	08001199 	.word	0x08001199
 8001184:	080011ad 	.word	0x080011ad
 8001188:	4a79      	ldr	r2, [pc, #484]	; (8001370 <HAL_GPIO_Init+0x2b4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118e:	e02c      	b.n	80011ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e029      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	3304      	adds	r3, #4
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e024      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	3308      	adds	r3, #8
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e01f      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	330c      	adds	r3, #12
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e01a      	b.n	80011ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011be:	2304      	movs	r3, #4
 80011c0:	623b      	str	r3, [r7, #32]
          break;
 80011c2:	e013      	b.n	80011ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011cc:	2308      	movs	r3, #8
 80011ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	611a      	str	r2, [r3, #16]
          break;
 80011d6:	e009      	b.n	80011ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d8:	2308      	movs	r3, #8
 80011da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	615a      	str	r2, [r3, #20]
          break;
 80011e2:	e003      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x130>
          break;
 80011ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d801      	bhi.n	80011f6 <HAL_GPIO_Init+0x13a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	e001      	b.n	80011fa <HAL_GPIO_Init+0x13e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3304      	adds	r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d802      	bhi.n	8001208 <HAL_GPIO_Init+0x14c>
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x152>
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	3b08      	subs	r3, #8
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	210f      	movs	r1, #15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	401a      	ands	r2, r3
 8001220:	6a39      	ldr	r1, [r7, #32]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80b1 	beq.w	800139e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800123c:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2bc>)
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a40      	ldr	r2, [pc, #256]	; (800137c <HAL_GPIO_Init+0x2c0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d013      	beq.n	80012a8 <HAL_GPIO_Init+0x1ec>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <HAL_GPIO_Init+0x2c4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00d      	beq.n	80012a4 <HAL_GPIO_Init+0x1e8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a3e      	ldr	r2, [pc, #248]	; (8001384 <HAL_GPIO_Init+0x2c8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_Init+0x1e4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <HAL_GPIO_Init+0x2cc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d101      	bne.n	800129c <HAL_GPIO_Init+0x1e0>
 8001298:	2303      	movs	r3, #3
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 800129c:	2304      	movs	r3, #4
 800129e:	e004      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a8:	2300      	movs	r3, #0
 80012aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4093      	lsls	r3, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ba:	492f      	ldr	r1, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x2bc>)
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	492c      	ldr	r1, [pc, #176]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4928      	ldr	r1, [pc, #160]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	4922      	ldr	r1, [pc, #136]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	60cb      	str	r3, [r1, #12]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	491e      	ldr	r1, [pc, #120]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4918      	ldr	r1, [pc, #96]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	4914      	ldr	r1, [pc, #80]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d021      	beq.n	8001390 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e021      	b.n	800139e <HAL_GPIO_Init+0x2e2>
 800135a:	bf00      	nop
 800135c:	10320000 	.word	0x10320000
 8001360:	10310000 	.word	0x10310000
 8001364:	10220000 	.word	0x10220000
 8001368:	10210000 	.word	0x10210000
 800136c:	10120000 	.word	0x10120000
 8001370:	10110000 	.word	0x10110000
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	40010800 	.word	0x40010800
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40011000 	.word	0x40011000
 8001388:	40011400 	.word	0x40011400
 800138c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_GPIO_Init+0x304>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	43db      	mvns	r3, r3
 8001398:	4909      	ldr	r1, [pc, #36]	; (80013c0 <HAL_GPIO_Init+0x304>)
 800139a:	4013      	ands	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	3301      	adds	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f47f ae8e 	bne.w	80010d0 <HAL_GPIO_Init+0x14>
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	372c      	adds	r7, #44	; 0x2c
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e001      	b.n	80013e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]
 80013fe:	4613      	mov	r3, r2
 8001400:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001402:	787b      	ldrb	r3, [r7, #1]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001408:	887a      	ldrh	r2, [r7, #2]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800140e:	e003      	b.n	8001418 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	041a      	lsls	r2, r3, #16
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
	...

08001424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f806 	bl	8001454 <HAL_GPIO_EXTI_Callback>
  }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e272      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001488:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d00c      	beq.n	80014ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001494:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d112      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
 80014a0:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d06c      	beq.n	8001594 <HAL_RCC_OscConfig+0x12c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d168      	bne.n	8001594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e24c      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x76>
 80014d0:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a7f      	ldr	r2, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e02e      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x98>
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7a      	ldr	r2, [pc, #488]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a77      	ldr	r2, [pc, #476]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0xbc>
 800150a:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a71      	ldr	r2, [pc, #452]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001524:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a67      	ldr	r2, [pc, #412]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fab4 	bl	8000ab0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fab0 	bl	8000ab0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e200      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xe4>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff faa0 	bl	8000ab0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fa9c 	bl	8000ab0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1ec      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x10c>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d063      	beq.n	800166a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a2:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
 80015ba:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1c0      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4939      	ldr	r1, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e03a      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fa55 	bl	8000ab0 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fa51 	bl	8000ab0 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1a1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4927      	ldr	r1, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa34 	bl	8000ab0 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fa30 	bl	8000ab0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e180      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d03a      	beq.n	80016ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_RCC_OscConfig+0x274>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fa14 	bl	8000ab0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fa10 	bl	8000ab0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e160      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 face 	bl	8001c4c <RCC_Delay>
 80016b0:	e01c      	b.n	80016ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_RCC_OscConfig+0x274>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9fa 	bl	8000ab0 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f9f6 	bl	8000ab0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d908      	bls.n	80016e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e146      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	42420000 	.word	0x42420000
 80016dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e9      	bne.n	80016c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a6 	beq.w	8001846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a87      	ldr	r2, [pc, #540]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b85      	ldr	r3, [pc, #532]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b82      	ldr	r3, [pc, #520]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7e      	ldr	r2, [pc, #504]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff f9b7 	bl	8000ab0 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff f9b3 	bl	8000ab0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e103      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b75      	ldr	r3, [pc, #468]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x312>
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e02d      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x334>
 8001782:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a69      	ldr	r2, [pc, #420]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a66      	ldr	r2, [pc, #408]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e01c      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0x356>
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a60      	ldr	r2, [pc, #384]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	4b5e      	ldr	r3, [pc, #376]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a5d      	ldr	r2, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 80017be:	4b5b      	ldr	r3, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a5a      	ldr	r2, [pc, #360]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b58      	ldr	r3, [pc, #352]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a57      	ldr	r2, [pc, #348]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d015      	beq.n	800180a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff f967 	bl	8000ab0 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f963 	bl	8000ab0 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0b1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ee      	beq.n	80017e6 <HAL_RCC_OscConfig+0x37e>
 8001808:	e014      	b.n	8001834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff f951 	bl	8000ab0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff f94d 	bl	8000ab0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e09b      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	4b40      	ldr	r3, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ee      	bne.n	8001812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	4b3c      	ldr	r3, [pc, #240]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a3b      	ldr	r2, [pc, #236]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8087 	beq.w	800195e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d061      	beq.n	8001920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d146      	bne.n	80018f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_RCC_OscConfig+0x4cc>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f921 	bl	8000ab0 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f91d 	bl	8000ab0 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e06d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d108      	bne.n	80018ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4921      	ldr	r1, [pc, #132]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a19      	ldr	r1, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	430b      	orrs	r3, r1
 80018be:	491b      	ldr	r1, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f8f1 	bl	8000ab0 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f8ed 	bl	8000ab0 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46a>
 80018f0:	e035      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f8da 	bl	8000ab0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f8d6 	bl	8000ab0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e026      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x498>
 800191e:	e01e      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e019      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_OscConfig+0x500>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0d0      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4965      	ldr	r1, [pc, #404]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d040      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e073      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4936      	ldr	r1, [pc, #216]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7ff f828 	bl	8000ab0 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7ff f824 	bl	8000ab0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e053      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d210      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4922      	ldr	r1, [pc, #136]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	490a      	ldr	r1, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1cc>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ff86 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	080041ec 	.word	0x080041ec
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x30>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x36>
 8001b6e:	e027      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	e027      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba2:	fb03 f202 	mul.w	r2, r3, r2
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e004      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	613b      	str	r3, [r7, #16]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc2:	613b      	str	r3, [r7, #16]
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	693b      	ldr	r3, [r7, #16]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	007a1200 	.word	0x007a1200
 8001bdc:	08004204 	.word	0x08004204
 8001be0:	08004214 	.word	0x08004214
 8001be4:	003d0900 	.word	0x003d0900

08001be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff2 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	080041fc 	.word	0x080041fc

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0adb      	lsrs	r3, r3, #11
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	080041fc 	.word	0x080041fc

08001c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <RCC_Delay+0x34>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <RCC_Delay+0x38>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a5b      	lsrs	r3, r3, #9
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c68:	bf00      	nop
  }
  while (Delay --);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f9      	bne.n	8001c68 <RCC_Delay+0x1c>
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e041      	b.n	8001d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fcfe 	bl	80006b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f000 fdd8 	bl	800287c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e041      	b.n	8001dbc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f839 	bl	8001dc4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3304      	adds	r3, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f000 fd89 	bl	800287c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <HAL_TIM_IC_Start_DMA+0x22>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	e013      	b.n	8001e22 <HAL_TIM_IC_Start_DMA+0x4a>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d104      	bne.n	8001e0a <HAL_TIM_IC_Start_DMA+0x32>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	e00b      	b.n	8001e22 <HAL_TIM_IC_Start_DMA+0x4a>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d104      	bne.n	8001e1a <HAL_TIM_IC_Start_DMA+0x42>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	e003      	b.n	8001e22 <HAL_TIM_IC_Start_DMA+0x4a>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <HAL_TIM_IC_Start_DMA+0x5c>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e013      	b.n	8001e5c <HAL_TIM_IC_Start_DMA+0x84>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d104      	bne.n	8001e44 <HAL_TIM_IC_Start_DMA+0x6c>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e00b      	b.n	8001e5c <HAL_TIM_IC_Start_DMA+0x84>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d104      	bne.n	8001e54 <HAL_TIM_IC_Start_DMA+0x7c>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e003      	b.n	8001e5c <HAL_TIM_IC_Start_DMA+0x84>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8001e5e:	7dbb      	ldrb	r3, [r7, #22]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d002      	beq.n	8001e6a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8001e64:	7d7b      	ldrb	r3, [r7, #21]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e132      	b.n	80020d4 <HAL_TIM_IC_Start_DMA+0x2fc>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8001e6e:	7dbb      	ldrb	r3, [r7, #22]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d143      	bne.n	8001efc <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8001e74:	7d7b      	ldrb	r3, [r7, #21]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d140      	bne.n	8001efc <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_TIM_IC_Start_DMA+0xae>
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e124      	b.n	80020d4 <HAL_TIM_IC_Start_DMA+0x2fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d104      	bne.n	8001e9a <HAL_TIM_IC_Start_DMA+0xc2>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	e013      	b.n	8001ec2 <HAL_TIM_IC_Start_DMA+0xea>
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d104      	bne.n	8001eaa <HAL_TIM_IC_Start_DMA+0xd2>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea8:	e00b      	b.n	8001ec2 <HAL_TIM_IC_Start_DMA+0xea>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d104      	bne.n	8001eba <HAL_TIM_IC_Start_DMA+0xe2>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb8:	e003      	b.n	8001ec2 <HAL_TIM_IC_Start_DMA+0xea>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_IC_Start_DMA+0xfa>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 8001ed0:	e016      	b.n	8001f00 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_IC_Start_DMA+0x10a>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) || (Length == 0U))
 8001ee0:	e00e      	b.n	8001f00 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d104      	bne.n	8001ef2 <HAL_TIM_IC_Start_DMA+0x11a>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8001ef0:	e006      	b.n	8001f00 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8001efa:	e001      	b.n	8001f00 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0e9      	b.n	80020d4 <HAL_TIM_IC_Start_DMA+0x2fc>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 ff4e 	bl	8002daa <TIM_CCxChannelCmd>

  switch (Channel)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b0c      	cmp	r3, #12
 8001f12:	f200 80ad 	bhi.w	8002070 <HAL_TIM_IC_Start_DMA+0x298>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <HAL_TIM_IC_Start_DMA+0x144>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f51 	.word	0x08001f51
 8001f20:	08002071 	.word	0x08002071
 8001f24:	08002071 	.word	0x08002071
 8001f28:	08002071 	.word	0x08002071
 8001f2c:	08001f99 	.word	0x08001f99
 8001f30:	08002071 	.word	0x08002071
 8001f34:	08002071 	.word	0x08002071
 8001f38:	08002071 	.word	0x08002071
 8001f3c:	08001fe1 	.word	0x08001fe1
 8001f40:	08002071 	.word	0x08002071
 8001f44:	08002071 	.word	0x08002071
 8001f48:	08002071 	.word	0x08002071
 8001f4c:	08002029 	.word	0x08002029
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	4a61      	ldr	r2, [pc, #388]	; (80020dc <HAL_TIM_IC_Start_DMA+0x304>)
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	4a60      	ldr	r2, [pc, #384]	; (80020e0 <HAL_TIM_IC_Start_DMA+0x308>)
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	4a5f      	ldr	r2, [pc, #380]	; (80020e4 <HAL_TIM_IC_Start_DMA+0x30c>)
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3334      	adds	r3, #52	; 0x34
 8001f72:	4619      	mov	r1, r3
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	f7fe ff0c 	bl	8000d94 <HAL_DMA_Start_IT>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0a6      	b.n	80020d4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f94:	60da      	str	r2, [r3, #12]
      break;
 8001f96:	e06e      	b.n	8002076 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <HAL_TIM_IC_Start_DMA+0x304>)
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <HAL_TIM_IC_Start_DMA+0x308>)
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_TIM_IC_Start_DMA+0x30c>)
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3338      	adds	r3, #56	; 0x38
 8001fba:	4619      	mov	r1, r3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	f7fe fee8 	bl	8000d94 <HAL_DMA_Start_IT>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e082      	b.n	80020d4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fdc:	60da      	str	r2, [r3, #12]
      break;
 8001fde:	e04a      	b.n	8002076 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	4a3d      	ldr	r2, [pc, #244]	; (80020dc <HAL_TIM_IC_Start_DMA+0x304>)
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	4a3c      	ldr	r2, [pc, #240]	; (80020e0 <HAL_TIM_IC_Start_DMA+0x308>)
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <HAL_TIM_IC_Start_DMA+0x30c>)
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	333c      	adds	r3, #60	; 0x3c
 8002002:	4619      	mov	r1, r3
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	f7fe fec4 	bl	8000d94 <HAL_DMA_Start_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e05e      	b.n	80020d4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002024:	60da      	str	r2, [r3, #12]
      break;
 8002026:	e026      	b.n	8002076 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <HAL_TIM_IC_Start_DMA+0x304>)
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <HAL_TIM_IC_Start_DMA+0x308>)
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_TIM_IC_Start_DMA+0x30c>)
 800203e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3340      	adds	r3, #64	; 0x40
 800204a:	4619      	mov	r1, r3
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	f7fe fea0 	bl	8000d94 <HAL_DMA_Start_IT>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e03a      	b.n	80020d4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800206c:	60da      	str	r2, [r3, #12]
      break;
 800206e:	e002      	b.n	8002076 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	75fb      	strb	r3, [r7, #23]
      break;
 8002074:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_TIM_IC_Start_DMA+0x310>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00e      	beq.n	800209e <HAL_TIM_IC_Start_DMA+0x2c6>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d009      	beq.n	800209e <HAL_TIM_IC_Start_DMA+0x2c6>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_TIM_IC_Start_DMA+0x314>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_TIM_IC_Start_DMA+0x2c6>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <HAL_TIM_IC_Start_DMA+0x318>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d111      	bne.n	80020c2 <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d010      	beq.n	80020d2 <HAL_TIM_IC_Start_DMA+0x2fa>
    {
      __HAL_TIM_ENABLE(htim);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c0:	e007      	b.n	80020d2 <HAL_TIM_IC_Start_DMA+0x2fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0201 	orr.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800274d 	.word	0x0800274d
 80020e0:	08002815 	.word	0x08002815
 80020e4:	080026bb 	.word	0x080026bb
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800

080020f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0202 	mvn.w	r2, #2
 8002120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe f82a 	bl	8000190 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa8e 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa9d 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b04      	cmp	r3, #4
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0204 	mvn.w	r2, #4
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe f800 	bl	8000190 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa64 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fa73 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0208 	mvn.w	r2, #8
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2204      	movs	r2, #4
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fd ffd6 	bl	8000190 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fa3a 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fa49 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b10      	cmp	r3, #16
 8002204:	d122      	bne.n	800224c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b10      	cmp	r3, #16
 8002212:	d11b      	bne.n	800224c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0210 	mvn.w	r2, #16
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2208      	movs	r2, #8
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fd ffac 	bl	8000190 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa10 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fa1f 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0201 	mvn.w	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9eb 	bl	800264e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b80      	cmp	r3, #128	; 0x80
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	2b80      	cmp	r3, #128	; 0x80
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fe0f 	bl	8002ec2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b40      	cmp	r3, #64	; 0x40
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f9e3 	bl	8002696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b20      	cmp	r3, #32
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0220 	mvn.w	r2, #32
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fdda 	bl	8002eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_TIM_IC_ConfigChannel+0x1e>
 800231e:	2302      	movs	r3, #2
 8002320:	e088      	b.n	8002434 <HAL_TIM_IC_ConfigChannel+0x130>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002340:	f000 fb90 	bl	8002a64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020c 	bic.w	r2, r2, #12
 8002352:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6999      	ldr	r1, [r3, #24]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	619a      	str	r2, [r3, #24]
 8002366:	e060      	b.n	800242a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d11c      	bne.n	80023a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800237e:	f000 fbf9 	bl	8002b74 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002390:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6999      	ldr	r1, [r3, #24]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	619a      	str	r2, [r3, #24]
 80023a6:	e040      	b.n	800242a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d11b      	bne.n	80023e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80023be:	f000 fc44 	bl	8002c4a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 020c 	bic.w	r2, r2, #12
 80023d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69d9      	ldr	r1, [r3, #28]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	61da      	str	r2, [r3, #28]
 80023e4:	e021      	b.n	800242a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	d11c      	bne.n	8002426 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80023fc:	f000 fc60 	bl	8002cc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800240e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69d9      	ldr	r1, [r3, #28]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	021a      	lsls	r2, r3, #8
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	61da      	str	r2, [r3, #28]
 8002424:	e001      	b.n	800242a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_TIM_ConfigClockSource+0x1c>
 8002454:	2302      	movs	r3, #2
 8002456:	e0b4      	b.n	80025c2 <HAL_TIM_ConfigClockSource+0x186>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800247e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002490:	d03e      	beq.n	8002510 <HAL_TIM_ConfigClockSource+0xd4>
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002496:	f200 8087 	bhi.w	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 800249a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249e:	f000 8086 	beq.w	80025ae <HAL_TIM_ConfigClockSource+0x172>
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a6:	d87f      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b70      	cmp	r3, #112	; 0x70
 80024aa:	d01a      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0xa6>
 80024ac:	2b70      	cmp	r3, #112	; 0x70
 80024ae:	d87b      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b60      	cmp	r3, #96	; 0x60
 80024b2:	d050      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x11a>
 80024b4:	2b60      	cmp	r3, #96	; 0x60
 80024b6:	d877      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b50      	cmp	r3, #80	; 0x50
 80024ba:	d03c      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0xfa>
 80024bc:	2b50      	cmp	r3, #80	; 0x50
 80024be:	d873      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d058      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x13a>
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d86f      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b30      	cmp	r3, #48	; 0x30
 80024ca:	d064      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	2b30      	cmp	r3, #48	; 0x30
 80024ce:	d86b      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d060      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d867      	bhi.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d05c      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d05a      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	e062      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024f2:	f000 fc3b 	bl	8002d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	609a      	str	r2, [r3, #8]
      break;
 800250e:	e04f      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002520:	f000 fc24 	bl	8002d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002532:	609a      	str	r2, [r3, #8]
      break;
 8002534:	e03c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002542:	461a      	mov	r2, r3
 8002544:	f000 fae8 	bl	8002b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2150      	movs	r1, #80	; 0x50
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fbf2 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 8002554:	e02c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002562:	461a      	mov	r2, r3
 8002564:	f000 fb42 	bl	8002bec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2160      	movs	r1, #96	; 0x60
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fbe2 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 8002574:	e01c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002582:	461a      	mov	r2, r3
 8002584:	f000 fac8 	bl	8002b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2140      	movs	r1, #64	; 0x40
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fbd2 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 8002594:	e00c      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f000 fbc9 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 80025a6:	e003      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e000      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80025de:	2302      	movs	r3, #2
 80025e0:	e031      	b.n	8002646 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f9a3 	bl	8002940 <TIM_SlaveTimer_SetConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e018      	b.n	8002646 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002622:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002632:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d107      	bne.n	80026e2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e0:	e02a      	b.n	8002738 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2202      	movs	r2, #2
 80026f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fa:	e01d      	b.n	8002738 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d107      	bne.n	8002716 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2204      	movs	r2, #4
 800270a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002714:	e010      	b.n	8002738 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	d107      	bne.n	8002730 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2208      	movs	r2, #8
 8002724:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800272e:	e003      	b.n	8002738 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff ffb5 	bl	80026a8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	d10f      	bne.n	8002784 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d146      	bne.n	8002800 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002782:	e03d      	b.n	8002800 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d10f      	bne.n	80027ae <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2202      	movs	r2, #2
 8002792:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d131      	bne.n	8002800 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027ac:	e028      	b.n	8002800 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10f      	bne.n	80027d8 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2204      	movs	r2, #4
 80027bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11c      	bne.n	8002800 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d6:	e013      	b.n	8002800 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d10e      	bne.n	8002800 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2208      	movs	r2, #8
 80027e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7fd fcc5 	bl	8000190 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d103      	bne.n	8002834 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	771a      	strb	r2, [r3, #28]
 8002832:	e019      	b.n	8002868 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d103      	bne.n	8002846 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2202      	movs	r2, #2
 8002842:	771a      	strb	r2, [r3, #28]
 8002844:	e010      	b.n	8002868 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d103      	bne.n	8002858 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2204      	movs	r2, #4
 8002854:	771a      	strb	r2, [r3, #28]
 8002856:	e007      	b.n	8002868 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d102      	bne.n	8002868 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2208      	movs	r2, #8
 8002866:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff ff02 	bl	8002672 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a29      	ldr	r2, [pc, #164]	; (8002934 <TIM_Base_SetConfig+0xb8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00b      	beq.n	80028ac <TIM_Base_SetConfig+0x30>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289a:	d007      	beq.n	80028ac <TIM_Base_SetConfig+0x30>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a26      	ldr	r2, [pc, #152]	; (8002938 <TIM_Base_SetConfig+0xbc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0x30>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a25      	ldr	r2, [pc, #148]	; (800293c <TIM_Base_SetConfig+0xc0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d108      	bne.n	80028be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <TIM_Base_SetConfig+0xb8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00b      	beq.n	80028de <TIM_Base_SetConfig+0x62>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d007      	beq.n	80028de <TIM_Base_SetConfig+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <TIM_Base_SetConfig+0xbc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d003      	beq.n	80028de <TIM_Base_SetConfig+0x62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a18      	ldr	r2, [pc, #96]	; (800293c <TIM_Base_SetConfig+0xc0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <TIM_Base_SetConfig+0xb8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d103      	bne.n	8002924 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	615a      	str	r2, [r3, #20]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800

08002940 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b70      	cmp	r3, #112	; 0x70
 8002988:	d01a      	beq.n	80029c0 <TIM_SlaveTimer_SetConfig+0x80>
 800298a:	2b70      	cmp	r3, #112	; 0x70
 800298c:	d860      	bhi.n	8002a50 <TIM_SlaveTimer_SetConfig+0x110>
 800298e:	2b60      	cmp	r3, #96	; 0x60
 8002990:	d054      	beq.n	8002a3c <TIM_SlaveTimer_SetConfig+0xfc>
 8002992:	2b60      	cmp	r3, #96	; 0x60
 8002994:	d85c      	bhi.n	8002a50 <TIM_SlaveTimer_SetConfig+0x110>
 8002996:	2b50      	cmp	r3, #80	; 0x50
 8002998:	d046      	beq.n	8002a28 <TIM_SlaveTimer_SetConfig+0xe8>
 800299a:	2b50      	cmp	r3, #80	; 0x50
 800299c:	d858      	bhi.n	8002a50 <TIM_SlaveTimer_SetConfig+0x110>
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d019      	beq.n	80029d6 <TIM_SlaveTimer_SetConfig+0x96>
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d854      	bhi.n	8002a50 <TIM_SlaveTimer_SetConfig+0x110>
 80029a6:	2b30      	cmp	r3, #48	; 0x30
 80029a8:	d055      	beq.n	8002a56 <TIM_SlaveTimer_SetConfig+0x116>
 80029aa:	2b30      	cmp	r3, #48	; 0x30
 80029ac:	d850      	bhi.n	8002a50 <TIM_SlaveTimer_SetConfig+0x110>
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d051      	beq.n	8002a56 <TIM_SlaveTimer_SetConfig+0x116>
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d84c      	bhi.n	8002a50 <TIM_SlaveTimer_SetConfig+0x110>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d04d      	beq.n	8002a56 <TIM_SlaveTimer_SetConfig+0x116>
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d04b      	beq.n	8002a56 <TIM_SlaveTimer_SetConfig+0x116>
 80029be:	e047      	b.n	8002a50 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80029d0:	f000 f9cc 	bl	8002d6c <TIM_ETR_SetConfig>
      break;
 80029d4:	e040      	b.n	8002a58 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d101      	bne.n	80029e2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03b      	b.n	8002a5a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1a      	ldr	r2, [r3, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a08:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
      break;
 8002a26:	e017      	b.n	8002a58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a34:	461a      	mov	r2, r3
 8002a36:	f000 f86f 	bl	8002b18 <TIM_TI1_ConfigInputStage>
      break;
 8002a3a:	e00d      	b.n	8002a58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f000 f8cf 	bl	8002bec <TIM_TI2_ConfigInputStage>
      break;
 8002a4e:	e003      	b.n	8002a58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	75fb      	strb	r3, [r7, #23]
      break;
 8002a54:	e000      	b.n	8002a58 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002a56:	bf00      	nop
  }

  return status;
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 0201 	bic.w	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <TIM_TI1_SetConfig+0xa8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <TIM_TI1_SetConfig+0x46>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d007      	beq.n	8002aaa <TIM_TI1_SetConfig+0x46>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <TIM_TI1_SetConfig+0xac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <TIM_TI1_SetConfig+0x46>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <TIM_TI1_SetConfig+0xb0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <TIM_TI1_SetConfig+0x4a>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <TIM_TI1_SetConfig+0x4c>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e003      	b.n	8002ace <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f023 030a 	bic.w	r3, r3, #10
 8002ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f003 030a 	and.w	r3, r3, #10
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40000800 	.word	0x40000800

08002b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f023 0201 	bic.w	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f023 030a 	bic.w	r3, r3, #10
 8002b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f023 0210 	bic.w	r2, r3, #16
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	031b      	lsls	r3, r3, #12
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f023 0210 	bic.w	r2, r3, #16
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	031b      	lsls	r3, r3, #12
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	621a      	str	r2, [r3, #32]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b087      	sub	sp, #28
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cfe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	031b      	lsls	r3, r3, #12
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	031b      	lsls	r3, r3, #12
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	621a      	str	r2, [r3, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f043 0307 	orr.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	609a      	str	r2, [r3, #8]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	021a      	lsls	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	621a      	str	r2, [r3, #32]
}
 8002de8:	bf00      	nop
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e046      	b.n	8002e9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d009      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e042      	b.n	8002f6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fc4e 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	; 0x24
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f91d 	bl	8003158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d16d      	bne.n	8003070 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Transmit+0x2c>
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e066      	b.n	8003072 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2221      	movs	r2, #33	; 0x21
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb2:	f7fd fd7d 	bl	8000ab0 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_UART_Transmit+0x6c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e003      	b.n	8002fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fe8:	e02a      	b.n	8003040 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f840 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e036      	b.n	8003072 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	3302      	adds	r3, #2
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e007      	b.n	8003032 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1cf      	bne.n	8002fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f810 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e006      	b.n	8003072 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b090      	sub	sp, #64	; 0x40
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308a:	e050      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d04c      	beq.n	800312e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0x30>
 800309a:	f7fd fd09 	bl	8000ab0 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d241      	bcs.n	800312e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ca:	637a      	str	r2, [r7, #52]	; 0x34
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e5      	bne.n	80030aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	613b      	str	r3, [r7, #16]
   return(result);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030fe:	623a      	str	r2, [r7, #32]
 8003100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	61bb      	str	r3, [r7, #24]
   return(result);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e5      	bne.n	80030de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e00f      	b.n	800314e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	429a      	cmp	r2, r3
 800314a:	d09f      	beq.n	800308c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3740      	adds	r7, #64	; 0x40
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003192:	f023 030c 	bic.w	r3, r3, #12
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	430b      	orrs	r3, r1
 800319e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <UART_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d103      	bne.n	80031c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7fe fd30 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	e002      	b.n	80031ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe fd18 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 80031cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <UART_SetConfig+0x118>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	0119      	lsls	r1, r3, #4
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <UART_SetConfig+0x118>)
 8003206:	fba3 0302 	umull	r0, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2064      	movs	r0, #100	; 0x64
 800320e:	fb00 f303 	mul.w	r3, r0, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <UART_SetConfig+0x118>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003224:	4419      	add	r1, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fbb2 f2f3 	udiv	r2, r2, r3
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <UART_SetConfig+0x118>)
 800323e:	fba3 0302 	umull	r0, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2064      	movs	r0, #100	; 0x64
 8003246:	fb00 f303 	mul.w	r3, r0, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	3332      	adds	r3, #50	; 0x32
 8003250:	4a07      	ldr	r2, [pc, #28]	; (8003270 <UART_SetConfig+0x118>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	440a      	add	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40013800 	.word	0x40013800
 8003270:	51eb851f 	.word	0x51eb851f

08003274 <std>:
 8003274:	2300      	movs	r3, #0
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
 800327a:	e9c0 3300 	strd	r3, r3, [r0]
 800327e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003282:	6083      	str	r3, [r0, #8]
 8003284:	8181      	strh	r1, [r0, #12]
 8003286:	6643      	str	r3, [r0, #100]	; 0x64
 8003288:	81c2      	strh	r2, [r0, #14]
 800328a:	6183      	str	r3, [r0, #24]
 800328c:	4619      	mov	r1, r3
 800328e:	2208      	movs	r2, #8
 8003290:	305c      	adds	r0, #92	; 0x5c
 8003292:	f000 f9f7 	bl	8003684 <memset>
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <std+0x58>)
 8003298:	6224      	str	r4, [r4, #32]
 800329a:	6263      	str	r3, [r4, #36]	; 0x24
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <std+0x5c>)
 800329e:	62a3      	str	r3, [r4, #40]	; 0x28
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <std+0x60>)
 80032a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <std+0x64>)
 80032a6:	6323      	str	r3, [r4, #48]	; 0x30
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <std+0x68>)
 80032aa:	429c      	cmp	r4, r3
 80032ac:	d006      	beq.n	80032bc <std+0x48>
 80032ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80032b2:	4294      	cmp	r4, r2
 80032b4:	d002      	beq.n	80032bc <std+0x48>
 80032b6:	33d0      	adds	r3, #208	; 0xd0
 80032b8:	429c      	cmp	r4, r3
 80032ba:	d105      	bne.n	80032c8 <std+0x54>
 80032bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c4:	f000 ba56 	b.w	8003774 <__retarget_lock_init_recursive>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	080034d5 	.word	0x080034d5
 80032d0:	080034f7 	.word	0x080034f7
 80032d4:	0800352f 	.word	0x0800352f
 80032d8:	08003553 	.word	0x08003553
 80032dc:	200001ac 	.word	0x200001ac

080032e0 <stdio_exit_handler>:
 80032e0:	4a02      	ldr	r2, [pc, #8]	; (80032ec <stdio_exit_handler+0xc>)
 80032e2:	4903      	ldr	r1, [pc, #12]	; (80032f0 <stdio_exit_handler+0x10>)
 80032e4:	4803      	ldr	r0, [pc, #12]	; (80032f4 <stdio_exit_handler+0x14>)
 80032e6:	f000 b869 	b.w	80033bc <_fwalk_sglue>
 80032ea:	bf00      	nop
 80032ec:	2000000c 	.word	0x2000000c
 80032f0:	08004015 	.word	0x08004015
 80032f4:	20000018 	.word	0x20000018

080032f8 <cleanup_stdio>:
 80032f8:	6841      	ldr	r1, [r0, #4]
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <cleanup_stdio+0x34>)
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4299      	cmp	r1, r3
 8003300:	4604      	mov	r4, r0
 8003302:	d001      	beq.n	8003308 <cleanup_stdio+0x10>
 8003304:	f000 fe86 	bl	8004014 <_fflush_r>
 8003308:	68a1      	ldr	r1, [r4, #8]
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <cleanup_stdio+0x38>)
 800330c:	4299      	cmp	r1, r3
 800330e:	d002      	beq.n	8003316 <cleanup_stdio+0x1e>
 8003310:	4620      	mov	r0, r4
 8003312:	f000 fe7f 	bl	8004014 <_fflush_r>
 8003316:	68e1      	ldr	r1, [r4, #12]
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <cleanup_stdio+0x3c>)
 800331a:	4299      	cmp	r1, r3
 800331c:	d004      	beq.n	8003328 <cleanup_stdio+0x30>
 800331e:	4620      	mov	r0, r4
 8003320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003324:	f000 be76 	b.w	8004014 <_fflush_r>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	200001ac 	.word	0x200001ac
 8003330:	20000214 	.word	0x20000214
 8003334:	2000027c 	.word	0x2000027c

08003338 <global_stdio_init.part.0>:
 8003338:	b510      	push	{r4, lr}
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <global_stdio_init.part.0+0x30>)
 800333c:	4c0b      	ldr	r4, [pc, #44]	; (800336c <global_stdio_init.part.0+0x34>)
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <global_stdio_init.part.0+0x38>)
 8003340:	4620      	mov	r0, r4
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	2104      	movs	r1, #4
 8003346:	2200      	movs	r2, #0
 8003348:	f7ff ff94 	bl	8003274 <std>
 800334c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003350:	2201      	movs	r2, #1
 8003352:	2109      	movs	r1, #9
 8003354:	f7ff ff8e 	bl	8003274 <std>
 8003358:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800335c:	2202      	movs	r2, #2
 800335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003362:	2112      	movs	r1, #18
 8003364:	f7ff bf86 	b.w	8003274 <std>
 8003368:	200002e4 	.word	0x200002e4
 800336c:	200001ac 	.word	0x200001ac
 8003370:	080032e1 	.word	0x080032e1

08003374 <__sfp_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sfp_lock_acquire+0x8>)
 8003376:	f000 b9fe 	b.w	8003776 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	200002ed 	.word	0x200002ed

08003380 <__sfp_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sfp_lock_release+0x8>)
 8003382:	f000 b9f9 	b.w	8003778 <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	200002ed 	.word	0x200002ed

0800338c <__sinit>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	f7ff fff0 	bl	8003374 <__sfp_lock_acquire>
 8003394:	6a23      	ldr	r3, [r4, #32]
 8003396:	b11b      	cbz	r3, 80033a0 <__sinit+0x14>
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f7ff bff0 	b.w	8003380 <__sfp_lock_release>
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__sinit+0x28>)
 80033a2:	6223      	str	r3, [r4, #32]
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__sinit+0x2c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f5      	bne.n	8003398 <__sinit+0xc>
 80033ac:	f7ff ffc4 	bl	8003338 <global_stdio_init.part.0>
 80033b0:	e7f2      	b.n	8003398 <__sinit+0xc>
 80033b2:	bf00      	nop
 80033b4:	080032f9 	.word	0x080032f9
 80033b8:	200002e4 	.word	0x200002e4

080033bc <_fwalk_sglue>:
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4607      	mov	r7, r0
 80033c2:	4688      	mov	r8, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	2600      	movs	r6, #0
 80033c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033cc:	f1b9 0901 	subs.w	r9, r9, #1
 80033d0:	d505      	bpl.n	80033de <_fwalk_sglue+0x22>
 80033d2:	6824      	ldr	r4, [r4, #0]
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d1f7      	bne.n	80033c8 <_fwalk_sglue+0xc>
 80033d8:	4630      	mov	r0, r6
 80033da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033de:	89ab      	ldrh	r3, [r5, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d907      	bls.n	80033f4 <_fwalk_sglue+0x38>
 80033e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033e8:	3301      	adds	r3, #1
 80033ea:	d003      	beq.n	80033f4 <_fwalk_sglue+0x38>
 80033ec:	4629      	mov	r1, r5
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c0      	blx	r8
 80033f2:	4306      	orrs	r6, r0
 80033f4:	3568      	adds	r5, #104	; 0x68
 80033f6:	e7e9      	b.n	80033cc <_fwalk_sglue+0x10>

080033f8 <iprintf>:
 80033f8:	b40f      	push	{r0, r1, r2, r3}
 80033fa:	b507      	push	{r0, r1, r2, lr}
 80033fc:	4906      	ldr	r1, [pc, #24]	; (8003418 <iprintf+0x20>)
 80033fe:	ab04      	add	r3, sp, #16
 8003400:	6808      	ldr	r0, [r1, #0]
 8003402:	f853 2b04 	ldr.w	r2, [r3], #4
 8003406:	6881      	ldr	r1, [r0, #8]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	f000 fad3 	bl	80039b4 <_vfiprintf_r>
 800340e:	b003      	add	sp, #12
 8003410:	f85d eb04 	ldr.w	lr, [sp], #4
 8003414:	b004      	add	sp, #16
 8003416:	4770      	bx	lr
 8003418:	20000064 	.word	0x20000064

0800341c <_puts_r>:
 800341c:	6a03      	ldr	r3, [r0, #32]
 800341e:	b570      	push	{r4, r5, r6, lr}
 8003420:	4605      	mov	r5, r0
 8003422:	460e      	mov	r6, r1
 8003424:	6884      	ldr	r4, [r0, #8]
 8003426:	b90b      	cbnz	r3, 800342c <_puts_r+0x10>
 8003428:	f7ff ffb0 	bl	800338c <__sinit>
 800342c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800342e:	07db      	lsls	r3, r3, #31
 8003430:	d405      	bmi.n	800343e <_puts_r+0x22>
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	0598      	lsls	r0, r3, #22
 8003436:	d402      	bmi.n	800343e <_puts_r+0x22>
 8003438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800343a:	f000 f99c 	bl	8003776 <__retarget_lock_acquire_recursive>
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	0719      	lsls	r1, r3, #28
 8003442:	d513      	bpl.n	800346c <_puts_r+0x50>
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	b18b      	cbz	r3, 800346c <_puts_r+0x50>
 8003448:	3e01      	subs	r6, #1
 800344a:	68a3      	ldr	r3, [r4, #8]
 800344c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003450:	3b01      	subs	r3, #1
 8003452:	60a3      	str	r3, [r4, #8]
 8003454:	b9e9      	cbnz	r1, 8003492 <_puts_r+0x76>
 8003456:	2b00      	cmp	r3, #0
 8003458:	da2e      	bge.n	80034b8 <_puts_r+0x9c>
 800345a:	4622      	mov	r2, r4
 800345c:	210a      	movs	r1, #10
 800345e:	4628      	mov	r0, r5
 8003460:	f000 f87b 	bl	800355a <__swbuf_r>
 8003464:	3001      	adds	r0, #1
 8003466:	d007      	beq.n	8003478 <_puts_r+0x5c>
 8003468:	250a      	movs	r5, #10
 800346a:	e007      	b.n	800347c <_puts_r+0x60>
 800346c:	4621      	mov	r1, r4
 800346e:	4628      	mov	r0, r5
 8003470:	f000 f8b0 	bl	80035d4 <__swsetup_r>
 8003474:	2800      	cmp	r0, #0
 8003476:	d0e7      	beq.n	8003448 <_puts_r+0x2c>
 8003478:	f04f 35ff 	mov.w	r5, #4294967295
 800347c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800347e:	07da      	lsls	r2, r3, #31
 8003480:	d405      	bmi.n	800348e <_puts_r+0x72>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	059b      	lsls	r3, r3, #22
 8003486:	d402      	bmi.n	800348e <_puts_r+0x72>
 8003488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348a:	f000 f975 	bl	8003778 <__retarget_lock_release_recursive>
 800348e:	4628      	mov	r0, r5
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	da04      	bge.n	80034a0 <_puts_r+0x84>
 8003496:	69a2      	ldr	r2, [r4, #24]
 8003498:	429a      	cmp	r2, r3
 800349a:	dc06      	bgt.n	80034aa <_puts_r+0x8e>
 800349c:	290a      	cmp	r1, #10
 800349e:	d004      	beq.n	80034aa <_puts_r+0x8e>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	7019      	strb	r1, [r3, #0]
 80034a8:	e7cf      	b.n	800344a <_puts_r+0x2e>
 80034aa:	4622      	mov	r2, r4
 80034ac:	4628      	mov	r0, r5
 80034ae:	f000 f854 	bl	800355a <__swbuf_r>
 80034b2:	3001      	adds	r0, #1
 80034b4:	d1c9      	bne.n	800344a <_puts_r+0x2e>
 80034b6:	e7df      	b.n	8003478 <_puts_r+0x5c>
 80034b8:	250a      	movs	r5, #10
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	6022      	str	r2, [r4, #0]
 80034c0:	701d      	strb	r5, [r3, #0]
 80034c2:	e7db      	b.n	800347c <_puts_r+0x60>

080034c4 <puts>:
 80034c4:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <puts+0xc>)
 80034c6:	4601      	mov	r1, r0
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	f7ff bfa7 	b.w	800341c <_puts_r>
 80034ce:	bf00      	nop
 80034d0:	20000064 	.word	0x20000064

080034d4 <__sread>:
 80034d4:	b510      	push	{r4, lr}
 80034d6:	460c      	mov	r4, r1
 80034d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034dc:	f000 f8fc 	bl	80036d8 <_read_r>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	bfab      	itete	ge
 80034e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034e6:	89a3      	ldrhlt	r3, [r4, #12]
 80034e8:	181b      	addge	r3, r3, r0
 80034ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034ee:	bfac      	ite	ge
 80034f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80034f2:	81a3      	strhlt	r3, [r4, #12]
 80034f4:	bd10      	pop	{r4, pc}

080034f6 <__swrite>:
 80034f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fa:	461f      	mov	r7, r3
 80034fc:	898b      	ldrh	r3, [r1, #12]
 80034fe:	4605      	mov	r5, r0
 8003500:	05db      	lsls	r3, r3, #23
 8003502:	460c      	mov	r4, r1
 8003504:	4616      	mov	r6, r2
 8003506:	d505      	bpl.n	8003514 <__swrite+0x1e>
 8003508:	2302      	movs	r3, #2
 800350a:	2200      	movs	r2, #0
 800350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003510:	f000 f8d0 	bl	80036b4 <_lseek_r>
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	4632      	mov	r2, r6
 8003518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	4628      	mov	r0, r5
 8003520:	463b      	mov	r3, r7
 8003522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800352a:	f000 b8e7 	b.w	80036fc <_write_r>

0800352e <__sseek>:
 800352e:	b510      	push	{r4, lr}
 8003530:	460c      	mov	r4, r1
 8003532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003536:	f000 f8bd 	bl	80036b4 <_lseek_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	bf15      	itete	ne
 8003540:	6560      	strne	r0, [r4, #84]	; 0x54
 8003542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800354a:	81a3      	strheq	r3, [r4, #12]
 800354c:	bf18      	it	ne
 800354e:	81a3      	strhne	r3, [r4, #12]
 8003550:	bd10      	pop	{r4, pc}

08003552 <__sclose>:
 8003552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003556:	f000 b89d 	b.w	8003694 <_close_r>

0800355a <__swbuf_r>:
 800355a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355c:	460e      	mov	r6, r1
 800355e:	4614      	mov	r4, r2
 8003560:	4605      	mov	r5, r0
 8003562:	b118      	cbz	r0, 800356c <__swbuf_r+0x12>
 8003564:	6a03      	ldr	r3, [r0, #32]
 8003566:	b90b      	cbnz	r3, 800356c <__swbuf_r+0x12>
 8003568:	f7ff ff10 	bl	800338c <__sinit>
 800356c:	69a3      	ldr	r3, [r4, #24]
 800356e:	60a3      	str	r3, [r4, #8]
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	071a      	lsls	r2, r3, #28
 8003574:	d525      	bpl.n	80035c2 <__swbuf_r+0x68>
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	b31b      	cbz	r3, 80035c2 <__swbuf_r+0x68>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	6922      	ldr	r2, [r4, #16]
 800357e:	b2f6      	uxtb	r6, r6
 8003580:	1a98      	subs	r0, r3, r2
 8003582:	6963      	ldr	r3, [r4, #20]
 8003584:	4637      	mov	r7, r6
 8003586:	4283      	cmp	r3, r0
 8003588:	dc04      	bgt.n	8003594 <__swbuf_r+0x3a>
 800358a:	4621      	mov	r1, r4
 800358c:	4628      	mov	r0, r5
 800358e:	f000 fd41 	bl	8004014 <_fflush_r>
 8003592:	b9e0      	cbnz	r0, 80035ce <__swbuf_r+0x74>
 8003594:	68a3      	ldr	r3, [r4, #8]
 8003596:	3b01      	subs	r3, #1
 8003598:	60a3      	str	r3, [r4, #8]
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	6022      	str	r2, [r4, #0]
 80035a0:	701e      	strb	r6, [r3, #0]
 80035a2:	6962      	ldr	r2, [r4, #20]
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d004      	beq.n	80035b4 <__swbuf_r+0x5a>
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	07db      	lsls	r3, r3, #31
 80035ae:	d506      	bpl.n	80035be <__swbuf_r+0x64>
 80035b0:	2e0a      	cmp	r6, #10
 80035b2:	d104      	bne.n	80035be <__swbuf_r+0x64>
 80035b4:	4621      	mov	r1, r4
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 fd2c 	bl	8004014 <_fflush_r>
 80035bc:	b938      	cbnz	r0, 80035ce <__swbuf_r+0x74>
 80035be:	4638      	mov	r0, r7
 80035c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035c2:	4621      	mov	r1, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	f000 f805 	bl	80035d4 <__swsetup_r>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d0d5      	beq.n	800357a <__swbuf_r+0x20>
 80035ce:	f04f 37ff 	mov.w	r7, #4294967295
 80035d2:	e7f4      	b.n	80035be <__swbuf_r+0x64>

080035d4 <__swsetup_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <__swsetup_r+0xac>)
 80035d8:	4605      	mov	r5, r0
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	460c      	mov	r4, r1
 80035de:	b118      	cbz	r0, 80035e8 <__swsetup_r+0x14>
 80035e0:	6a03      	ldr	r3, [r0, #32]
 80035e2:	b90b      	cbnz	r3, 80035e8 <__swsetup_r+0x14>
 80035e4:	f7ff fed2 	bl	800338c <__sinit>
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035ee:	0718      	lsls	r0, r3, #28
 80035f0:	d422      	bmi.n	8003638 <__swsetup_r+0x64>
 80035f2:	06d9      	lsls	r1, r3, #27
 80035f4:	d407      	bmi.n	8003606 <__swsetup_r+0x32>
 80035f6:	2309      	movs	r3, #9
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	e034      	b.n	8003670 <__swsetup_r+0x9c>
 8003606:	0758      	lsls	r0, r3, #29
 8003608:	d512      	bpl.n	8003630 <__swsetup_r+0x5c>
 800360a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800360c:	b141      	cbz	r1, 8003620 <__swsetup_r+0x4c>
 800360e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003612:	4299      	cmp	r1, r3
 8003614:	d002      	beq.n	800361c <__swsetup_r+0x48>
 8003616:	4628      	mov	r0, r5
 8003618:	f000 f8b0 	bl	800377c <_free_r>
 800361c:	2300      	movs	r3, #0
 800361e:	6363      	str	r3, [r4, #52]	; 0x34
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	2300      	movs	r3, #0
 800362a:	6063      	str	r3, [r4, #4]
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f043 0308 	orr.w	r3, r3, #8
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	b94b      	cbnz	r3, 8003650 <__swsetup_r+0x7c>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003646:	d003      	beq.n	8003650 <__swsetup_r+0x7c>
 8003648:	4621      	mov	r1, r4
 800364a:	4628      	mov	r0, r5
 800364c:	f000 fd2f 	bl	80040ae <__smakebuf_r>
 8003650:	89a0      	ldrh	r0, [r4, #12]
 8003652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003656:	f010 0301 	ands.w	r3, r0, #1
 800365a:	d00a      	beq.n	8003672 <__swsetup_r+0x9e>
 800365c:	2300      	movs	r3, #0
 800365e:	60a3      	str	r3, [r4, #8]
 8003660:	6963      	ldr	r3, [r4, #20]
 8003662:	425b      	negs	r3, r3
 8003664:	61a3      	str	r3, [r4, #24]
 8003666:	6923      	ldr	r3, [r4, #16]
 8003668:	b943      	cbnz	r3, 800367c <__swsetup_r+0xa8>
 800366a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800366e:	d1c4      	bne.n	80035fa <__swsetup_r+0x26>
 8003670:	bd38      	pop	{r3, r4, r5, pc}
 8003672:	0781      	lsls	r1, r0, #30
 8003674:	bf58      	it	pl
 8003676:	6963      	ldrpl	r3, [r4, #20]
 8003678:	60a3      	str	r3, [r4, #8]
 800367a:	e7f4      	b.n	8003666 <__swsetup_r+0x92>
 800367c:	2000      	movs	r0, #0
 800367e:	e7f7      	b.n	8003670 <__swsetup_r+0x9c>
 8003680:	20000064 	.word	0x20000064

08003684 <memset>:
 8003684:	4603      	mov	r3, r0
 8003686:	4402      	add	r2, r0
 8003688:	4293      	cmp	r3, r2
 800368a:	d100      	bne.n	800368e <memset+0xa>
 800368c:	4770      	bx	lr
 800368e:	f803 1b01 	strb.w	r1, [r3], #1
 8003692:	e7f9      	b.n	8003688 <memset+0x4>

08003694 <_close_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	2300      	movs	r3, #0
 8003698:	4d05      	ldr	r5, [pc, #20]	; (80036b0 <_close_r+0x1c>)
 800369a:	4604      	mov	r4, r0
 800369c:	4608      	mov	r0, r1
 800369e:	602b      	str	r3, [r5, #0]
 80036a0:	f7fd f91b 	bl	80008da <_close>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_close_r+0x1a>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_close_r+0x1a>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	200002e8 	.word	0x200002e8

080036b4 <_lseek_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	2200      	movs	r2, #0
 80036be:	4d05      	ldr	r5, [pc, #20]	; (80036d4 <_lseek_r+0x20>)
 80036c0:	602a      	str	r2, [r5, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7fd f92d 	bl	8000922 <_lseek>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_lseek_r+0x1e>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_lseek_r+0x1e>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	200002e8 	.word	0x200002e8

080036d8 <_read_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	2200      	movs	r2, #0
 80036e2:	4d05      	ldr	r5, [pc, #20]	; (80036f8 <_read_r+0x20>)
 80036e4:	602a      	str	r2, [r5, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f7fd f8da 	bl	80008a0 <_read>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_read_r+0x1e>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_read_r+0x1e>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	200002e8 	.word	0x200002e8

080036fc <_write_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4604      	mov	r4, r0
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	2200      	movs	r2, #0
 8003706:	4d05      	ldr	r5, [pc, #20]	; (800371c <_write_r+0x20>)
 8003708:	602a      	str	r2, [r5, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f7fc fd1e 	bl	800014c <_write>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_write_r+0x1e>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_write_r+0x1e>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	200002e8 	.word	0x200002e8

08003720 <__errno>:
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <__errno+0x8>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000064 	.word	0x20000064

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	2600      	movs	r6, #0
 8003730:	4d0c      	ldr	r5, [pc, #48]	; (8003764 <__libc_init_array+0x38>)
 8003732:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	f000 fd34 	bl	80041a8 <_init>
 8003740:	2600      	movs	r6, #0
 8003742:	4d0a      	ldr	r5, [pc, #40]	; (800376c <__libc_init_array+0x40>)
 8003744:	4c0a      	ldr	r4, [pc, #40]	; (8003770 <__libc_init_array+0x44>)
 8003746:	1b64      	subs	r4, r4, r5
 8003748:	10a4      	asrs	r4, r4, #2
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	0800424c 	.word	0x0800424c
 8003768:	0800424c 	.word	0x0800424c
 800376c:	0800424c 	.word	0x0800424c
 8003770:	08004250 	.word	0x08004250

08003774 <__retarget_lock_init_recursive>:
 8003774:	4770      	bx	lr

08003776 <__retarget_lock_acquire_recursive>:
 8003776:	4770      	bx	lr

08003778 <__retarget_lock_release_recursive>:
 8003778:	4770      	bx	lr
	...

0800377c <_free_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4605      	mov	r5, r0
 8003780:	2900      	cmp	r1, #0
 8003782:	d040      	beq.n	8003806 <_free_r+0x8a>
 8003784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003788:	1f0c      	subs	r4, r1, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfb8      	it	lt
 800378e:	18e4      	addlt	r4, r4, r3
 8003790:	f000 f8dc 	bl	800394c <__malloc_lock>
 8003794:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <_free_r+0x8c>)
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	b933      	cbnz	r3, 80037a8 <_free_r+0x2c>
 800379a:	6063      	str	r3, [r4, #4]
 800379c:	6014      	str	r4, [r2, #0]
 800379e:	4628      	mov	r0, r5
 80037a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037a4:	f000 b8d8 	b.w	8003958 <__malloc_unlock>
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	d908      	bls.n	80037be <_free_r+0x42>
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	1821      	adds	r1, r4, r0
 80037b0:	428b      	cmp	r3, r1
 80037b2:	bf01      	itttt	eq
 80037b4:	6819      	ldreq	r1, [r3, #0]
 80037b6:	685b      	ldreq	r3, [r3, #4]
 80037b8:	1809      	addeq	r1, r1, r0
 80037ba:	6021      	streq	r1, [r4, #0]
 80037bc:	e7ed      	b.n	800379a <_free_r+0x1e>
 80037be:	461a      	mov	r2, r3
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	b10b      	cbz	r3, 80037c8 <_free_r+0x4c>
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	d9fa      	bls.n	80037be <_free_r+0x42>
 80037c8:	6811      	ldr	r1, [r2, #0]
 80037ca:	1850      	adds	r0, r2, r1
 80037cc:	42a0      	cmp	r0, r4
 80037ce:	d10b      	bne.n	80037e8 <_free_r+0x6c>
 80037d0:	6820      	ldr	r0, [r4, #0]
 80037d2:	4401      	add	r1, r0
 80037d4:	1850      	adds	r0, r2, r1
 80037d6:	4283      	cmp	r3, r0
 80037d8:	6011      	str	r1, [r2, #0]
 80037da:	d1e0      	bne.n	800379e <_free_r+0x22>
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4408      	add	r0, r1
 80037e2:	6010      	str	r0, [r2, #0]
 80037e4:	6053      	str	r3, [r2, #4]
 80037e6:	e7da      	b.n	800379e <_free_r+0x22>
 80037e8:	d902      	bls.n	80037f0 <_free_r+0x74>
 80037ea:	230c      	movs	r3, #12
 80037ec:	602b      	str	r3, [r5, #0]
 80037ee:	e7d6      	b.n	800379e <_free_r+0x22>
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	1821      	adds	r1, r4, r0
 80037f4:	428b      	cmp	r3, r1
 80037f6:	bf01      	itttt	eq
 80037f8:	6819      	ldreq	r1, [r3, #0]
 80037fa:	685b      	ldreq	r3, [r3, #4]
 80037fc:	1809      	addeq	r1, r1, r0
 80037fe:	6021      	streq	r1, [r4, #0]
 8003800:	6063      	str	r3, [r4, #4]
 8003802:	6054      	str	r4, [r2, #4]
 8003804:	e7cb      	b.n	800379e <_free_r+0x22>
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	200002f0 	.word	0x200002f0

0800380c <sbrk_aligned>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	4e0e      	ldr	r6, [pc, #56]	; (8003848 <sbrk_aligned+0x3c>)
 8003810:	460c      	mov	r4, r1
 8003812:	6831      	ldr	r1, [r6, #0]
 8003814:	4605      	mov	r5, r0
 8003816:	b911      	cbnz	r1, 800381e <sbrk_aligned+0x12>
 8003818:	f000 fca8 	bl	800416c <_sbrk_r>
 800381c:	6030      	str	r0, [r6, #0]
 800381e:	4621      	mov	r1, r4
 8003820:	4628      	mov	r0, r5
 8003822:	f000 fca3 	bl	800416c <_sbrk_r>
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	d00a      	beq.n	8003840 <sbrk_aligned+0x34>
 800382a:	1cc4      	adds	r4, r0, #3
 800382c:	f024 0403 	bic.w	r4, r4, #3
 8003830:	42a0      	cmp	r0, r4
 8003832:	d007      	beq.n	8003844 <sbrk_aligned+0x38>
 8003834:	1a21      	subs	r1, r4, r0
 8003836:	4628      	mov	r0, r5
 8003838:	f000 fc98 	bl	800416c <_sbrk_r>
 800383c:	3001      	adds	r0, #1
 800383e:	d101      	bne.n	8003844 <sbrk_aligned+0x38>
 8003840:	f04f 34ff 	mov.w	r4, #4294967295
 8003844:	4620      	mov	r0, r4
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	200002f4 	.word	0x200002f4

0800384c <_malloc_r>:
 800384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003850:	1ccd      	adds	r5, r1, #3
 8003852:	f025 0503 	bic.w	r5, r5, #3
 8003856:	3508      	adds	r5, #8
 8003858:	2d0c      	cmp	r5, #12
 800385a:	bf38      	it	cc
 800385c:	250c      	movcc	r5, #12
 800385e:	2d00      	cmp	r5, #0
 8003860:	4607      	mov	r7, r0
 8003862:	db01      	blt.n	8003868 <_malloc_r+0x1c>
 8003864:	42a9      	cmp	r1, r5
 8003866:	d905      	bls.n	8003874 <_malloc_r+0x28>
 8003868:	230c      	movs	r3, #12
 800386a:	2600      	movs	r6, #0
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4630      	mov	r0, r6
 8003870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003948 <_malloc_r+0xfc>
 8003878:	f000 f868 	bl	800394c <__malloc_lock>
 800387c:	f8d8 3000 	ldr.w	r3, [r8]
 8003880:	461c      	mov	r4, r3
 8003882:	bb5c      	cbnz	r4, 80038dc <_malloc_r+0x90>
 8003884:	4629      	mov	r1, r5
 8003886:	4638      	mov	r0, r7
 8003888:	f7ff ffc0 	bl	800380c <sbrk_aligned>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	4604      	mov	r4, r0
 8003890:	d155      	bne.n	800393e <_malloc_r+0xf2>
 8003892:	f8d8 4000 	ldr.w	r4, [r8]
 8003896:	4626      	mov	r6, r4
 8003898:	2e00      	cmp	r6, #0
 800389a:	d145      	bne.n	8003928 <_malloc_r+0xdc>
 800389c:	2c00      	cmp	r4, #0
 800389e:	d048      	beq.n	8003932 <_malloc_r+0xe6>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	4631      	mov	r1, r6
 80038a4:	4638      	mov	r0, r7
 80038a6:	eb04 0903 	add.w	r9, r4, r3
 80038aa:	f000 fc5f 	bl	800416c <_sbrk_r>
 80038ae:	4581      	cmp	r9, r0
 80038b0:	d13f      	bne.n	8003932 <_malloc_r+0xe6>
 80038b2:	6821      	ldr	r1, [r4, #0]
 80038b4:	4638      	mov	r0, r7
 80038b6:	1a6d      	subs	r5, r5, r1
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7ff ffa7 	bl	800380c <sbrk_aligned>
 80038be:	3001      	adds	r0, #1
 80038c0:	d037      	beq.n	8003932 <_malloc_r+0xe6>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	442b      	add	r3, r5
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	f8d8 3000 	ldr.w	r3, [r8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d038      	beq.n	8003942 <_malloc_r+0xf6>
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	42a2      	cmp	r2, r4
 80038d4:	d12b      	bne.n	800392e <_malloc_r+0xe2>
 80038d6:	2200      	movs	r2, #0
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	e00f      	b.n	80038fc <_malloc_r+0xb0>
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	1b52      	subs	r2, r2, r5
 80038e0:	d41f      	bmi.n	8003922 <_malloc_r+0xd6>
 80038e2:	2a0b      	cmp	r2, #11
 80038e4:	d917      	bls.n	8003916 <_malloc_r+0xca>
 80038e6:	1961      	adds	r1, r4, r5
 80038e8:	42a3      	cmp	r3, r4
 80038ea:	6025      	str	r5, [r4, #0]
 80038ec:	bf18      	it	ne
 80038ee:	6059      	strne	r1, [r3, #4]
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	bf08      	it	eq
 80038f4:	f8c8 1000 	streq.w	r1, [r8]
 80038f8:	5162      	str	r2, [r4, r5]
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	4638      	mov	r0, r7
 80038fe:	f104 060b 	add.w	r6, r4, #11
 8003902:	f000 f829 	bl	8003958 <__malloc_unlock>
 8003906:	f026 0607 	bic.w	r6, r6, #7
 800390a:	1d23      	adds	r3, r4, #4
 800390c:	1af2      	subs	r2, r6, r3
 800390e:	d0ae      	beq.n	800386e <_malloc_r+0x22>
 8003910:	1b9b      	subs	r3, r3, r6
 8003912:	50a3      	str	r3, [r4, r2]
 8003914:	e7ab      	b.n	800386e <_malloc_r+0x22>
 8003916:	42a3      	cmp	r3, r4
 8003918:	6862      	ldr	r2, [r4, #4]
 800391a:	d1dd      	bne.n	80038d8 <_malloc_r+0x8c>
 800391c:	f8c8 2000 	str.w	r2, [r8]
 8003920:	e7ec      	b.n	80038fc <_malloc_r+0xb0>
 8003922:	4623      	mov	r3, r4
 8003924:	6864      	ldr	r4, [r4, #4]
 8003926:	e7ac      	b.n	8003882 <_malloc_r+0x36>
 8003928:	4634      	mov	r4, r6
 800392a:	6876      	ldr	r6, [r6, #4]
 800392c:	e7b4      	b.n	8003898 <_malloc_r+0x4c>
 800392e:	4613      	mov	r3, r2
 8003930:	e7cc      	b.n	80038cc <_malloc_r+0x80>
 8003932:	230c      	movs	r3, #12
 8003934:	4638      	mov	r0, r7
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	f000 f80e 	bl	8003958 <__malloc_unlock>
 800393c:	e797      	b.n	800386e <_malloc_r+0x22>
 800393e:	6025      	str	r5, [r4, #0]
 8003940:	e7dc      	b.n	80038fc <_malloc_r+0xb0>
 8003942:	605b      	str	r3, [r3, #4]
 8003944:	deff      	udf	#255	; 0xff
 8003946:	bf00      	nop
 8003948:	200002f0 	.word	0x200002f0

0800394c <__malloc_lock>:
 800394c:	4801      	ldr	r0, [pc, #4]	; (8003954 <__malloc_lock+0x8>)
 800394e:	f7ff bf12 	b.w	8003776 <__retarget_lock_acquire_recursive>
 8003952:	bf00      	nop
 8003954:	200002ec 	.word	0x200002ec

08003958 <__malloc_unlock>:
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <__malloc_unlock+0x8>)
 800395a:	f7ff bf0d 	b.w	8003778 <__retarget_lock_release_recursive>
 800395e:	bf00      	nop
 8003960:	200002ec 	.word	0x200002ec

08003964 <__sfputc_r>:
 8003964:	6893      	ldr	r3, [r2, #8]
 8003966:	b410      	push	{r4}
 8003968:	3b01      	subs	r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	6093      	str	r3, [r2, #8]
 800396e:	da07      	bge.n	8003980 <__sfputc_r+0x1c>
 8003970:	6994      	ldr	r4, [r2, #24]
 8003972:	42a3      	cmp	r3, r4
 8003974:	db01      	blt.n	800397a <__sfputc_r+0x16>
 8003976:	290a      	cmp	r1, #10
 8003978:	d102      	bne.n	8003980 <__sfputc_r+0x1c>
 800397a:	bc10      	pop	{r4}
 800397c:	f7ff bded 	b.w	800355a <__swbuf_r>
 8003980:	6813      	ldr	r3, [r2, #0]
 8003982:	1c58      	adds	r0, r3, #1
 8003984:	6010      	str	r0, [r2, #0]
 8003986:	7019      	strb	r1, [r3, #0]
 8003988:	4608      	mov	r0, r1
 800398a:	bc10      	pop	{r4}
 800398c:	4770      	bx	lr

0800398e <__sfputs_r>:
 800398e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003990:	4606      	mov	r6, r0
 8003992:	460f      	mov	r7, r1
 8003994:	4614      	mov	r4, r2
 8003996:	18d5      	adds	r5, r2, r3
 8003998:	42ac      	cmp	r4, r5
 800399a:	d101      	bne.n	80039a0 <__sfputs_r+0x12>
 800399c:	2000      	movs	r0, #0
 800399e:	e007      	b.n	80039b0 <__sfputs_r+0x22>
 80039a0:	463a      	mov	r2, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a8:	f7ff ffdc 	bl	8003964 <__sfputc_r>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d1f3      	bne.n	8003998 <__sfputs_r+0xa>
 80039b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039b4 <_vfiprintf_r>:
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	460d      	mov	r5, r1
 80039ba:	4614      	mov	r4, r2
 80039bc:	4698      	mov	r8, r3
 80039be:	4606      	mov	r6, r0
 80039c0:	b09d      	sub	sp, #116	; 0x74
 80039c2:	b118      	cbz	r0, 80039cc <_vfiprintf_r+0x18>
 80039c4:	6a03      	ldr	r3, [r0, #32]
 80039c6:	b90b      	cbnz	r3, 80039cc <_vfiprintf_r+0x18>
 80039c8:	f7ff fce0 	bl	800338c <__sinit>
 80039cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039ce:	07d9      	lsls	r1, r3, #31
 80039d0:	d405      	bmi.n	80039de <_vfiprintf_r+0x2a>
 80039d2:	89ab      	ldrh	r3, [r5, #12]
 80039d4:	059a      	lsls	r2, r3, #22
 80039d6:	d402      	bmi.n	80039de <_vfiprintf_r+0x2a>
 80039d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039da:	f7ff fecc 	bl	8003776 <__retarget_lock_acquire_recursive>
 80039de:	89ab      	ldrh	r3, [r5, #12]
 80039e0:	071b      	lsls	r3, r3, #28
 80039e2:	d501      	bpl.n	80039e8 <_vfiprintf_r+0x34>
 80039e4:	692b      	ldr	r3, [r5, #16]
 80039e6:	b99b      	cbnz	r3, 8003a10 <_vfiprintf_r+0x5c>
 80039e8:	4629      	mov	r1, r5
 80039ea:	4630      	mov	r0, r6
 80039ec:	f7ff fdf2 	bl	80035d4 <__swsetup_r>
 80039f0:	b170      	cbz	r0, 8003a10 <_vfiprintf_r+0x5c>
 80039f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039f4:	07dc      	lsls	r4, r3, #31
 80039f6:	d504      	bpl.n	8003a02 <_vfiprintf_r+0x4e>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	b01d      	add	sp, #116	; 0x74
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	89ab      	ldrh	r3, [r5, #12]
 8003a04:	0598      	lsls	r0, r3, #22
 8003a06:	d4f7      	bmi.n	80039f8 <_vfiprintf_r+0x44>
 8003a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a0a:	f7ff feb5 	bl	8003778 <__retarget_lock_release_recursive>
 8003a0e:	e7f3      	b.n	80039f8 <_vfiprintf_r+0x44>
 8003a10:	2300      	movs	r3, #0
 8003a12:	9309      	str	r3, [sp, #36]	; 0x24
 8003a14:	2320      	movs	r3, #32
 8003a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a1a:	2330      	movs	r3, #48	; 0x30
 8003a1c:	f04f 0901 	mov.w	r9, #1
 8003a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a24:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003bd4 <_vfiprintf_r+0x220>
 8003a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	469a      	mov	sl, r3
 8003a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a34:	b10a      	cbz	r2, 8003a3a <_vfiprintf_r+0x86>
 8003a36:	2a25      	cmp	r2, #37	; 0x25
 8003a38:	d1f9      	bne.n	8003a2e <_vfiprintf_r+0x7a>
 8003a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003a3e:	d00b      	beq.n	8003a58 <_vfiprintf_r+0xa4>
 8003a40:	465b      	mov	r3, fp
 8003a42:	4622      	mov	r2, r4
 8003a44:	4629      	mov	r1, r5
 8003a46:	4630      	mov	r0, r6
 8003a48:	f7ff ffa1 	bl	800398e <__sfputs_r>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f000 80a9 	beq.w	8003ba4 <_vfiprintf_r+0x1f0>
 8003a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a54:	445a      	add	r2, fp
 8003a56:	9209      	str	r2, [sp, #36]	; 0x24
 8003a58:	f89a 3000 	ldrb.w	r3, [sl]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a1 	beq.w	8003ba4 <_vfiprintf_r+0x1f0>
 8003a62:	2300      	movs	r3, #0
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a6c:	f10a 0a01 	add.w	sl, sl, #1
 8003a70:	9304      	str	r3, [sp, #16]
 8003a72:	9307      	str	r3, [sp, #28]
 8003a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a78:	931a      	str	r3, [sp, #104]	; 0x68
 8003a7a:	4654      	mov	r4, sl
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a82:	4854      	ldr	r0, [pc, #336]	; (8003bd4 <_vfiprintf_r+0x220>)
 8003a84:	f000 fb82 	bl	800418c <memchr>
 8003a88:	9a04      	ldr	r2, [sp, #16]
 8003a8a:	b9d8      	cbnz	r0, 8003ac4 <_vfiprintf_r+0x110>
 8003a8c:	06d1      	lsls	r1, r2, #27
 8003a8e:	bf44      	itt	mi
 8003a90:	2320      	movmi	r3, #32
 8003a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a96:	0713      	lsls	r3, r2, #28
 8003a98:	bf44      	itt	mi
 8003a9a:	232b      	movmi	r3, #43	; 0x2b
 8003a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8003aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa6:	d015      	beq.n	8003ad4 <_vfiprintf_r+0x120>
 8003aa8:	4654      	mov	r4, sl
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f04f 0c0a 	mov.w	ip, #10
 8003ab0:	9a07      	ldr	r2, [sp, #28]
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ab8:	3b30      	subs	r3, #48	; 0x30
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d94d      	bls.n	8003b5a <_vfiprintf_r+0x1a6>
 8003abe:	b1b0      	cbz	r0, 8003aee <_vfiprintf_r+0x13a>
 8003ac0:	9207      	str	r2, [sp, #28]
 8003ac2:	e014      	b.n	8003aee <_vfiprintf_r+0x13a>
 8003ac4:	eba0 0308 	sub.w	r3, r0, r8
 8003ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8003acc:	4313      	orrs	r3, r2
 8003ace:	46a2      	mov	sl, r4
 8003ad0:	9304      	str	r3, [sp, #16]
 8003ad2:	e7d2      	b.n	8003a7a <_vfiprintf_r+0xc6>
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	1d19      	adds	r1, r3, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	9103      	str	r1, [sp, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bfbb      	ittet	lt
 8003ae0:	425b      	neglt	r3, r3
 8003ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ae6:	9307      	strge	r3, [sp, #28]
 8003ae8:	9307      	strlt	r3, [sp, #28]
 8003aea:	bfb8      	it	lt
 8003aec:	9204      	strlt	r2, [sp, #16]
 8003aee:	7823      	ldrb	r3, [r4, #0]
 8003af0:	2b2e      	cmp	r3, #46	; 0x2e
 8003af2:	d10c      	bne.n	8003b0e <_vfiprintf_r+0x15a>
 8003af4:	7863      	ldrb	r3, [r4, #1]
 8003af6:	2b2a      	cmp	r3, #42	; 0x2a
 8003af8:	d134      	bne.n	8003b64 <_vfiprintf_r+0x1b0>
 8003afa:	9b03      	ldr	r3, [sp, #12]
 8003afc:	3402      	adds	r4, #2
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	9203      	str	r2, [sp, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bfb8      	it	lt
 8003b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b0c:	9305      	str	r3, [sp, #20]
 8003b0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bd8 <_vfiprintf_r+0x224>
 8003b12:	2203      	movs	r2, #3
 8003b14:	4650      	mov	r0, sl
 8003b16:	7821      	ldrb	r1, [r4, #0]
 8003b18:	f000 fb38 	bl	800418c <memchr>
 8003b1c:	b138      	cbz	r0, 8003b2e <_vfiprintf_r+0x17a>
 8003b1e:	2240      	movs	r2, #64	; 0x40
 8003b20:	9b04      	ldr	r3, [sp, #16]
 8003b22:	eba0 000a 	sub.w	r0, r0, sl
 8003b26:	4082      	lsls	r2, r0
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	3401      	adds	r4, #1
 8003b2c:	9304      	str	r3, [sp, #16]
 8003b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b32:	2206      	movs	r2, #6
 8003b34:	4829      	ldr	r0, [pc, #164]	; (8003bdc <_vfiprintf_r+0x228>)
 8003b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b3a:	f000 fb27 	bl	800418c <memchr>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d03f      	beq.n	8003bc2 <_vfiprintf_r+0x20e>
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <_vfiprintf_r+0x22c>)
 8003b44:	bb1b      	cbnz	r3, 8003b8e <_vfiprintf_r+0x1da>
 8003b46:	9b03      	ldr	r3, [sp, #12]
 8003b48:	3307      	adds	r3, #7
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	3308      	adds	r3, #8
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b54:	443b      	add	r3, r7
 8003b56:	9309      	str	r3, [sp, #36]	; 0x24
 8003b58:	e768      	b.n	8003a2c <_vfiprintf_r+0x78>
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b62:	e7a6      	b.n	8003ab2 <_vfiprintf_r+0xfe>
 8003b64:	2300      	movs	r3, #0
 8003b66:	f04f 0c0a 	mov.w	ip, #10
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	3401      	adds	r4, #1
 8003b6e:	9305      	str	r3, [sp, #20]
 8003b70:	4620      	mov	r0, r4
 8003b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b76:	3a30      	subs	r2, #48	; 0x30
 8003b78:	2a09      	cmp	r2, #9
 8003b7a:	d903      	bls.n	8003b84 <_vfiprintf_r+0x1d0>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0c6      	beq.n	8003b0e <_vfiprintf_r+0x15a>
 8003b80:	9105      	str	r1, [sp, #20]
 8003b82:	e7c4      	b.n	8003b0e <_vfiprintf_r+0x15a>
 8003b84:	4604      	mov	r4, r0
 8003b86:	2301      	movs	r3, #1
 8003b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b8c:	e7f0      	b.n	8003b70 <_vfiprintf_r+0x1bc>
 8003b8e:	ab03      	add	r3, sp, #12
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	462a      	mov	r2, r5
 8003b94:	4630      	mov	r0, r6
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <_vfiprintf_r+0x230>)
 8003b98:	a904      	add	r1, sp, #16
 8003b9a:	f3af 8000 	nop.w
 8003b9e:	4607      	mov	r7, r0
 8003ba0:	1c78      	adds	r0, r7, #1
 8003ba2:	d1d6      	bne.n	8003b52 <_vfiprintf_r+0x19e>
 8003ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ba6:	07d9      	lsls	r1, r3, #31
 8003ba8:	d405      	bmi.n	8003bb6 <_vfiprintf_r+0x202>
 8003baa:	89ab      	ldrh	r3, [r5, #12]
 8003bac:	059a      	lsls	r2, r3, #22
 8003bae:	d402      	bmi.n	8003bb6 <_vfiprintf_r+0x202>
 8003bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bb2:	f7ff fde1 	bl	8003778 <__retarget_lock_release_recursive>
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	065b      	lsls	r3, r3, #25
 8003bba:	f53f af1d 	bmi.w	80039f8 <_vfiprintf_r+0x44>
 8003bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bc0:	e71c      	b.n	80039fc <_vfiprintf_r+0x48>
 8003bc2:	ab03      	add	r3, sp, #12
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	4630      	mov	r0, r6
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <_vfiprintf_r+0x230>)
 8003bcc:	a904      	add	r1, sp, #16
 8003bce:	f000 f87d 	bl	8003ccc <_printf_i>
 8003bd2:	e7e4      	b.n	8003b9e <_vfiprintf_r+0x1ea>
 8003bd4:	08004216 	.word	0x08004216
 8003bd8:	0800421c 	.word	0x0800421c
 8003bdc:	08004220 	.word	0x08004220
 8003be0:	00000000 	.word	0x00000000
 8003be4:	0800398f 	.word	0x0800398f

08003be8 <_printf_common>:
 8003be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	4616      	mov	r6, r2
 8003bee:	4699      	mov	r9, r3
 8003bf0:	688a      	ldr	r2, [r1, #8]
 8003bf2:	690b      	ldr	r3, [r1, #16]
 8003bf4:	4607      	mov	r7, r0
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	bfb8      	it	lt
 8003bfa:	4613      	movlt	r3, r2
 8003bfc:	6033      	str	r3, [r6, #0]
 8003bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c02:	460c      	mov	r4, r1
 8003c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c08:	b10a      	cbz	r2, 8003c0e <_printf_common+0x26>
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	0699      	lsls	r1, r3, #26
 8003c12:	bf42      	ittt	mi
 8003c14:	6833      	ldrmi	r3, [r6, #0]
 8003c16:	3302      	addmi	r3, #2
 8003c18:	6033      	strmi	r3, [r6, #0]
 8003c1a:	6825      	ldr	r5, [r4, #0]
 8003c1c:	f015 0506 	ands.w	r5, r5, #6
 8003c20:	d106      	bne.n	8003c30 <_printf_common+0x48>
 8003c22:	f104 0a19 	add.w	sl, r4, #25
 8003c26:	68e3      	ldr	r3, [r4, #12]
 8003c28:	6832      	ldr	r2, [r6, #0]
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	42ab      	cmp	r3, r5
 8003c2e:	dc2b      	bgt.n	8003c88 <_printf_common+0xa0>
 8003c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c34:	1e13      	subs	r3, r2, #0
 8003c36:	6822      	ldr	r2, [r4, #0]
 8003c38:	bf18      	it	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	0692      	lsls	r2, r2, #26
 8003c3e:	d430      	bmi.n	8003ca2 <_printf_common+0xba>
 8003c40:	4649      	mov	r1, r9
 8003c42:	4638      	mov	r0, r7
 8003c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c48:	47c0      	blx	r8
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d023      	beq.n	8003c96 <_printf_common+0xae>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	6922      	ldr	r2, [r4, #16]
 8003c52:	f003 0306 	and.w	r3, r3, #6
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf14      	ite	ne
 8003c5a:	2500      	movne	r5, #0
 8003c5c:	6833      	ldreq	r3, [r6, #0]
 8003c5e:	f04f 0600 	mov.w	r6, #0
 8003c62:	bf08      	it	eq
 8003c64:	68e5      	ldreq	r5, [r4, #12]
 8003c66:	f104 041a 	add.w	r4, r4, #26
 8003c6a:	bf08      	it	eq
 8003c6c:	1aed      	subeq	r5, r5, r3
 8003c6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c72:	bf08      	it	eq
 8003c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bfc4      	itt	gt
 8003c7c:	1a9b      	subgt	r3, r3, r2
 8003c7e:	18ed      	addgt	r5, r5, r3
 8003c80:	42b5      	cmp	r5, r6
 8003c82:	d11a      	bne.n	8003cba <_printf_common+0xd2>
 8003c84:	2000      	movs	r0, #0
 8003c86:	e008      	b.n	8003c9a <_printf_common+0xb2>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4652      	mov	r2, sl
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	4638      	mov	r0, r7
 8003c90:	47c0      	blx	r8
 8003c92:	3001      	adds	r0, #1
 8003c94:	d103      	bne.n	8003c9e <_printf_common+0xb6>
 8003c96:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	e7c1      	b.n	8003c26 <_printf_common+0x3e>
 8003ca2:	2030      	movs	r0, #48	; 0x30
 8003ca4:	18e1      	adds	r1, r4, r3
 8003ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cb0:	4422      	add	r2, r4
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cb8:	e7c2      	b.n	8003c40 <_printf_common+0x58>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	47c0      	blx	r8
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d0e6      	beq.n	8003c96 <_printf_common+0xae>
 8003cc8:	3601      	adds	r6, #1
 8003cca:	e7d9      	b.n	8003c80 <_printf_common+0x98>

08003ccc <_printf_i>:
 8003ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd0:	7e0f      	ldrb	r7, [r1, #24]
 8003cd2:	4691      	mov	r9, r2
 8003cd4:	2f78      	cmp	r7, #120	; 0x78
 8003cd6:	4680      	mov	r8, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	469a      	mov	sl, r3
 8003cdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ce2:	d807      	bhi.n	8003cf4 <_printf_i+0x28>
 8003ce4:	2f62      	cmp	r7, #98	; 0x62
 8003ce6:	d80a      	bhi.n	8003cfe <_printf_i+0x32>
 8003ce8:	2f00      	cmp	r7, #0
 8003cea:	f000 80d5 	beq.w	8003e98 <_printf_i+0x1cc>
 8003cee:	2f58      	cmp	r7, #88	; 0x58
 8003cf0:	f000 80c1 	beq.w	8003e76 <_printf_i+0x1aa>
 8003cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cfc:	e03a      	b.n	8003d74 <_printf_i+0xa8>
 8003cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d02:	2b15      	cmp	r3, #21
 8003d04:	d8f6      	bhi.n	8003cf4 <_printf_i+0x28>
 8003d06:	a101      	add	r1, pc, #4	; (adr r1, 8003d0c <_printf_i+0x40>)
 8003d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d0c:	08003d65 	.word	0x08003d65
 8003d10:	08003d79 	.word	0x08003d79
 8003d14:	08003cf5 	.word	0x08003cf5
 8003d18:	08003cf5 	.word	0x08003cf5
 8003d1c:	08003cf5 	.word	0x08003cf5
 8003d20:	08003cf5 	.word	0x08003cf5
 8003d24:	08003d79 	.word	0x08003d79
 8003d28:	08003cf5 	.word	0x08003cf5
 8003d2c:	08003cf5 	.word	0x08003cf5
 8003d30:	08003cf5 	.word	0x08003cf5
 8003d34:	08003cf5 	.word	0x08003cf5
 8003d38:	08003e7f 	.word	0x08003e7f
 8003d3c:	08003da5 	.word	0x08003da5
 8003d40:	08003e39 	.word	0x08003e39
 8003d44:	08003cf5 	.word	0x08003cf5
 8003d48:	08003cf5 	.word	0x08003cf5
 8003d4c:	08003ea1 	.word	0x08003ea1
 8003d50:	08003cf5 	.word	0x08003cf5
 8003d54:	08003da5 	.word	0x08003da5
 8003d58:	08003cf5 	.word	0x08003cf5
 8003d5c:	08003cf5 	.word	0x08003cf5
 8003d60:	08003e41 	.word	0x08003e41
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	602a      	str	r2, [r5, #0]
 8003d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0a0      	b.n	8003eba <_printf_i+0x1ee>
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	682b      	ldr	r3, [r5, #0]
 8003d7c:	0607      	lsls	r7, r0, #24
 8003d7e:	f103 0104 	add.w	r1, r3, #4
 8003d82:	6029      	str	r1, [r5, #0]
 8003d84:	d501      	bpl.n	8003d8a <_printf_i+0xbe>
 8003d86:	681e      	ldr	r6, [r3, #0]
 8003d88:	e003      	b.n	8003d92 <_printf_i+0xc6>
 8003d8a:	0646      	lsls	r6, r0, #25
 8003d8c:	d5fb      	bpl.n	8003d86 <_printf_i+0xba>
 8003d8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	da03      	bge.n	8003d9e <_printf_i+0xd2>
 8003d96:	232d      	movs	r3, #45	; 0x2d
 8003d98:	4276      	negs	r6, r6
 8003d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d9e:	230a      	movs	r3, #10
 8003da0:	4859      	ldr	r0, [pc, #356]	; (8003f08 <_printf_i+0x23c>)
 8003da2:	e012      	b.n	8003dca <_printf_i+0xfe>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	1d19      	adds	r1, r3, #4
 8003daa:	6029      	str	r1, [r5, #0]
 8003dac:	0605      	lsls	r5, r0, #24
 8003dae:	d501      	bpl.n	8003db4 <_printf_i+0xe8>
 8003db0:	681e      	ldr	r6, [r3, #0]
 8003db2:	e002      	b.n	8003dba <_printf_i+0xee>
 8003db4:	0641      	lsls	r1, r0, #25
 8003db6:	d5fb      	bpl.n	8003db0 <_printf_i+0xe4>
 8003db8:	881e      	ldrh	r6, [r3, #0]
 8003dba:	2f6f      	cmp	r7, #111	; 0x6f
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2308      	moveq	r3, #8
 8003dc0:	230a      	movne	r3, #10
 8003dc2:	4851      	ldr	r0, [pc, #324]	; (8003f08 <_printf_i+0x23c>)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dca:	6865      	ldr	r5, [r4, #4]
 8003dcc:	2d00      	cmp	r5, #0
 8003dce:	bfa8      	it	ge
 8003dd0:	6821      	ldrge	r1, [r4, #0]
 8003dd2:	60a5      	str	r5, [r4, #8]
 8003dd4:	bfa4      	itt	ge
 8003dd6:	f021 0104 	bicge.w	r1, r1, #4
 8003dda:	6021      	strge	r1, [r4, #0]
 8003ddc:	b90e      	cbnz	r6, 8003de2 <_printf_i+0x116>
 8003dde:	2d00      	cmp	r5, #0
 8003de0:	d04b      	beq.n	8003e7a <_printf_i+0x1ae>
 8003de2:	4615      	mov	r5, r2
 8003de4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003de8:	fb03 6711 	mls	r7, r3, r1, r6
 8003dec:	5dc7      	ldrb	r7, [r0, r7]
 8003dee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003df2:	4637      	mov	r7, r6
 8003df4:	42bb      	cmp	r3, r7
 8003df6:	460e      	mov	r6, r1
 8003df8:	d9f4      	bls.n	8003de4 <_printf_i+0x118>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d10b      	bne.n	8003e16 <_printf_i+0x14a>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	07de      	lsls	r6, r3, #31
 8003e02:	d508      	bpl.n	8003e16 <_printf_i+0x14a>
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	6861      	ldr	r1, [r4, #4]
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	bfde      	ittt	le
 8003e0c:	2330      	movle	r3, #48	; 0x30
 8003e0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e16:	1b52      	subs	r2, r2, r5
 8003e18:	6122      	str	r2, [r4, #16]
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f8cd a000 	str.w	sl, [sp]
 8003e24:	aa03      	add	r2, sp, #12
 8003e26:	f7ff fedf 	bl	8003be8 <_printf_common>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d14a      	bne.n	8003ec4 <_printf_i+0x1f8>
 8003e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e32:	b004      	add	sp, #16
 8003e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	f043 0320 	orr.w	r3, r3, #32
 8003e3e:	6023      	str	r3, [r4, #0]
 8003e40:	2778      	movs	r7, #120	; 0x78
 8003e42:	4832      	ldr	r0, [pc, #200]	; (8003f0c <_printf_i+0x240>)
 8003e44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	6829      	ldr	r1, [r5, #0]
 8003e4c:	061f      	lsls	r7, r3, #24
 8003e4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e52:	d402      	bmi.n	8003e5a <_printf_i+0x18e>
 8003e54:	065f      	lsls	r7, r3, #25
 8003e56:	bf48      	it	mi
 8003e58:	b2b6      	uxthmi	r6, r6
 8003e5a:	07df      	lsls	r7, r3, #31
 8003e5c:	bf48      	it	mi
 8003e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e62:	6029      	str	r1, [r5, #0]
 8003e64:	bf48      	it	mi
 8003e66:	6023      	strmi	r3, [r4, #0]
 8003e68:	b91e      	cbnz	r6, 8003e72 <_printf_i+0x1a6>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	f023 0320 	bic.w	r3, r3, #32
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	2310      	movs	r3, #16
 8003e74:	e7a6      	b.n	8003dc4 <_printf_i+0xf8>
 8003e76:	4824      	ldr	r0, [pc, #144]	; (8003f08 <_printf_i+0x23c>)
 8003e78:	e7e4      	b.n	8003e44 <_printf_i+0x178>
 8003e7a:	4615      	mov	r5, r2
 8003e7c:	e7bd      	b.n	8003dfa <_printf_i+0x12e>
 8003e7e:	682b      	ldr	r3, [r5, #0]
 8003e80:	6826      	ldr	r6, [r4, #0]
 8003e82:	1d18      	adds	r0, r3, #4
 8003e84:	6961      	ldr	r1, [r4, #20]
 8003e86:	6028      	str	r0, [r5, #0]
 8003e88:	0635      	lsls	r5, r6, #24
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	d501      	bpl.n	8003e92 <_printf_i+0x1c6>
 8003e8e:	6019      	str	r1, [r3, #0]
 8003e90:	e002      	b.n	8003e98 <_printf_i+0x1cc>
 8003e92:	0670      	lsls	r0, r6, #25
 8003e94:	d5fb      	bpl.n	8003e8e <_printf_i+0x1c2>
 8003e96:	8019      	strh	r1, [r3, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4615      	mov	r5, r2
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	e7bc      	b.n	8003e1a <_printf_i+0x14e>
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	602a      	str	r2, [r5, #0]
 8003ea8:	681d      	ldr	r5, [r3, #0]
 8003eaa:	6862      	ldr	r2, [r4, #4]
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f96d 	bl	800418c <memchr>
 8003eb2:	b108      	cbz	r0, 8003eb8 <_printf_i+0x1ec>
 8003eb4:	1b40      	subs	r0, r0, r5
 8003eb6:	6060      	str	r0, [r4, #4]
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec2:	e7aa      	b.n	8003e1a <_printf_i+0x14e>
 8003ec4:	462a      	mov	r2, r5
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	4640      	mov	r0, r8
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	47d0      	blx	sl
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d0ad      	beq.n	8003e2e <_printf_i+0x162>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	079b      	lsls	r3, r3, #30
 8003ed6:	d413      	bmi.n	8003f00 <_printf_i+0x234>
 8003ed8:	68e0      	ldr	r0, [r4, #12]
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	4298      	cmp	r0, r3
 8003ede:	bfb8      	it	lt
 8003ee0:	4618      	movlt	r0, r3
 8003ee2:	e7a6      	b.n	8003e32 <_printf_i+0x166>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	4649      	mov	r1, r9
 8003eea:	4640      	mov	r0, r8
 8003eec:	47d0      	blx	sl
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d09d      	beq.n	8003e2e <_printf_i+0x162>
 8003ef2:	3501      	adds	r5, #1
 8003ef4:	68e3      	ldr	r3, [r4, #12]
 8003ef6:	9903      	ldr	r1, [sp, #12]
 8003ef8:	1a5b      	subs	r3, r3, r1
 8003efa:	42ab      	cmp	r3, r5
 8003efc:	dcf2      	bgt.n	8003ee4 <_printf_i+0x218>
 8003efe:	e7eb      	b.n	8003ed8 <_printf_i+0x20c>
 8003f00:	2500      	movs	r5, #0
 8003f02:	f104 0619 	add.w	r6, r4, #25
 8003f06:	e7f5      	b.n	8003ef4 <_printf_i+0x228>
 8003f08:	08004227 	.word	0x08004227
 8003f0c:	08004238 	.word	0x08004238

08003f10 <__sflush_r>:
 8003f10:	898a      	ldrh	r2, [r1, #12]
 8003f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f14:	4605      	mov	r5, r0
 8003f16:	0710      	lsls	r0, r2, #28
 8003f18:	460c      	mov	r4, r1
 8003f1a:	d457      	bmi.n	8003fcc <__sflush_r+0xbc>
 8003f1c:	684b      	ldr	r3, [r1, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	dc04      	bgt.n	8003f2c <__sflush_r+0x1c>
 8003f22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dc01      	bgt.n	8003f2c <__sflush_r+0x1c>
 8003f28:	2000      	movs	r0, #0
 8003f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f2e:	2e00      	cmp	r6, #0
 8003f30:	d0fa      	beq.n	8003f28 <__sflush_r+0x18>
 8003f32:	2300      	movs	r3, #0
 8003f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f38:	682f      	ldr	r7, [r5, #0]
 8003f3a:	6a21      	ldr	r1, [r4, #32]
 8003f3c:	602b      	str	r3, [r5, #0]
 8003f3e:	d032      	beq.n	8003fa6 <__sflush_r+0x96>
 8003f40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	075a      	lsls	r2, r3, #29
 8003f46:	d505      	bpl.n	8003f54 <__sflush_r+0x44>
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	1ac0      	subs	r0, r0, r3
 8003f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f4e:	b10b      	cbz	r3, 8003f54 <__sflush_r+0x44>
 8003f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f52:	1ac0      	subs	r0, r0, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	4602      	mov	r2, r0
 8003f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	6a21      	ldr	r1, [r4, #32]
 8003f5e:	47b0      	blx	r6
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	d106      	bne.n	8003f74 <__sflush_r+0x64>
 8003f66:	6829      	ldr	r1, [r5, #0]
 8003f68:	291d      	cmp	r1, #29
 8003f6a:	d82b      	bhi.n	8003fc4 <__sflush_r+0xb4>
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <__sflush_r+0x100>)
 8003f6e:	410a      	asrs	r2, r1
 8003f70:	07d6      	lsls	r6, r2, #31
 8003f72:	d427      	bmi.n	8003fc4 <__sflush_r+0xb4>
 8003f74:	2200      	movs	r2, #0
 8003f76:	6062      	str	r2, [r4, #4]
 8003f78:	6922      	ldr	r2, [r4, #16]
 8003f7a:	04d9      	lsls	r1, r3, #19
 8003f7c:	6022      	str	r2, [r4, #0]
 8003f7e:	d504      	bpl.n	8003f8a <__sflush_r+0x7a>
 8003f80:	1c42      	adds	r2, r0, #1
 8003f82:	d101      	bne.n	8003f88 <__sflush_r+0x78>
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	b903      	cbnz	r3, 8003f8a <__sflush_r+0x7a>
 8003f88:	6560      	str	r0, [r4, #84]	; 0x54
 8003f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f8c:	602f      	str	r7, [r5, #0]
 8003f8e:	2900      	cmp	r1, #0
 8003f90:	d0ca      	beq.n	8003f28 <__sflush_r+0x18>
 8003f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f96:	4299      	cmp	r1, r3
 8003f98:	d002      	beq.n	8003fa0 <__sflush_r+0x90>
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f7ff fbee 	bl	800377c <_free_r>
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	6360      	str	r0, [r4, #52]	; 0x34
 8003fa4:	e7c1      	b.n	8003f2a <__sflush_r+0x1a>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4628      	mov	r0, r5
 8003faa:	47b0      	blx	r6
 8003fac:	1c41      	adds	r1, r0, #1
 8003fae:	d1c8      	bne.n	8003f42 <__sflush_r+0x32>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0c5      	beq.n	8003f42 <__sflush_r+0x32>
 8003fb6:	2b1d      	cmp	r3, #29
 8003fb8:	d001      	beq.n	8003fbe <__sflush_r+0xae>
 8003fba:	2b16      	cmp	r3, #22
 8003fbc:	d101      	bne.n	8003fc2 <__sflush_r+0xb2>
 8003fbe:	602f      	str	r7, [r5, #0]
 8003fc0:	e7b2      	b.n	8003f28 <__sflush_r+0x18>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	e7ae      	b.n	8003f2a <__sflush_r+0x1a>
 8003fcc:	690f      	ldr	r7, [r1, #16]
 8003fce:	2f00      	cmp	r7, #0
 8003fd0:	d0aa      	beq.n	8003f28 <__sflush_r+0x18>
 8003fd2:	0793      	lsls	r3, r2, #30
 8003fd4:	bf18      	it	ne
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	680e      	ldr	r6, [r1, #0]
 8003fda:	bf08      	it	eq
 8003fdc:	694b      	ldreq	r3, [r1, #20]
 8003fde:	1bf6      	subs	r6, r6, r7
 8003fe0:	600f      	str	r7, [r1, #0]
 8003fe2:	608b      	str	r3, [r1, #8]
 8003fe4:	2e00      	cmp	r6, #0
 8003fe6:	dd9f      	ble.n	8003f28 <__sflush_r+0x18>
 8003fe8:	4633      	mov	r3, r6
 8003fea:	463a      	mov	r2, r7
 8003fec:	4628      	mov	r0, r5
 8003fee:	6a21      	ldr	r1, [r4, #32]
 8003ff0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003ff4:	47e0      	blx	ip
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	dc06      	bgt.n	8004008 <__sflush_r+0xf8>
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	e790      	b.n	8003f2a <__sflush_r+0x1a>
 8004008:	4407      	add	r7, r0
 800400a:	1a36      	subs	r6, r6, r0
 800400c:	e7ea      	b.n	8003fe4 <__sflush_r+0xd4>
 800400e:	bf00      	nop
 8004010:	dfbffffe 	.word	0xdfbffffe

08004014 <_fflush_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	4605      	mov	r5, r0
 800401a:	460c      	mov	r4, r1
 800401c:	b913      	cbnz	r3, 8004024 <_fflush_r+0x10>
 800401e:	2500      	movs	r5, #0
 8004020:	4628      	mov	r0, r5
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	b118      	cbz	r0, 800402e <_fflush_r+0x1a>
 8004026:	6a03      	ldr	r3, [r0, #32]
 8004028:	b90b      	cbnz	r3, 800402e <_fflush_r+0x1a>
 800402a:	f7ff f9af 	bl	800338c <__sinit>
 800402e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f3      	beq.n	800401e <_fflush_r+0xa>
 8004036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004038:	07d0      	lsls	r0, r2, #31
 800403a:	d404      	bmi.n	8004046 <_fflush_r+0x32>
 800403c:	0599      	lsls	r1, r3, #22
 800403e:	d402      	bmi.n	8004046 <_fflush_r+0x32>
 8004040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004042:	f7ff fb98 	bl	8003776 <__retarget_lock_acquire_recursive>
 8004046:	4628      	mov	r0, r5
 8004048:	4621      	mov	r1, r4
 800404a:	f7ff ff61 	bl	8003f10 <__sflush_r>
 800404e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004050:	4605      	mov	r5, r0
 8004052:	07da      	lsls	r2, r3, #31
 8004054:	d4e4      	bmi.n	8004020 <_fflush_r+0xc>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	059b      	lsls	r3, r3, #22
 800405a:	d4e1      	bmi.n	8004020 <_fflush_r+0xc>
 800405c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405e:	f7ff fb8b 	bl	8003778 <__retarget_lock_release_recursive>
 8004062:	e7dd      	b.n	8004020 <_fflush_r+0xc>

08004064 <__swhatbuf_r>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	460c      	mov	r4, r1
 8004068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406c:	4615      	mov	r5, r2
 800406e:	2900      	cmp	r1, #0
 8004070:	461e      	mov	r6, r3
 8004072:	b096      	sub	sp, #88	; 0x58
 8004074:	da0c      	bge.n	8004090 <__swhatbuf_r+0x2c>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	2100      	movs	r1, #0
 800407a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800407e:	bf0c      	ite	eq
 8004080:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004084:	2340      	movne	r3, #64	; 0x40
 8004086:	2000      	movs	r0, #0
 8004088:	6031      	str	r1, [r6, #0]
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	b016      	add	sp, #88	; 0x58
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	466a      	mov	r2, sp
 8004092:	f000 f849 	bl	8004128 <_fstat_r>
 8004096:	2800      	cmp	r0, #0
 8004098:	dbed      	blt.n	8004076 <__swhatbuf_r+0x12>
 800409a:	9901      	ldr	r1, [sp, #4]
 800409c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80040a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80040a4:	4259      	negs	r1, r3
 80040a6:	4159      	adcs	r1, r3
 80040a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ac:	e7eb      	b.n	8004086 <__swhatbuf_r+0x22>

080040ae <__smakebuf_r>:
 80040ae:	898b      	ldrh	r3, [r1, #12]
 80040b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040b2:	079d      	lsls	r5, r3, #30
 80040b4:	4606      	mov	r6, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	d507      	bpl.n	80040ca <__smakebuf_r+0x1c>
 80040ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	6123      	str	r3, [r4, #16]
 80040c2:	2301      	movs	r3, #1
 80040c4:	6163      	str	r3, [r4, #20]
 80040c6:	b002      	add	sp, #8
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	466a      	mov	r2, sp
 80040cc:	ab01      	add	r3, sp, #4
 80040ce:	f7ff ffc9 	bl	8004064 <__swhatbuf_r>
 80040d2:	9900      	ldr	r1, [sp, #0]
 80040d4:	4605      	mov	r5, r0
 80040d6:	4630      	mov	r0, r6
 80040d8:	f7ff fbb8 	bl	800384c <_malloc_r>
 80040dc:	b948      	cbnz	r0, 80040f2 <__smakebuf_r+0x44>
 80040de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e2:	059a      	lsls	r2, r3, #22
 80040e4:	d4ef      	bmi.n	80040c6 <__smakebuf_r+0x18>
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	f043 0302 	orr.w	r3, r3, #2
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	e7e3      	b.n	80040ba <__smakebuf_r+0xc>
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	6020      	str	r0, [r4, #0]
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	9b00      	ldr	r3, [sp, #0]
 80040fe:	6120      	str	r0, [r4, #16]
 8004100:	6163      	str	r3, [r4, #20]
 8004102:	9b01      	ldr	r3, [sp, #4]
 8004104:	b15b      	cbz	r3, 800411e <__smakebuf_r+0x70>
 8004106:	4630      	mov	r0, r6
 8004108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800410c:	f000 f81e 	bl	800414c <_isatty_r>
 8004110:	b128      	cbz	r0, 800411e <__smakebuf_r+0x70>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f023 0303 	bic.w	r3, r3, #3
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	431d      	orrs	r5, r3
 8004122:	81a5      	strh	r5, [r4, #12]
 8004124:	e7cf      	b.n	80040c6 <__smakebuf_r+0x18>
	...

08004128 <_fstat_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	2300      	movs	r3, #0
 800412c:	4d06      	ldr	r5, [pc, #24]	; (8004148 <_fstat_r+0x20>)
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	f7fc fbdb 	bl	80008f0 <_fstat>
 800413a:	1c43      	adds	r3, r0, #1
 800413c:	d102      	bne.n	8004144 <_fstat_r+0x1c>
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	b103      	cbz	r3, 8004144 <_fstat_r+0x1c>
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	bd38      	pop	{r3, r4, r5, pc}
 8004146:	bf00      	nop
 8004148:	200002e8 	.word	0x200002e8

0800414c <_isatty_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	2300      	movs	r3, #0
 8004150:	4d05      	ldr	r5, [pc, #20]	; (8004168 <_isatty_r+0x1c>)
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fc fbd9 	bl	800090e <_isatty>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_isatty_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_isatty_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	200002e8 	.word	0x200002e8

0800416c <_sbrk_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	2300      	movs	r3, #0
 8004170:	4d05      	ldr	r5, [pc, #20]	; (8004188 <_sbrk_r+0x1c>)
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	f7fc fbe0 	bl	800093c <_sbrk>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_sbrk_r+0x1a>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	b103      	cbz	r3, 8004186 <_sbrk_r+0x1a>
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	200002e8 	.word	0x200002e8

0800418c <memchr>:
 800418c:	4603      	mov	r3, r0
 800418e:	b510      	push	{r4, lr}
 8004190:	b2c9      	uxtb	r1, r1
 8004192:	4402      	add	r2, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	4618      	mov	r0, r3
 8004198:	d101      	bne.n	800419e <memchr+0x12>
 800419a:	2000      	movs	r0, #0
 800419c:	e003      	b.n	80041a6 <memchr+0x1a>
 800419e:	7804      	ldrb	r4, [r0, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	428c      	cmp	r4, r1
 80041a4:	d1f6      	bne.n	8004194 <memchr+0x8>
 80041a6:	bd10      	pop	{r4, pc}

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
