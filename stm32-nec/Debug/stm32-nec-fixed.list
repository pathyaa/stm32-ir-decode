
stm32-nec-fixed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800342c  0800342c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800342c  0800342c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800342c  0800342c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  08003440  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003440  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c771  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ded  00000000  00000000  0002c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099c  00000000  00000000  0002f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173b6  00000000  00000000  0002fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de35  00000000  00000000  00046f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000876ba  00000000  00000000  00054d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032ec  00000000  00000000  000dc45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000df748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033e8 	.word	0x080033e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080033e8 	.word	0x080033e8

0800014c <irInit>:
	.data = {0,},
	.state = NEC_INIT
};

void irInit()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000150:	2100      	movs	r1, #0
 8000152:	4804      	ldr	r0, [pc, #16]	; (8000164 <irInit+0x18>)
 8000154:	f001 feb6 	bl	8001ec4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000158:	2104      	movs	r1, #4
 800015a:	4802      	ldr	r0, [pc, #8]	; (8000164 <irInit+0x18>)
 800015c:	f001 feb2 	bl	8001ec4 <HAL_TIM_IC_Start_IT>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	2000011c 	.word	0x2000011c

08000168 <irStart>:

void irStart(IR_Format check_format)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
	if (check_format == NEC_FORMAT)
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	2b01      	cmp	r3, #1
 8000176:	d11d      	bne.n	80001b4 <irStart+0x4c>
	{
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000178:	2100      	movs	r1, #0
 800017a:	4810      	ldr	r0, [pc, #64]	; (80001bc <irStart+0x54>)
 800017c:	f001 ffa8 	bl	80020d0 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000180:	2104      	movs	r1, #4
 8000182:	480e      	ldr	r0, [pc, #56]	; (80001bc <irStart+0x54>)
 8000184:	f001 ffa4 	bl	80020d0 <HAL_TIM_IC_Stop_IT>

		hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <irStart+0x58>)
 800018a:	2220      	movs	r2, #32
 800018c:	619a      	str	r2, [r3, #24]
		hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 800018e:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <irStart+0x5c>)
 8000190:	2220      	movs	r2, #32
 8000192:	619a      	str	r2, [r3, #24]

		HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)nec.edge_falling, MAX_NEC_CNT);
 8000194:	2321      	movs	r3, #33	; 0x21
 8000196:	4a0c      	ldr	r2, [pc, #48]	; (80001c8 <irStart+0x60>)
 8000198:	2100      	movs	r1, #0
 800019a:	4808      	ldr	r0, [pc, #32]	; (80001bc <irStart+0x54>)
 800019c:	f002 f846 	bl	800222c <HAL_TIM_IC_Start_DMA>
		HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)nec.edge_rising, MAX_NEC_CNT);
 80001a0:	2321      	movs	r3, #33	; 0x21
 80001a2:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <irStart+0x64>)
 80001a4:	2104      	movs	r1, #4
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <irStart+0x54>)
 80001a8:	f002 f840 	bl	800222c <HAL_TIM_IC_Start_DMA>

		nec.taskFlag = true;
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <irStart+0x68>)
 80001ae:	2201      	movs	r2, #1
 80001b0:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	}
}
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000011c 	.word	0x2000011c
 80001c0:	20000164 	.word	0x20000164
 80001c4:	200001a8 	.word	0x200001a8
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	2000006e 	.word	0x2000006e
 80001d0:	20000028 	.word	0x20000028

080001d4 <irCheckStart>:

void irCheckStart()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	if (nec.state == NEC_INIT)
 80001d8:	4b24      	ldr	r3, [pc, #144]	; (800026c <irCheckStart+0x98>)
 80001da:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d120      	bne.n	8000224 <irCheckStart+0x50>
	{
		if (htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <irCheckStart+0x9c>)
 80001e4:	7f1b      	ldrb	r3, [r3, #28]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d10c      	bne.n	8000204 <irCheckStart+0x30>
		{
			nec.check_start_low = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80001ea:	2100      	movs	r1, #0
 80001ec:	4820      	ldr	r0, [pc, #128]	; (8000270 <irCheckStart+0x9c>)
 80001ee:	f002 fc11 	bl	8002a14 <HAL_TIM_ReadCapturedValue>
 80001f2:	4603      	mov	r3, r0
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	4b1d      	ldr	r3, [pc, #116]	; (800026c <irCheckStart+0x98>)
 80001f8:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = 0;// Reset Captured point (TIMER COUNTER)
 80001fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fe:	2200      	movs	r2, #0
 8000200:	625a      	str	r2, [r3, #36]	; 0x24
 8000202:	e00f      	b.n	8000224 <irCheckStart+0x50>
		}
		else if (htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000204:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <irCheckStart+0x9c>)
 8000206:	7f1b      	ldrb	r3, [r3, #28]
 8000208:	2b02      	cmp	r3, #2
 800020a:	d10b      	bne.n	8000224 <irCheckStart+0x50>
		{
			nec.check_start_high = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800020c:	2104      	movs	r1, #4
 800020e:	4818      	ldr	r0, [pc, #96]	; (8000270 <irCheckStart+0x9c>)
 8000210:	f002 fc00 	bl	8002a14 <HAL_TIM_ReadCapturedValue>
 8000214:	4603      	mov	r3, r0
 8000216:	b29a      	uxth	r2, r3
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <irCheckStart+0x98>)
 800021a:	805a      	strh	r2, [r3, #2]
			TIM2->CNT = 0; // Reset Captured point (TIMER COUNTER)
 800021c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000220:	2200      	movs	r2, #0
 8000222:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	if (nec.check_start_low > IR_HEADER_LOW - IR_HEADER_MARGIN && nec.check_start_low < IR_HEADER_LOW + IR_HEADER_MARGIN)
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <irCheckStart+0x98>)
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	f242 2260 	movw	r2, #8800	; 0x2260
 800022c:	4293      	cmp	r3, r2
 800022e:	d91b      	bls.n	8000268 <irCheckStart+0x94>
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <irCheckStart+0x98>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	f242 32ef 	movw	r2, #9199	; 0x23ef
 8000238:	4293      	cmp	r3, r2
 800023a:	d815      	bhi.n	8000268 <irCheckStart+0x94>
	{
		if (nec.check_start_high > IR_HEADER_HIGH - IR_HEADER_MARGIN && nec.check_start_high < IR_HEADER_HIGH + IR_HEADER_MARGIN)
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <irCheckStart+0x98>)
 800023e:	885b      	ldrh	r3, [r3, #2]
 8000240:	f241 02cc 	movw	r2, #4300	; 0x10cc
 8000244:	4293      	cmp	r3, r2
 8000246:	d90f      	bls.n	8000268 <irCheckStart+0x94>
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <irCheckStart+0x98>)
 800024a:	885b      	ldrh	r3, [r3, #2]
 800024c:	f241 225b 	movw	r2, #4699	; 0x125b
 8000250:	4293      	cmp	r3, r2
 8000252:	d809      	bhi.n	8000268 <irCheckStart+0x94>
		{
			nec.state = NEC_FORMAT;
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <irCheckStart+0x98>)
 8000256:	2201      	movs	r2, #1
 8000258:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
			irStart(nec.state);
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <irCheckStart+0x98>)
 800025e:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ff80 	bl	8000168 <irStart>
		}
	}
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000028 	.word	0x20000028
 8000270:	2000011c 	.word	0x2000011c

08000274 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d101      	bne.n	8000288 <HAL_TIM_IC_CaptureCallback+0x14>
	{
		irCheckStart();
 8000284:	f7ff ffa6 	bl	80001d4 <irCheckStart>
	}
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000011c 	.word	0x2000011c

08000294 <irDecode>:

bool irDecode()
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	volatile uint8_t bit_data_idx = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t decoded_idx = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	71bb      	strb	r3, [r7, #6]
	nec.isEnd = false;
 80002a2:	4b89      	ldr	r3, [pc, #548]	; (80004c8 <irDecode+0x234>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

	if (nec.taskFlag)
 80002aa:	4b87      	ldr	r3, [pc, #540]	; (80004c8 <irDecode+0x234>)
 80002ac:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	f000 80fb 	beq.w	80004ac <irDecode+0x218>
	{
		for (nec.cap_cnt = 0; nec.cap_cnt < MAX_NEC_CNT; nec.cap_cnt++)
 80002b6:	4b84      	ldr	r3, [pc, #528]	; (80004c8 <irDecode+0x234>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80002be:	e08d      	b.n	80003dc <irDecode+0x148>
		{
			if (nec.edge_rising[nec.cap_cnt] < nec.edge_falling[nec.cap_cnt])
 80002c0:	4b81      	ldr	r3, [pc, #516]	; (80004c8 <irDecode+0x234>)
 80002c2:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002c6:	4a80      	ldr	r2, [pc, #512]	; (80004c8 <irDecode+0x234>)
 80002c8:	3320      	adds	r3, #32
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	4413      	add	r3, r2
 80002ce:	88da      	ldrh	r2, [r3, #6]
 80002d0:	4b7d      	ldr	r3, [pc, #500]	; (80004c8 <irDecode+0x234>)
 80002d2:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002d6:	497c      	ldr	r1, [pc, #496]	; (80004c8 <irDecode+0x234>)
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	440b      	add	r3, r1
 80002dc:	889b      	ldrh	r3, [r3, #4]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d21a      	bcs.n	8000318 <irDecode+0x84>
			{
				nec.raw_capture[nec.cap_cnt] = nec.edge_falling[nec.cap_cnt] - nec.edge_rising[nec.cap_cnt];
 80002e2:	4b79      	ldr	r3, [pc, #484]	; (80004c8 <irDecode+0x234>)
 80002e4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002e8:	4a77      	ldr	r2, [pc, #476]	; (80004c8 <irDecode+0x234>)
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	4413      	add	r3, r2
 80002ee:	889a      	ldrh	r2, [r3, #4]
 80002f0:	4b75      	ldr	r3, [pc, #468]	; (80004c8 <irDecode+0x234>)
 80002f2:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002f6:	4974      	ldr	r1, [pc, #464]	; (80004c8 <irDecode+0x234>)
 80002f8:	3320      	adds	r3, #32
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	440b      	add	r3, r1
 80002fe:	88db      	ldrh	r3, [r3, #6]
 8000300:	4971      	ldr	r1, [pc, #452]	; (80004c8 <irDecode+0x234>)
 8000302:	f891 10ea 	ldrb.w	r1, [r1, #234]	; 0xea
 8000306:	4608      	mov	r0, r1
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	b299      	uxth	r1, r3
 800030c:	4a6e      	ldr	r2, [pc, #440]	; (80004c8 <irDecode+0x234>)
 800030e:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8000312:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000316:	e019      	b.n	800034c <irDecode+0xb8>
			}
			else
			{
				nec.raw_capture[nec.cap_cnt] = nec.edge_rising[nec.cap_cnt] - nec.edge_falling[nec.cap_cnt];
 8000318:	4b6b      	ldr	r3, [pc, #428]	; (80004c8 <irDecode+0x234>)
 800031a:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 800031e:	4a6a      	ldr	r2, [pc, #424]	; (80004c8 <irDecode+0x234>)
 8000320:	3320      	adds	r3, #32
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	88da      	ldrh	r2, [r3, #6]
 8000328:	4b67      	ldr	r3, [pc, #412]	; (80004c8 <irDecode+0x234>)
 800032a:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 800032e:	4966      	ldr	r1, [pc, #408]	; (80004c8 <irDecode+0x234>)
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	440b      	add	r3, r1
 8000334:	889b      	ldrh	r3, [r3, #4]
 8000336:	4964      	ldr	r1, [pc, #400]	; (80004c8 <irDecode+0x234>)
 8000338:	f891 10ea 	ldrb.w	r1, [r1, #234]	; 0xea
 800033c:	4608      	mov	r0, r1
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	b299      	uxth	r1, r3
 8000342:	4a61      	ldr	r2, [pc, #388]	; (80004c8 <irDecode+0x234>)
 8000344:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8000348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			if (nec.raw_capture[nec.cap_cnt] > BIT1_TIME - BIT_TIME_MARGIN && 
 800034c:	4b5e      	ldr	r3, [pc, #376]	; (80004c8 <irDecode+0x234>)
 800034e:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8000352:	4a5d      	ldr	r2, [pc, #372]	; (80004c8 <irDecode+0x234>)
 8000354:	3344      	adds	r3, #68	; 0x44
 8000356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800035a:	f240 620e 	movw	r2, #1550	; 0x60e
 800035e:	4293      	cmp	r3, r2
 8000360:	d913      	bls.n	800038a <irDecode+0xf6>
			nec.raw_capture[nec.cap_cnt] < BIT1_TIME + BIT_TIME_MARGIN)
 8000362:	4b59      	ldr	r3, [pc, #356]	; (80004c8 <irDecode+0x234>)
 8000364:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8000368:	4a57      	ldr	r2, [pc, #348]	; (80004c8 <irDecode+0x234>)
 800036a:	3344      	adds	r3, #68	; 0x44
 800036c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			if (nec.raw_capture[nec.cap_cnt] > BIT1_TIME - BIT_TIME_MARGIN && 
 8000370:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8000374:	4293      	cmp	r3, r2
 8000376:	d808      	bhi.n	800038a <irDecode+0xf6>
			{
				nec.data[bit_data_idx] = 1;
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	461a      	mov	r2, r3
 800037e:	4b52      	ldr	r3, [pc, #328]	; (80004c8 <irDecode+0x234>)
 8000380:	4413      	add	r3, r2
 8000382:	2201      	movs	r2, #1
 8000384:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8000388:	e01b      	b.n	80003c2 <irDecode+0x12e>
			}
			else if (nec.raw_capture[nec.cap_cnt] > BIT0_TIME - BIT_TIME_MARGIN && 
 800038a:	4b4f      	ldr	r3, [pc, #316]	; (80004c8 <irDecode+0x234>)
 800038c:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8000390:	4a4d      	ldr	r2, [pc, #308]	; (80004c8 <irDecode+0x234>)
 8000392:	3344      	adds	r3, #68	; 0x44
 8000394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000398:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800039c:	d911      	bls.n	80003c2 <irDecode+0x12e>
				nec.raw_capture[nec.cap_cnt] < BIT0_TIME + BIT_TIME_MARGIN)
 800039e:	4b4a      	ldr	r3, [pc, #296]	; (80004c8 <irDecode+0x234>)
 80003a0:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80003a4:	4a48      	ldr	r2, [pc, #288]	; (80004c8 <irDecode+0x234>)
 80003a6:	3344      	adds	r3, #68	; 0x44
 80003a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			else if (nec.raw_capture[nec.cap_cnt] > BIT0_TIME - BIT_TIME_MARGIN && 
 80003ac:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80003b0:	d207      	bcs.n	80003c2 <irDecode+0x12e>
			{
				nec.data[bit_data_idx] = 0;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <irDecode+0x234>)
 80003ba:	4413      	add	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			}

			bit_data_idx++;
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	71fb      	strb	r3, [r7, #7]
		for (nec.cap_cnt = 0; nec.cap_cnt < MAX_NEC_CNT; nec.cap_cnt++)
 80003cc:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <irDecode+0x234>)
 80003ce:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80003d2:	3301      	adds	r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <irDecode+0x234>)
 80003d8:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80003dc:	4b3a      	ldr	r3, [pc, #232]	; (80004c8 <irDecode+0x234>)
 80003de:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80003e2:	2b20      	cmp	r3, #32
 80003e4:	f67f af6c 	bls.w	80002c0 <irDecode+0x2c>
		}
		nec.taskFlag = false;
 80003e8:	4b37      	ldr	r3, [pc, #220]	; (80004c8 <irDecode+0x234>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	}

	
	while(!nec.isEnd)
 80003f0:	e05c      	b.n	80004ac <irDecode+0x218>
	{
		for (decoded_idx = 0; decoded_idx < 4; decoded_idx++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	71bb      	strb	r3, [r7, #6]
 80003f6:	e055      	b.n	80004a4 <irDecode+0x210>
		{
			for (bit_data_idx = 8 * decoded_idx; bit_data_idx < (8 * decoded_idx + 8); bit_data_idx++)
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	e041      	b.n	8000488 <irDecode+0x1f4>
			{
				nec.decoded[decoded_idx] += nec.data[bit_data_idx] << (8 * decoded_idx + 7 - bit_data_idx);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	4b2f      	ldr	r3, [pc, #188]	; (80004c8 <irDecode+0x234>)
 800040c:	4413      	add	r3, r2
 800040e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000412:	461a      	mov	r2, r3
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	3307      	adds	r3, #7
 800041c:	79f9      	ldrb	r1, [r7, #7]
 800041e:	b2c9      	uxtb	r1, r1
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	fa02 f003 	lsl.w	r0, r2, r3
 8000426:	79bb      	ldrb	r3, [r7, #6]
 8000428:	b2d9      	uxtb	r1, r3
 800042a:	460a      	mov	r2, r1
 800042c:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <irDecode+0x234>)
 800042e:	4413      	add	r3, r2
 8000430:	f993 30eb 	ldrsb.w	r3, [r3, #235]	; 0xeb
 8000434:	b2da      	uxtb	r2, r3
 8000436:	b2c3      	uxtb	r3, r0
 8000438:	4413      	add	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	b25a      	sxtb	r2, r3
 800043e:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <irDecode+0x234>)
 8000440:	440b      	add	r3, r1
 8000442:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				
				if (nec.decoded[0] == ~(nec.decoded[1]) && nec.decoded[2] == ~(nec.decoded[3]))
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <irDecode+0x234>)
 8000448:	f993 30eb 	ldrsb.w	r3, [r3, #235]	; 0xeb
 800044c:	461a      	mov	r2, r3
 800044e:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <irDecode+0x234>)
 8000450:	f993 30ec 	ldrsb.w	r3, [r3, #236]	; 0xec
 8000454:	43db      	mvns	r3, r3
 8000456:	429a      	cmp	r2, r3
 8000458:	d111      	bne.n	800047e <irDecode+0x1ea>
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <irDecode+0x234>)
 800045c:	f993 30ed 	ldrsb.w	r3, [r3, #237]	; 0xed
 8000460:	461a      	mov	r2, r3
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <irDecode+0x234>)
 8000464:	f993 30ee 	ldrsb.w	r3, [r3, #238]	; 0xee
 8000468:	43db      	mvns	r3, r3
 800046a:	429a      	cmp	r2, r3
 800046c:	d107      	bne.n	800047e <irDecode+0x1ea>
				{
					nec.isEnd = true;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <irDecode+0x234>)
 8000470:	2201      	movs	r2, #1
 8000472:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
			 		return nec.isEnd;
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <irDecode+0x234>)
 8000478:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800047c:	e01e      	b.n	80004bc <irDecode+0x228>
			for (bit_data_idx = 8 * decoded_idx; bit_data_idx < (8 * decoded_idx + 8); bit_data_idx++)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	3301      	adds	r3, #1
 8000484:	b2db      	uxtb	r3, r3
 8000486:	71fb      	strb	r3, [r7, #7]
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	461a      	mov	r2, r3
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	3301      	adds	r3, #1
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	429a      	cmp	r2, r3
 8000498:	dbb4      	blt.n	8000404 <irDecode+0x170>
		for (decoded_idx = 0; decoded_idx < 4; decoded_idx++)
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	3301      	adds	r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	71bb      	strb	r3, [r7, #6]
 80004a4:	79bb      	ldrb	r3, [r7, #6]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d9a5      	bls.n	80003f8 <irDecode+0x164>
	while(!nec.isEnd)
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <irDecode+0x234>)
 80004ae:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80004b2:	f083 0301 	eor.w	r3, r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d19a      	bne.n	80003f2 <irDecode+0x15e>
				}
			}
		}
	}
}
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000028 	.word	0x20000028

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb4e 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f818 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f932 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f902 	bl	80006e4 <MX_DMA_Init>
  MX_TIM2_Init();
 80004e0:	f000 f858 	bl	8000594 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8d4 	bl	8000690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  irInit();
 80004e8:	f7ff fe30 	bl	800014c <irInit>
  while(!nec.taskFlag);
 80004ec:	bf00      	nop
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <main+0x38>)
 80004f0:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 80004f4:	f083 0301 	eor.w	r3, r3, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d1f7      	bne.n	80004ee <main+0x22>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    irDecode();
 80004fe:	f7ff fec9 	bl	8000294 <irDecode>
 8000502:	e7fc      	b.n	80004fe <main+0x32>
 8000504:	20000028 	.word	0x20000028

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b090      	sub	sp, #64	; 0x40
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2228      	movs	r2, #40	; 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 ff3a 	bl	8003390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052a:	2301      	movs	r3, #1
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053c:	2302      	movs	r3, #2
 800053e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000546:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4618      	mov	r0, r3
 8000552:	f000 ffff 	bl	8001554 <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800055c:	f000 f93c 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	230f      	movs	r3, #15
 8000562:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	2302      	movs	r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fa6c 	bl	8001a58 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000586:	f000 f927 	bl	80007d8 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3740      	adds	r7, #64	; 0x40
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <MX_TIM2_Init+0xf8>)
 80005c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <MX_TIM2_Init+0xf8>)
 80005c8:	222f      	movs	r2, #47	; 0x2f
 80005ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_TIM2_Init+0xf8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_TIM2_Init+0xf8>)
 80005d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_TIM2_Init+0xf8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <MX_TIM2_Init+0xf8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e6:	4829      	ldr	r0, [pc, #164]	; (800068c <MX_TIM2_Init+0xf8>)
 80005e8:	f001 fbc4 	bl	8001d74 <HAL_TIM_Base_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80005f2:	f000 f8f1 	bl	80007d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	4619      	mov	r1, r3
 8000602:	4822      	ldr	r0, [pc, #136]	; (800068c <MX_TIM2_Init+0xf8>)
 8000604:	f002 f93e 	bl	8002884 <HAL_TIM_ConfigClockSource>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800060e:	f000 f8e3 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000612:	481e      	ldr	r0, [pc, #120]	; (800068c <MX_TIM2_Init+0xf8>)
 8000614:	f001 fbfd 	bl	8001e12 <HAL_TIM_IC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800061e:	f000 f8db 	bl	80007d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	4619      	mov	r1, r3
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <MX_TIM2_Init+0xf8>)
 8000632:	f002 fd65 	bl	8003100 <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800063c:	f000 f8cc 	bl	80007d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000640:	2302      	movs	r3, #2
 8000642:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000644:	2301      	movs	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_TIM2_Init+0xf8>)
 8000658:	f002 f878 	bl	800274c <HAL_TIM_IC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000662:	f000 f8b9 	bl	80007d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800066a:	2302      	movs	r3, #2
 800066c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2204      	movs	r2, #4
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_TIM2_Init+0xf8>)
 8000676:	f002 f869 	bl	800274c <HAL_TIM_IC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000680:	f000 f8aa 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000011c 	.word	0x2000011c

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f002 fd84 	bl	80031d4 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f881 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200001ec 	.word	0x200001ec
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_DMA_Init+0x58>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_DMA_Init+0x58>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_DMA_Init+0x58>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200f      	movs	r0, #15
 8000708:	f000 fb6b 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800070c:	200f      	movs	r0, #15
 800070e:	f000 fb84 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2010      	movs	r0, #16
 8000718:	f000 fb63 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800071c:	2010      	movs	r0, #16
 800071e:	f000 fb7c 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2011      	movs	r0, #17
 8000728:	f000 fb5b 	bl	8000de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800072c:	2011      	movs	r0, #17
 800072e:	f000 fb74 	bl	8000e1a <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <MX_GPIO_Init+0x90>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0310 	and.w	r3, r3, #16
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0x90>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000772:	f043 0320 	orr.w	r3, r3, #32
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0320 	and.w	r3, r3, #32
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <MX_GPIO_Init+0x90>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_GPIO_Init+0x90>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_GPIO_Init+0x94>)
 80007a4:	f000 febe 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0x94>)
 80007c2:	f000 fd33 	bl	800122c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40011000 	.word	0x40011000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_MspInit+0x5c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a14      	ldr	r2, [pc, #80]	; (8000840 <HAL_MspInit+0x5c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_MspInit+0x5c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_MspInit+0x5c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <HAL_MspInit+0x5c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_MspInit+0x5c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_MspInit+0x60>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_MspInit+0x60>)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000
 8000844:	40010000 	.word	0x40010000

08000848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000866:	f040 8082 	bne.w	800096e <HAL_TIM_Base_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <HAL_TIM_Base_MspInit+0x130>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a42      	ldr	r2, [pc, #264]	; (8000978 <HAL_TIM_Base_MspInit+0x130>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <HAL_TIM_Base_MspInit+0x130>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <HAL_TIM_Base_MspInit+0x130>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a3c      	ldr	r2, [pc, #240]	; (8000978 <HAL_TIM_Base_MspInit+0x130>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <HAL_TIM_Base_MspInit+0x130>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089a:	2301      	movs	r3, #1
 800089c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	4833      	ldr	r0, [pc, #204]	; (800097c <HAL_TIM_Base_MspInit+0x134>)
 80008ae:	f000 fcbd 	bl	800122c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008b4:	4a33      	ldr	r2, [pc, #204]	; (8000984 <HAL_TIM_Base_MspInit+0x13c>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	4b31      	ldr	r3, [pc, #196]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80008e6:	4826      	ldr	r0, [pc, #152]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008e8:	f000 fab2 	bl	8000e50 <HAL_DMA_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_TIM_Base_MspInit+0xae>
    {
      Error_Handler();
 80008f2:	f7ff ff71 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
 80008fc:	4a20      	ldr	r2, [pc, #128]	; (8000980 <HAL_TIM_Base_MspInit+0x138>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <HAL_TIM_Base_MspInit+0x144>)
 8000906:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 800091c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000920:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 8000924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000928:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 8000938:	f000 fa8a 	bl	8000e50 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_TIM_Base_MspInit+0xfe>
    {
      Error_Handler();
 8000942:	f7ff ff49 	bl	80007d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <HAL_TIM_Base_MspInit+0x140>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	201c      	movs	r0, #28
 8000964:	f000 fa3d 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000968:	201c      	movs	r0, #28
 800096a:	f000 fa56 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800
 8000980:	20000164 	.word	0x20000164
 8000984:	40020058 	.word	0x40020058
 8000988:	200001a8 	.word	0x200001a8
 800098c:	40020080 	.word	0x40020080

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <HAL_UART_MspInit+0xd4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d155      	bne.n	8000a5c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_UART_MspInit+0xd8>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <HAL_UART_MspInit+0xd8>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ba:	61d3      	str	r3, [r2, #28]
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <HAL_UART_MspInit+0xd8>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <HAL_UART_MspInit+0xd8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <HAL_UART_MspInit+0xd8>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <HAL_UART_MspInit+0xd8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009e0:	2304      	movs	r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	481e      	ldr	r0, [pc, #120]	; (8000a6c <HAL_UART_MspInit+0xdc>)
 80009f4:	f000 fc1a 	bl	800122c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009f8:	2308      	movs	r3, #8
 80009fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4818      	ldr	r0, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0xdc>)
 8000a0c:	f000 fc0e 	bl	800122c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0xe4>)
 8000a14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a36:	2220      	movs	r2, #32
 8000a38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a42:	f000 fa05 	bl	8000e50 <HAL_DMA_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000a4c:	f7ff fec4 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a56:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_UART_MspInit+0xe0>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	20000234 	.word	0x20000234
 8000a74:	4002006c 	.word	0x4002006c

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abe:	f000 f89d 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <DMA1_Channel5_IRQHandler+0x10>)
 8000ace:	f000 fa79 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000164 	.word	0x20000164

08000adc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <DMA1_Channel6_IRQHandler+0x10>)
 8000ae2:	f000 fa6f 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000234 	.word	0x20000234

08000af0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <DMA1_Channel7_IRQHandler+0x10>)
 8000af6:	f000 fa65 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001a8 	.word	0x200001a8

08000b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM2_IRQHandler+0x10>)
 8000b0a:	f001 fd17 	bl	800253c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000011c 	.word	0x2000011c

08000b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff fff8 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b2a:	490c      	ldr	r1, [pc, #48]	; (8000b5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b40:	4c09      	ldr	r4, [pc, #36]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f002 fc27 	bl	80033a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b52:	f7ff fcbb 	bl	80004cc <main>
  bx lr
 8000b56:	4770      	bx	lr
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	08003434 	.word	0x08003434
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	2000027c 	.word	0x2000027c

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x28>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f923 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe2a 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f93b 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f903 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000278 	.word	0x20000278

08000c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000278 	.word	0x20000278

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4906      	ldr	r1, [pc, #24]	; (8000ccc <__NVIC_EnableIRQ+0x34>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff2d 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff42 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff35 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e043      	b.n	8000eee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <HAL_DMA_Init+0xa8>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_DMA_Init+0xac>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	009a      	lsls	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_DMA_Init+0xb0>)
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2202      	movs	r2, #2
 8000e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	bffdfff8 	.word	0xbffdfff8
 8000efc:	cccccccd 	.word	0xcccccccd
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_DMA_Start_IT+0x20>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e04b      	b.n	8000fbc <HAL_DMA_Start_IT+0xb8>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d13a      	bne.n	8000fae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f000 f937 	bl	80011d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d008      	beq.n	8000f7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 020e 	orr.w	r2, r2, #14
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e00f      	b.n	8000f9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0204 	bic.w	r2, r2, #4
 8000f8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 020a 	orr.w	r2, r2, #10
 8000f9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e005      	b.n	8000fba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d04f      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d04a      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0204 	bic.w	r2, r2, #4
 8001012:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d029      	beq.n	8001072 <HAL_DMA_IRQHandler+0xae>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a65      	ldr	r2, [pc, #404]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d022      	beq.n	800106e <HAL_DMA_IRQHandler+0xaa>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a63      	ldr	r2, [pc, #396]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01a      	beq.n	8001068 <HAL_DMA_IRQHandler+0xa4>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a62      	ldr	r2, [pc, #392]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d012      	beq.n	8001062 <HAL_DMA_IRQHandler+0x9e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a60      	ldr	r2, [pc, #384]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00a      	beq.n	800105c <HAL_DMA_IRQHandler+0x98>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a5f      	ldr	r2, [pc, #380]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d102      	bne.n	8001056 <HAL_DMA_IRQHandler+0x92>
 8001050:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001054:	e00e      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800105a:	e00b      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001060:	e008      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001066:	e005      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	e002      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	e000      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001072:	2304      	movs	r3, #4
 8001074:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 8001076:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8094 	beq.w	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800108a:	e08e      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	2202      	movs	r2, #2
 8001092:	409a      	lsls	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d056      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d051      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10b      	bne.n	80010cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020a 	bic.w	r2, r2, #10
 80010c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d029      	beq.n	800112a <HAL_DMA_IRQHandler+0x166>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d022      	beq.n	8001126 <HAL_DMA_IRQHandler+0x162>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a35      	ldr	r2, [pc, #212]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01a      	beq.n	8001120 <HAL_DMA_IRQHandler+0x15c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d012      	beq.n	800111a <HAL_DMA_IRQHandler+0x156>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x150>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d102      	bne.n	800110e <HAL_DMA_IRQHandler+0x14a>
 8001108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800110c:	e00e      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800110e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001112:	e00b      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001118:	e008      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	e005      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	e002      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001126:	2320      	movs	r3, #32
 8001128:	e000      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800112a:	2302      	movs	r3, #2
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 800112e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d034      	beq.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001148:	e02f      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2208      	movs	r2, #8
 8001150:	409a      	lsls	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d028      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 020e 	bic.w	r2, r2, #14
 8001172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	4798      	blx	r3
    }
  }
  return;
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
}
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020008 	.word	0x40020008
 80011b8:	4002001c 	.word	0x4002001c
 80011bc:	40020030 	.word	0x40020030
 80011c0:	40020044 	.word	0x40020044
 80011c4:	40020058 	.word	0x40020058
 80011c8:	4002006c 	.word	0x4002006c
 80011cc:	40020000 	.word	0x40020000

080011d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d108      	bne.n	8001210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800120e:	e007      	b.n	8001220 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
	...

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b08b      	sub	sp, #44	; 0x2c
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e161      	b.n	8001504 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001240:	2201      	movs	r2, #1
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8150 	bne.w	80014fe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4a97      	ldr	r2, [pc, #604]	; (80014c0 <HAL_GPIO_Init+0x294>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d05e      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001268:	4a95      	ldr	r2, [pc, #596]	; (80014c0 <HAL_GPIO_Init+0x294>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d875      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800126e:	4a95      	ldr	r2, [pc, #596]	; (80014c4 <HAL_GPIO_Init+0x298>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d058      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001274:	4a93      	ldr	r2, [pc, #588]	; (80014c4 <HAL_GPIO_Init+0x298>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d86f      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800127a:	4a93      	ldr	r2, [pc, #588]	; (80014c8 <HAL_GPIO_Init+0x29c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d052      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001280:	4a91      	ldr	r2, [pc, #580]	; (80014c8 <HAL_GPIO_Init+0x29c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d869      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 8001286:	4a91      	ldr	r2, [pc, #580]	; (80014cc <HAL_GPIO_Init+0x2a0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d04c      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 800128c:	4a8f      	ldr	r2, [pc, #572]	; (80014cc <HAL_GPIO_Init+0x2a0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d863      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 8001292:	4a8f      	ldr	r2, [pc, #572]	; (80014d0 <HAL_GPIO_Init+0x2a4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d046      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001298:	4a8d      	ldr	r2, [pc, #564]	; (80014d0 <HAL_GPIO_Init+0x2a4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d85d      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d82a      	bhi.n	80012f8 <HAL_GPIO_Init+0xcc>
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d859      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <HAL_GPIO_Init+0x80>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	08001327 	.word	0x08001327
 80012b0:	08001301 	.word	0x08001301
 80012b4:	08001313 	.word	0x08001313
 80012b8:	08001355 	.word	0x08001355
 80012bc:	0800135b 	.word	0x0800135b
 80012c0:	0800135b 	.word	0x0800135b
 80012c4:	0800135b 	.word	0x0800135b
 80012c8:	0800135b 	.word	0x0800135b
 80012cc:	0800135b 	.word	0x0800135b
 80012d0:	0800135b 	.word	0x0800135b
 80012d4:	0800135b 	.word	0x0800135b
 80012d8:	0800135b 	.word	0x0800135b
 80012dc:	0800135b 	.word	0x0800135b
 80012e0:	0800135b 	.word	0x0800135b
 80012e4:	0800135b 	.word	0x0800135b
 80012e8:	0800135b 	.word	0x0800135b
 80012ec:	0800135b 	.word	0x0800135b
 80012f0:	08001309 	.word	0x08001309
 80012f4:	0800131d 	.word	0x0800131d
 80012f8:	4a76      	ldr	r2, [pc, #472]	; (80014d4 <HAL_GPIO_Init+0x2a8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012fe:	e02c      	b.n	800135a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e029      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	3304      	adds	r3, #4
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e024      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	3308      	adds	r3, #8
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e01f      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	330c      	adds	r3, #12
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e01a      	b.n	800135c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800132e:	2304      	movs	r3, #4
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e013      	b.n	800135c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	611a      	str	r2, [r3, #16]
          break;
 8001346:	e009      	b.n	800135c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	615a      	str	r2, [r3, #20]
          break;
 8001352:	e003      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
          break;
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x130>
          break;
 800135a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	d801      	bhi.n	8001366 <HAL_GPIO_Init+0x13a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	e001      	b.n	800136a <HAL_GPIO_Init+0x13e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3304      	adds	r3, #4
 800136a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2bff      	cmp	r3, #255	; 0xff
 8001370:	d802      	bhi.n	8001378 <HAL_GPIO_Init+0x14c>
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x152>
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	3b08      	subs	r3, #8
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	210f      	movs	r1, #15
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	6a39      	ldr	r1, [r7, #32]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80a9 	beq.w	80014fe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x2ac>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a49      	ldr	r2, [pc, #292]	; (80014d8 <HAL_GPIO_Init+0x2ac>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_GPIO_Init+0x2ac>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013c4:	4a45      	ldr	r2, [pc, #276]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <HAL_GPIO_Init+0x2b4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d00d      	beq.n	800140c <HAL_GPIO_Init+0x1e0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <HAL_GPIO_Init+0x2b8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x1dc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <HAL_GPIO_Init+0x2bc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d101      	bne.n	8001404 <HAL_GPIO_Init+0x1d8>
 8001400:	2302      	movs	r3, #2
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1e2>
 8001404:	2303      	movs	r3, #3
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1e2>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1e2>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x2b0>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	492b      	ldr	r1, [pc, #172]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4927      	ldr	r1, [pc, #156]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4921      	ldr	r1, [pc, #132]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491d      	ldr	r1, [pc, #116]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 8001478:	4013      	ands	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4917      	ldr	r1, [pc, #92]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4913      	ldr	r1, [pc, #76]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01f      	beq.n	80014f0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	490d      	ldr	r1, [pc, #52]	; (80014ec <HAL_GPIO_Init+0x2c0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e01f      	b.n	80014fe <HAL_GPIO_Init+0x2d2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_GPIO_Init+0x2f4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	4909      	ldr	r1, [pc, #36]	; (8001520 <HAL_GPIO_Init+0x2f4>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	3301      	adds	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	f47f ae96 	bne.w	8001240 <HAL_GPIO_Init+0x14>
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	372c      	adds	r7, #44	; 0x2c
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e272      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8087 	beq.w	8001682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00c      	beq.n	800159a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001580:	4b8f      	ldr	r3, [pc, #572]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d112      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5e>
 800158c:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001598:	d10b      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d06c      	beq.n	8001680 <HAL_RCC_OscConfig+0x12c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d168      	bne.n	8001680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e24c      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x76>
 80015bc:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a7f      	ldr	r2, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e02e      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x98>
 80015d2:	4b7b      	ldr	r3, [pc, #492]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7a      	ldr	r2, [pc, #488]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a77      	ldr	r2, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0xbc>
 80015f6:	4b72      	ldr	r3, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a71      	ldr	r2, [pc, #452]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 8001610:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6a      	ldr	r2, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff faf6 	bl	8000c20 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff faf2 	bl	8000c20 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e200      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xe4>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fae2 	bl	8000c20 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fade 	bl	8000c20 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1ec      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x10c>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d063      	beq.n	8001756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800169a:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x18c>
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x176>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1c0      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4939      	ldr	r1, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e03a      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa97 	bl	8000c20 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fa93 	bl	8000c20 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1a1      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4927      	ldr	r1, [pc, #156]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x270>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fa76 	bl	8000c20 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fa72 	bl	8000c20 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e180      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03a      	beq.n	80017d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d019      	beq.n	800179e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_RCC_OscConfig+0x274>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fa56 	bl	8000c20 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fa52 	bl	8000c20 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e160      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001796:	2001      	movs	r0, #1
 8001798:	f000 face 	bl	8001d38 <RCC_Delay>
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_OscConfig+0x274>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa3c 	bl	8000c20 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017aa:	e00f      	b.n	80017cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff fa38 	bl	8000c20 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d908      	bls.n	80017cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e146      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	42420000 	.word	0x42420000
 80017c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4b92      	ldr	r3, [pc, #584]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e9      	bne.n	80017ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a6 	beq.w	8001932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b8b      	ldr	r3, [pc, #556]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10d      	bne.n	8001812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b88      	ldr	r3, [pc, #544]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a87      	ldr	r2, [pc, #540]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7e      	ldr	r2, [pc, #504]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff f9f9 	bl	8000c20 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff f9f5 	bl	8000c20 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e103      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x4c8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x312>
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a6e      	ldr	r2, [pc, #440]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	e02d      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x334>
 800186e:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a69      	ldr	r2, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	e01c      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x356>
 8001890:	4b61      	ldr	r3, [pc, #388]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a60      	ldr	r2, [pc, #384]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a5d      	ldr	r2, [pc, #372]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 80018aa:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a5a      	ldr	r2, [pc, #360]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a57      	ldr	r2, [pc, #348]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f9a9 	bl	8000c20 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f9a5 	bl	8000c20 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0b1      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ee      	beq.n	80018d2 <HAL_RCC_OscConfig+0x37e>
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f993 	bl	8000c20 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff f98f 	bl	8000c20 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e09b      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a3b      	ldr	r2, [pc, #236]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8087 	beq.w	8001a4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d061      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d146      	bne.n	80019de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff f963 	bl	8000c20 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff f95f 	bl	8000c20 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e06d      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4921      	ldr	r1, [pc, #132]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a19      	ldr	r1, [r3, #32]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	430b      	orrs	r3, r1
 80019aa:	491b      	ldr	r1, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff f933 	bl	8000c20 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff f92f 	bl	8000c20 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e03d      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x46a>
 80019dc:	e035      	b.n	8001a4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f91c 	bl	8000c20 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f918 	bl	8000c20 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e026      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x498>
 8001a0a:	e01e      	b.n	8001a4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e019      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x500>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0d0      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d910      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0207 	bic.w	r2, r3, #7
 8001a82:	4965      	ldr	r1, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001abe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ad6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d040      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e073      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06b      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4936      	ldr	r1, [pc, #216]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff f86a 	bl	8000c20 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f866 	bl	8000c20 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e053      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d210      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4922      	ldr	r1, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f821 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1cc>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1d0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe ffc8 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08003400 	.word	0x08003400
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x30>
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x36>
 8001c5a:	e027      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c5e:	613b      	str	r3, [r7, #16]
      break;
 8001c60:	e027      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d010      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0c5b      	lsrs	r3, r3, #17
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c8e:	fb03 f202 	mul.w	r2, r3, r2
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e004      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	613b      	str	r3, [r7, #16]
      break;
 8001caa:	e002      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cae:	613b      	str	r3, [r7, #16]
      break;
 8001cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb2:	693b      	ldr	r3, [r7, #16]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	08003418 	.word	0x08003418
 8001ccc:	08003428 	.word	0x08003428
 8001cd0:	003d0900 	.word	0x003d0900

08001cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cec:	f7ff fff2 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08003410 	.word	0x08003410

08001d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d14:	f7ff ffde 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	0adb      	lsrs	r3, r3, #11
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08003410 	.word	0x08003410

08001d38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <RCC_Delay+0x34>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <RCC_Delay+0x38>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d54:	bf00      	nop
  }
  while (Delay --);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	60fa      	str	r2, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f9      	bne.n	8001d54 <RCC_Delay+0x1c>
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	10624dd3 	.word	0x10624dd3

08001d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e041      	b.n	8001e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fd54 	bl	8000848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f000 ff8a 	bl	8002ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e041      	b.n	8001ea8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d106      	bne.n	8001e3e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f839 	bl	8001eb0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f000 ff3b 	bl	8002ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	e013      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x46>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d104      	bne.n	8001ef2 <HAL_TIM_IC_Start_IT+0x2e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	e00b      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x46>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d104      	bne.n	8001f02 <HAL_TIM_IC_Start_IT+0x3e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	e003      	b.n	8001f0a <HAL_TIM_IC_Start_IT+0x46>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d104      	bne.n	8001f1c <HAL_TIM_IC_Start_IT+0x58>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e013      	b.n	8001f44 <HAL_TIM_IC_Start_IT+0x80>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d104      	bne.n	8001f2c <HAL_TIM_IC_Start_IT+0x68>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e00b      	b.n	8001f44 <HAL_TIM_IC_Start_IT+0x80>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d104      	bne.n	8001f3c <HAL_TIM_IC_Start_IT+0x78>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	e003      	b.n	8001f44 <HAL_TIM_IC_Start_IT+0x80>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d102      	bne.n	8001f52 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f4c:	7b7b      	ldrb	r3, [r7, #13]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0b3      	b.n	80020be <HAL_TIM_IC_Start_IT+0x1fa>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_IC_Start_IT+0xa2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	e013      	b.n	8001f8e <HAL_TIM_IC_Start_IT+0xca>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_IC_Start_IT+0xb2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f74:	e00b      	b.n	8001f8e <HAL_TIM_IC_Start_IT+0xca>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_IC_Start_IT+0xc2>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f84:	e003      	b.n	8001f8e <HAL_TIM_IC_Start_IT+0xca>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d104      	bne.n	8001f9e <HAL_TIM_IC_Start_IT+0xda>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f9c:	e013      	b.n	8001fc6 <HAL_TIM_IC_Start_IT+0x102>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d104      	bne.n	8001fae <HAL_TIM_IC_Start_IT+0xea>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fac:	e00b      	b.n	8001fc6 <HAL_TIM_IC_Start_IT+0x102>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d104      	bne.n	8001fbe <HAL_TIM_IC_Start_IT+0xfa>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fbc:	e003      	b.n	8001fc6 <HAL_TIM_IC_Start_IT+0x102>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b0c      	cmp	r3, #12
 8001fca:	d841      	bhi.n	8002050 <HAL_TIM_IC_Start_IT+0x18c>
 8001fcc:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <HAL_TIM_IC_Start_IT+0x110>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08002009 	.word	0x08002009
 8001fd8:	08002051 	.word	0x08002051
 8001fdc:	08002051 	.word	0x08002051
 8001fe0:	08002051 	.word	0x08002051
 8001fe4:	0800201b 	.word	0x0800201b
 8001fe8:	08002051 	.word	0x08002051
 8001fec:	08002051 	.word	0x08002051
 8001ff0:	08002051 	.word	0x08002051
 8001ff4:	0800202d 	.word	0x0800202d
 8001ff8:	08002051 	.word	0x08002051
 8001ffc:	08002051 	.word	0x08002051
 8002000:	08002051 	.word	0x08002051
 8002004:	0800203f 	.word	0x0800203f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0202 	orr.w	r2, r2, #2
 8002016:	60da      	str	r2, [r3, #12]
      break;
 8002018:	e01d      	b.n	8002056 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0204 	orr.w	r2, r2, #4
 8002028:	60da      	str	r2, [r3, #12]
      break;
 800202a:	e014      	b.n	8002056 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	60da      	str	r2, [r3, #12]
      break;
 800203c:	e00b      	b.n	8002056 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0210 	orr.w	r2, r2, #16
 800204c:	60da      	str	r2, [r3, #12]
      break;
 800204e:	e002      	b.n	8002056 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      break;
 8002054:	bf00      	nop
  }

  if (status == HAL_OK)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d12f      	bne.n	80020bc <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f001 f826 	bl	80030b6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_TIM_IC_Start_IT+0x204>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_TIM_IC_Start_IT+0x1c4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207c:	d004      	beq.n	8002088 <HAL_TIM_IC_Start_IT+0x1c4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_TIM_IC_Start_IT+0x208>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d010      	beq.n	80020bc <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	e007      	b.n	80020bc <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40000400 	.word	0x40000400

080020d0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d841      	bhi.n	8002168 <HAL_TIM_IC_Stop_IT+0x98>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <HAL_TIM_IC_Stop_IT+0x1c>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	08002121 	.word	0x08002121
 80020f0:	08002169 	.word	0x08002169
 80020f4:	08002169 	.word	0x08002169
 80020f8:	08002169 	.word	0x08002169
 80020fc:	08002133 	.word	0x08002133
 8002100:	08002169 	.word	0x08002169
 8002104:	08002169 	.word	0x08002169
 8002108:	08002169 	.word	0x08002169
 800210c:	08002145 	.word	0x08002145
 8002110:	08002169 	.word	0x08002169
 8002114:	08002169 	.word	0x08002169
 8002118:	08002169 	.word	0x08002169
 800211c:	08002157 	.word	0x08002157
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0202 	bic.w	r2, r2, #2
 800212e:	60da      	str	r2, [r3, #12]
      break;
 8002130:	e01d      	b.n	800216e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0204 	bic.w	r2, r2, #4
 8002140:	60da      	str	r2, [r3, #12]
      break;
 8002142:	e014      	b.n	800216e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0208 	bic.w	r2, r2, #8
 8002152:	60da      	str	r2, [r3, #12]
      break;
 8002154:	e00b      	b.n	800216e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0210 	bic.w	r2, r2, #16
 8002164:	60da      	str	r2, [r3, #12]
      break;
 8002166:	e002      	b.n	800216e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	bf00      	nop
  }

  if (status == HAL_OK)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d156      	bne.n	8002222 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 ff9a 	bl	80030b6 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	f241 1311 	movw	r3, #4369	; 0x1111
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_TIM_IC_Stop_IT+0xe2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	f240 4344 	movw	r3, #1092	; 0x444
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d107      	bne.n	80021b2 <HAL_TIM_IC_Stop_IT+0xe2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_IC_Stop_IT+0xf2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021c0:	e013      	b.n	80021ea <HAL_TIM_IC_Stop_IT+0x11a>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_IC_Stop_IT+0x102>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d0:	e00b      	b.n	80021ea <HAL_TIM_IC_Stop_IT+0x11a>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_IC_Stop_IT+0x112>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e0:	e003      	b.n	80021ea <HAL_TIM_IC_Stop_IT+0x11a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <HAL_TIM_IC_Stop_IT+0x12a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f8:	e013      	b.n	8002222 <HAL_TIM_IC_Stop_IT+0x152>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d104      	bne.n	800220a <HAL_TIM_IC_Stop_IT+0x13a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002208:	e00b      	b.n	8002222 <HAL_TIM_IC_Stop_IT+0x152>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d104      	bne.n	800221a <HAL_TIM_IC_Stop_IT+0x14a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002218:	e003      	b.n	8002222 <HAL_TIM_IC_Stop_IT+0x152>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_TIM_IC_Start_DMA+0x22>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e013      	b.n	8002276 <HAL_TIM_IC_Start_DMA+0x4a>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d104      	bne.n	800225e <HAL_TIM_IC_Start_DMA+0x32>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e00b      	b.n	8002276 <HAL_TIM_IC_Start_DMA+0x4a>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d104      	bne.n	800226e <HAL_TIM_IC_Start_DMA+0x42>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e003      	b.n	8002276 <HAL_TIM_IC_Start_DMA+0x4a>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <HAL_TIM_IC_Start_DMA+0x5c>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e013      	b.n	80022b0 <HAL_TIM_IC_Start_DMA+0x84>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d104      	bne.n	8002298 <HAL_TIM_IC_Start_DMA+0x6c>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e00b      	b.n	80022b0 <HAL_TIM_IC_Start_DMA+0x84>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b08      	cmp	r3, #8
 800229c:	d104      	bne.n	80022a8 <HAL_TIM_IC_Start_DMA+0x7c>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e003      	b.n	80022b0 <HAL_TIM_IC_Start_DMA+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80022b2:	7dbb      	ldrb	r3, [r7, #22]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d002      	beq.n	80022be <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80022b8:	7d7b      	ldrb	r3, [r7, #21]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e12d      	b.n	800251e <HAL_TIM_IC_Start_DMA+0x2f2>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80022c2:	7dbb      	ldrb	r3, [r7, #22]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d143      	bne.n	8002350 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80022c8:	7d7b      	ldrb	r3, [r7, #21]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d140      	bne.n	8002350 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_TIM_IC_Start_DMA+0xae>
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e11f      	b.n	800251e <HAL_TIM_IC_Start_DMA+0x2f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_IC_Start_DMA+0xc2>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ec:	e013      	b.n	8002316 <HAL_TIM_IC_Start_DMA+0xea>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_IC_Start_DMA+0xd2>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022fc:	e00b      	b.n	8002316 <HAL_TIM_IC_Start_DMA+0xea>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d104      	bne.n	800230e <HAL_TIM_IC_Start_DMA+0xe2>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	e003      	b.n	8002316 <HAL_TIM_IC_Start_DMA+0xea>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_TIM_IC_Start_DMA+0xfa>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 8002324:	e016      	b.n	8002354 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d104      	bne.n	8002336 <HAL_TIM_IC_Start_DMA+0x10a>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) || (Length == 0U))
 8002334:	e00e      	b.n	8002354 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d104      	bne.n	8002346 <HAL_TIM_IC_Start_DMA+0x11a>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8002344:	e006      	b.n	8002354 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 800234e:	e001      	b.n	8002354 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0e4      	b.n	800251e <HAL_TIM_IC_Start_DMA+0x2f2>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 feaa 	bl	80030b6 <TIM_CCxChannelCmd>

  switch (Channel)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	f200 80ad 	bhi.w	80024c4 <HAL_TIM_IC_Start_DMA+0x298>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_TIM_IC_Start_DMA+0x144>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	080023a5 	.word	0x080023a5
 8002374:	080024c5 	.word	0x080024c5
 8002378:	080024c5 	.word	0x080024c5
 800237c:	080024c5 	.word	0x080024c5
 8002380:	080023ed 	.word	0x080023ed
 8002384:	080024c5 	.word	0x080024c5
 8002388:	080024c5 	.word	0x080024c5
 800238c:	080024c5 	.word	0x080024c5
 8002390:	08002435 	.word	0x08002435
 8002394:	080024c5 	.word	0x080024c5
 8002398:	080024c5 	.word	0x080024c5
 800239c:	080024c5 	.word	0x080024c5
 80023a0:	0800247d 	.word	0x0800247d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	4a5f      	ldr	r2, [pc, #380]	; (8002528 <HAL_TIM_IC_Start_DMA+0x2fc>)
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	4a5e      	ldr	r2, [pc, #376]	; (800252c <HAL_TIM_IC_Start_DMA+0x300>)
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	4a5d      	ldr	r2, [pc, #372]	; (8002530 <HAL_TIM_IC_Start_DMA+0x304>)
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3334      	adds	r3, #52	; 0x34
 80023c6:	4619      	mov	r1, r3
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	f7fe fd9a 	bl	8000f04 <HAL_DMA_Start_IT>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0a1      	b.n	800251e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e8:	60da      	str	r2, [r3, #12]
      break;
 80023ea:	e06e      	b.n	80024ca <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_TIM_IC_Start_DMA+0x2fc>)
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_TIM_IC_Start_DMA+0x300>)
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_TIM_IC_Start_DMA+0x304>)
 8002402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3338      	adds	r3, #56	; 0x38
 800240e:	4619      	mov	r1, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	f7fe fd76 	bl	8000f04 <HAL_DMA_Start_IT>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07d      	b.n	800251e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002430:	60da      	str	r2, [r3, #12]
      break;
 8002432:	e04a      	b.n	80024ca <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	4a3b      	ldr	r2, [pc, #236]	; (8002528 <HAL_TIM_IC_Start_DMA+0x2fc>)
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	4a3a      	ldr	r2, [pc, #232]	; (800252c <HAL_TIM_IC_Start_DMA+0x300>)
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	4a39      	ldr	r2, [pc, #228]	; (8002530 <HAL_TIM_IC_Start_DMA+0x304>)
 800244a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	333c      	adds	r3, #60	; 0x3c
 8002456:	4619      	mov	r1, r3
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	f7fe fd52 	bl	8000f04 <HAL_DMA_Start_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e059      	b.n	800251e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002478:	60da      	str	r2, [r3, #12]
      break;
 800247a:	e026      	b.n	80024ca <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_TIM_IC_Start_DMA+0x300>)
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_TIM_IC_Start_DMA+0x304>)
 8002492:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3340      	adds	r3, #64	; 0x40
 800249e:	4619      	mov	r1, r3
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	f7fe fd2e 	bl	8000f04 <HAL_DMA_Start_IT>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e035      	b.n	800251e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024c0:	60da      	str	r2, [r3, #12]
      break;
 80024c2:	e002      	b.n	80024ca <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	75fb      	strb	r3, [r7, #23]
      break;
 80024c8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_TIM_IC_Start_DMA+0x308>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_TIM_IC_Start_DMA+0x2bc>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024dc:	d004      	beq.n	80024e8 <HAL_TIM_IC_Start_DMA+0x2bc>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <HAL_TIM_IC_Start_DMA+0x30c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d111      	bne.n	800250c <HAL_TIM_IC_Start_DMA+0x2e0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d010      	beq.n	800251c <HAL_TIM_IC_Start_DMA+0x2f0>
    {
      __HAL_TIM_ENABLE(htim);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	e007      	b.n	800251c <HAL_TIM_IC_Start_DMA+0x2f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800251c:	7dfb      	ldrb	r3, [r7, #23]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	08002b9b 	.word	0x08002b9b
 800252c:	08002c63 	.word	0x08002c63
 8002530:	08002b09 	.word	0x08002b09
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400

0800253c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b02      	cmp	r3, #2
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0202 	mvn.w	r2, #2
 8002568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fd fe78 	bl	8000274 <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa91 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 faa0 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0204 	mvn.w	r2, #4
 80025bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fd fe4e 	bl	8000274 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa67 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fa76 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b08      	cmp	r3, #8
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0208 	mvn.w	r2, #8
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2204      	movs	r2, #4
 8002616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd fe24 	bl	8000274 <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa3d 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fa4c 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b10      	cmp	r3, #16
 800264c:	d122      	bne.n	8002694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0210 	mvn.w	r2, #16
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2208      	movs	r2, #8
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fd fdfa 	bl	8000274 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa13 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fa22 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d10e      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0201 	mvn.w	r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f9ee 	bl	8002a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b80      	cmp	r3, #128	; 0x80
 80026cc:	d10e      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d107      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fd6b 	bl	80031c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	d10e      	bne.n	8002718 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d107      	bne.n	8002718 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f9e6 	bl	8002ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b20      	cmp	r3, #32
 8002724:	d10e      	bne.n	8002744 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b20      	cmp	r3, #32
 8002732:	d107      	bne.n	8002744 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0220 	mvn.w	r2, #32
 800273c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fd36 	bl	80031b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002766:	2302      	movs	r3, #2
 8002768:	e088      	b.n	800287c <HAL_TIM_IC_ConfigChannel+0x130>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11b      	bne.n	80027b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002788:	f000 faf8 	bl	8002d7c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 020c 	bic.w	r2, r2, #12
 800279a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6999      	ldr	r1, [r3, #24]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	619a      	str	r2, [r3, #24]
 80027ae:	e060      	b.n	8002872 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d11c      	bne.n	80027f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80027c6:	f000 fb5b 	bl	8002e80 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6999      	ldr	r1, [r3, #24]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]
 80027ee:	e040      	b.n	8002872 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11b      	bne.n	800282e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002806:	f000 fba6 	bl	8002f56 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 020c 	bic.w	r2, r2, #12
 8002818:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69d9      	ldr	r1, [r3, #28]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	61da      	str	r2, [r3, #28]
 800282c:	e021      	b.n	8002872 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d11c      	bne.n	800286e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002844:	f000 fbc2 	bl	8002fcc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002856:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69d9      	ldr	r1, [r3, #28]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	021a      	lsls	r2, r3, #8
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	61da      	str	r2, [r3, #28]
 800286c:	e001      	b.n	8002872 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800287a:	7dfb      	ldrb	r3, [r7, #23]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIM_ConfigClockSource+0x1c>
 800289c:	2302      	movs	r3, #2
 800289e:	e0b4      	b.n	8002a0a <HAL_TIM_ConfigClockSource+0x186>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d8:	d03e      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0xd4>
 80028da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028de:	f200 8087 	bhi.w	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	f000 8086 	beq.w	80029f6 <HAL_TIM_ConfigClockSource+0x172>
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ee:	d87f      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 80028f0:	2b70      	cmp	r3, #112	; 0x70
 80028f2:	d01a      	beq.n	800292a <HAL_TIM_ConfigClockSource+0xa6>
 80028f4:	2b70      	cmp	r3, #112	; 0x70
 80028f6:	d87b      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 80028f8:	2b60      	cmp	r3, #96	; 0x60
 80028fa:	d050      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x11a>
 80028fc:	2b60      	cmp	r3, #96	; 0x60
 80028fe:	d877      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b50      	cmp	r3, #80	; 0x50
 8002902:	d03c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0xfa>
 8002904:	2b50      	cmp	r3, #80	; 0x50
 8002906:	d873      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b40      	cmp	r3, #64	; 0x40
 800290a:	d058      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x13a>
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d86f      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b30      	cmp	r3, #48	; 0x30
 8002912:	d064      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x15a>
 8002914:	2b30      	cmp	r3, #48	; 0x30
 8002916:	d86b      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b20      	cmp	r3, #32
 800291a:	d060      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x15a>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d867      	bhi.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05c      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x15a>
 8002924:	2b10      	cmp	r3, #16
 8002926:	d05a      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	e062      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800293a:	f000 fb9d 	bl	8003078 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800294c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	609a      	str	r2, [r3, #8]
      break;
 8002956:	e04f      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002968:	f000 fb86 	bl	8003078 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800297a:	609a      	str	r2, [r3, #8]
      break;
 800297c:	e03c      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298a:	461a      	mov	r2, r3
 800298c:	f000 fa4a 	bl	8002e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2150      	movs	r1, #80	; 0x50
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fb54 	bl	8003044 <TIM_ITRx_SetConfig>
      break;
 800299c:	e02c      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 faa4 	bl	8002ef8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2160      	movs	r1, #96	; 0x60
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fb44 	bl	8003044 <TIM_ITRx_SetConfig>
      break;
 80029bc:	e01c      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 fa2a 	bl	8002e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2140      	movs	r1, #64	; 0x40
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fb34 	bl	8003044 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e00c      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f000 fb2b 	bl	8003044 <TIM_ITRx_SetConfig>
      break;
 80029ee:	e003      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      break;
 80029f4:	e000      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d831      	bhi.n	8002a8c <HAL_TIM_ReadCapturedValue+0x78>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a65 	.word	0x08002a65
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a6f 	.word	0x08002a6f
 8002a44:	08002a8d 	.word	0x08002a8d
 8002a48:	08002a8d 	.word	0x08002a8d
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a8d 	.word	0x08002a8d
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002a8d 	.word	0x08002a8d
 8002a60:	08002a83 	.word	0x08002a83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	60fb      	str	r3, [r7, #12]

      break;
 8002a6c:	e00f      	b.n	8002a8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	60fb      	str	r3, [r7, #12]

      break;
 8002a76:	e00a      	b.n	8002a8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	60fb      	str	r3, [r7, #12]

      break;
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	60fb      	str	r3, [r7, #12]

      break;
 8002a8a:	e000      	b.n	8002a8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002a8c:	bf00      	nop
  }

  return tmpreg;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop

08002a9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d107      	bne.n	8002b30 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2e:	e02a      	b.n	8002b86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d107      	bne.n	8002b4a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b48:	e01d      	b.n	8002b86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2204      	movs	r2, #4
 8002b58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b62:	e010      	b.n	8002b86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d107      	bne.n	8002b7e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2208      	movs	r2, #8
 8002b72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b7c:	e003      	b.n	8002b86 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff ffb5 	bl	8002af6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	771a      	strb	r2, [r3, #28]
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d10f      	bne.n	8002bd2 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d146      	bne.n	8002c4e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd0:	e03d      	b.n	8002c4e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d10f      	bne.n	8002bfc <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2202      	movs	r2, #2
 8002be0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d131      	bne.n	8002c4e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bfa:	e028      	b.n	8002c4e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d10f      	bne.n	8002c26 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11c      	bne.n	8002c4e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c24:	e013      	b.n	8002c4e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d10e      	bne.n	8002c4e <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2208      	movs	r2, #8
 8002c34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7fd fb10 	bl	8000274 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	771a      	strb	r2, [r3, #28]
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d103      	bne.n	8002c82 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	771a      	strb	r2, [r3, #28]
 8002c80:	e019      	b.n	8002cb6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d103      	bne.n	8002c94 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	771a      	strb	r2, [r3, #28]
 8002c92:	e010      	b.n	8002cb6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d103      	bne.n	8002ca6 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	771a      	strb	r2, [r3, #28]
 8002ca4:	e007      	b.n	8002cb6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d102      	bne.n	8002cb6 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ff02 	bl	8002ac0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	771a      	strb	r2, [r3, #28]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <TIM_Base_SetConfig+0xa8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <TIM_Base_SetConfig+0x28>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0x28>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <TIM_Base_SetConfig+0xac>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <TIM_Base_SetConfig+0xa8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <TIM_Base_SetConfig+0x52>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d003      	beq.n	8002d1e <TIM_Base_SetConfig+0x52>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <TIM_Base_SetConfig+0xac>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <TIM_Base_SetConfig+0xa8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d103      	bne.n	8002d64 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	615a      	str	r2, [r3, #20]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400

08002d7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f023 0201 	bic.w	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <TIM_TI1_SetConfig+0xa0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <TIM_TI1_SetConfig+0x3e>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d003      	beq.n	8002dba <TIM_TI1_SetConfig+0x3e>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <TIM_TI1_SetConfig+0xa4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <TIM_TI1_SetConfig+0x42>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <TIM_TI1_SetConfig+0x44>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e003      	b.n	8002dde <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f023 030a 	bic.w	r3, r3, #10
 8002df8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 030a 	and.w	r3, r3, #10
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400

08002e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 030a 	bic.w	r3, r3, #10
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f023 0210 	bic.w	r2, r3, #16
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	031b      	lsls	r3, r3, #12
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	621a      	str	r2, [r3, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0210 	bic.w	r2, r3, #16
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	031b      	lsls	r3, r3, #12
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	621a      	str	r2, [r3, #32]
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b087      	sub	sp, #28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f92:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800300a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	031b      	lsls	r3, r3, #12
 8003010:	b29b      	uxth	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800301e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	f043 0307 	orr.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	609a      	str	r2, [r3, #8]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	431a      	orrs	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	2201      	movs	r2, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1a      	ldr	r2, [r3, #32]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	401a      	ands	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	431a      	orrs	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003114:	2302      	movs	r3, #2
 8003116:	e041      	b.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d004      	beq.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10c      	bne.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4313      	orrs	r3, r2
 8003180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40000400 	.word	0x40000400

080031b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e042      	b.n	800326c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd fbc8 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f82b 	bl	8003274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800322c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800323c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800324c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032ae:	f023 030c 	bic.w	r3, r3, #12
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <UART_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7fe fd18 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	e002      	b.n	80032ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7fe fd00 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 80032e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009a      	lsls	r2, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <UART_SetConfig+0x118>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	0119      	lsls	r1, r3, #4
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <UART_SetConfig+0x118>)
 8003322:	fba3 0302 	umull	r0, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2064      	movs	r0, #100	; 0x64
 800332a:	fb00 f303 	mul.w	r3, r0, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	3332      	adds	r3, #50	; 0x32
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <UART_SetConfig+0x118>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	4419      	add	r1, r3
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009a      	lsls	r2, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fbb2 f2f3 	udiv	r2, r2, r3
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <UART_SetConfig+0x118>)
 800335a:	fba3 0302 	umull	r0, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2064      	movs	r0, #100	; 0x64
 8003362:	fb00 f303 	mul.w	r3, r0, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	3332      	adds	r3, #50	; 0x32
 800336c:	4a07      	ldr	r2, [pc, #28]	; (800338c <UART_SetConfig+0x118>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	440a      	add	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40013800 	.word	0x40013800
 800338c:	51eb851f 	.word	0x51eb851f

08003390 <memset>:
 8003390:	4603      	mov	r3, r0
 8003392:	4402      	add	r2, r0
 8003394:	4293      	cmp	r3, r2
 8003396:	d100      	bne.n	800339a <memset+0xa>
 8003398:	4770      	bx	lr
 800339a:	f803 1b01 	strb.w	r1, [r3], #1
 800339e:	e7f9      	b.n	8003394 <memset+0x4>

080033a0 <__libc_init_array>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	2600      	movs	r6, #0
 80033a4:	4d0c      	ldr	r5, [pc, #48]	; (80033d8 <__libc_init_array+0x38>)
 80033a6:	4c0d      	ldr	r4, [pc, #52]	; (80033dc <__libc_init_array+0x3c>)
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	42a6      	cmp	r6, r4
 80033ae:	d109      	bne.n	80033c4 <__libc_init_array+0x24>
 80033b0:	f000 f81a 	bl	80033e8 <_init>
 80033b4:	2600      	movs	r6, #0
 80033b6:	4d0a      	ldr	r5, [pc, #40]	; (80033e0 <__libc_init_array+0x40>)
 80033b8:	4c0a      	ldr	r4, [pc, #40]	; (80033e4 <__libc_init_array+0x44>)
 80033ba:	1b64      	subs	r4, r4, r5
 80033bc:	10a4      	asrs	r4, r4, #2
 80033be:	42a6      	cmp	r6, r4
 80033c0:	d105      	bne.n	80033ce <__libc_init_array+0x2e>
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c8:	4798      	blx	r3
 80033ca:	3601      	adds	r6, #1
 80033cc:	e7ee      	b.n	80033ac <__libc_init_array+0xc>
 80033ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d2:	4798      	blx	r3
 80033d4:	3601      	adds	r6, #1
 80033d6:	e7f2      	b.n	80033be <__libc_init_array+0x1e>
 80033d8:	0800342c 	.word	0x0800342c
 80033dc:	0800342c 	.word	0x0800342c
 80033e0:	0800342c 	.word	0x0800342c
 80033e4:	08003430 	.word	0x08003430

080033e8 <_init>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr

080033f4 <_fini>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	bf00      	nop
 80033f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fa:	bc08      	pop	{r3}
 80033fc:	469e      	mov	lr, r3
 80033fe:	4770      	bx	lr
