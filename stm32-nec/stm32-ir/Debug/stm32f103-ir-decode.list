
stm32f103-ir-decode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003938  08003938  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003938  08003938  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000010  08003950  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003950  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1e1  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d96  00000000  00000000  0002c25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000999  00000000  00000000  0002ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017398  00000000  00000000  0002f5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df2f  00000000  00000000  00046961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000876a2  00000000  00000000  00054890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032d8  00000000  00000000  000dbf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000df20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080038e4 	.word	0x080038e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080038e4 	.word	0x080038e4

0800014c <irInit>:
	.state = NEC_INIT
};


bool irInit(IR_Format set_state)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if (nec.state != set_state)
 8000156:	4b2f      	ldr	r3, [pc, #188]	; (8000214 <irInit+0xc8>)
 8000158:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 800015c:	79fa      	ldrb	r2, [r7, #7]
 800015e:	429a      	cmp	r2, r3
 8000160:	d001      	beq.n	8000166 <irInit+0x1a>
		return false;
 8000162:	2300      	movs	r3, #0
 8000164:	e052      	b.n	800020c <irInit+0xc0>

	switch(set_state)
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b02      	cmp	r3, #2
 800016a:	d032      	beq.n	80001d2 <irInit+0x86>
 800016c:	2b02      	cmp	r3, #2
 800016e:	dc4b      	bgt.n	8000208 <irInit+0xbc>
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <irInit+0x2e>
 8000174:	2b01      	cmp	r3, #1
 8000176:	d013      	beq.n	80001a0 <irInit+0x54>
 8000178:	e046      	b.n	8000208 <irInit+0xbc>
	{
		case NEC_INIT :

			uint32_t* p_check_header_low = (uint32_t*)&nec.startL;
 800017a:	4b26      	ldr	r3, [pc, #152]	; (8000214 <irInit+0xc8>)
 800017c:	60fb      	str	r3, [r7, #12]
			uint32_t* p_check_header_high = (uint32_t*)&nec.startH;
 800017e:	4b26      	ldr	r3, [pc, #152]	; (8000218 <irInit+0xcc>)
 8000180:	60bb      	str	r3, [r7, #8]

			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, p_check_header_high, 1);
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <irInit+0xd0>)
 8000184:	6818      	ldr	r0, [r3, #0]
 8000186:	2301      	movs	r3, #1
 8000188:	68ba      	ldr	r2, [r7, #8]
 800018a:	2100      	movs	r1, #0
 800018c:	f002 f830 	bl	80021f0 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, p_check_header_low, 1);
 8000190:	4b22      	ldr	r3, [pc, #136]	; (800021c <irInit+0xd0>)
 8000192:	6818      	ldr	r0, [r3, #0]
 8000194:	2301      	movs	r3, #1
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	2104      	movs	r1, #4
 800019a:	f002 f829 	bl	80021f0 <HAL_TIM_IC_Start_DMA>

		break;
 800019e:	e035      	b.n	800020c <irInit+0xc0>

		case NEC_FORMAT :

			nec.state = set_state;
 80001a0:	4a1c      	ldr	r2, [pc, #112]	; (8000214 <irInit+0xc8>)
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	f882 30f9 	strb.w	r3, [r2, #249]	; 0xf9

			hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80001a8:	4b1d      	ldr	r3, [pc, #116]	; (8000220 <irInit+0xd4>)
 80001aa:	2220      	movs	r2, #32
 80001ac:	619a      	str	r2, [r3, #24]
			hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80001ae:	4b1d      	ldr	r3, [pc, #116]	; (8000224 <irInit+0xd8>)
 80001b0:	2220      	movs	r2, #32
 80001b2:	619a      	str	r2, [r3, #24]

			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, (uint32_t*)nec.edge_falling, MAX_NEC_PACKET_CNT);
 80001b4:	4b19      	ldr	r3, [pc, #100]	; (800021c <irInit+0xd0>)
 80001b6:	6818      	ldr	r0, [r3, #0]
 80001b8:	2321      	movs	r3, #33	; 0x21
 80001ba:	4a1b      	ldr	r2, [pc, #108]	; (8000228 <irInit+0xdc>)
 80001bc:	2100      	movs	r1, #0
 80001be:	f002 f817 	bl	80021f0 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, (uint32_t*)nec.edge_rising, MAX_NEC_PACKET_CNT);
 80001c2:	4b16      	ldr	r3, [pc, #88]	; (800021c <irInit+0xd0>)
 80001c4:	6818      	ldr	r0, [r3, #0]
 80001c6:	2321      	movs	r3, #33	; 0x21
 80001c8:	4a18      	ldr	r2, [pc, #96]	; (800022c <irInit+0xe0>)
 80001ca:	2104      	movs	r1, #4
 80001cc:	f002 f810 	bl	80021f0 <HAL_TIM_IC_Start_DMA>

		break;
 80001d0:	e01c      	b.n	800020c <irInit+0xc0>

		case NEC_REPEAT :

			HAL_TIM_IC_Stop_DMA(used_timer, TIM_CHANNEL_1);
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <irInit+0xd0>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f002 f991 	bl	8002500 <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_IC_Stop_DMA(used_timer, TIM_CHANNEL_2);
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <irInit+0xd0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2104      	movs	r1, #4
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 f98b 	bl	8002500 <HAL_TIM_IC_Stop_DMA>

			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, (uint32_t*)nec.repeatCheckL, 2);
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <irInit+0xd0>)
 80001ec:	6818      	ldr	r0, [r3, #0]
 80001ee:	2302      	movs	r3, #2
 80001f0:	4a0f      	ldr	r2, [pc, #60]	; (8000230 <irInit+0xe4>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	f001 fffc 	bl	80021f0 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, (uint32_t*)nec.repeatCheckH, 2);
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <irInit+0xd0>)
 80001fa:	6818      	ldr	r0, [r3, #0]
 80001fc:	2302      	movs	r3, #2
 80001fe:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <irInit+0xe8>)
 8000200:	2104      	movs	r1, #4
 8000202:	f001 fff5 	bl	80021f0 <HAL_TIM_IC_Start_DMA>

			break;
 8000206:	e001      	b.n	800020c <irInit+0xc0>

		default :
			return false;
 8000208:	2300      	movs	r3, #0
 800020a:	e7ff      	b.n	800020c <irInit+0xc0>
			break;
	}
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000002c 	.word	0x2000002c
 8000218:	2000002e 	.word	0x2000002e
 800021c:	20000000 	.word	0x20000000
 8000220:	20000170 	.word	0x20000170
 8000224:	200001b4 	.word	0x200001b4
 8000228:	20000030 	.word	0x20000030
 800022c:	20000072 	.word	0x20000072
 8000230:	2000011c 	.word	0x2000011c
 8000234:	20000120 	.word	0x20000120

08000238 <irReset>:


void irReset()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Stop_DMA(used_timer, TIM_CHANNEL_1);
 800023c:	4b23      	ldr	r3, [pc, #140]	; (80002cc <irReset+0x94>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 f95c 	bl	8002500 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(used_timer, TIM_CHANNEL_2);
 8000248:	4b20      	ldr	r3, [pc, #128]	; (80002cc <irReset+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2104      	movs	r1, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f002 f956 	bl	8002500 <HAL_TIM_IC_Stop_DMA>
	nec.state = NEC_INIT;
 8000254:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <irReset+0x98>)
 8000256:	2200      	movs	r2, #0
 8000258:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
	nec.taskFlag = false;
 800025c:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <irReset+0x98>)
 800025e:	2200      	movs	r2, #0
 8000260:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	nec.cap_cnt = 0;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <irReset+0x98>)
 8000266:	2200      	movs	r2, #0
 8000268:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	nec.startL = 0;
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <irReset+0x98>)
 800026e:	2200      	movs	r2, #0
 8000270:	801a      	strh	r2, [r3, #0]
	nec.startH = 0;
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <irReset+0x98>)
 8000274:	2200      	movs	r2, #0
 8000276:	805a      	strh	r2, [r3, #2]
	nec.isInit = false;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <irReset+0x98>)
 800027a:	2200      	movs	r2, #0
 800027c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	memset(nec.repeatCheckH, 0, sizeof(uint16_t) * 2);
 8000280:	2204      	movs	r2, #4
 8000282:	2100      	movs	r1, #0
 8000284:	4813      	ldr	r0, [pc, #76]	; (80002d4 <irReset+0x9c>)
 8000286:	f003 fb01 	bl	800388c <memset>
	memset(nec.repeatCheckL, 0, sizeof(uint16_t) * 2);
 800028a:	2204      	movs	r2, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4812      	ldr	r0, [pc, #72]	; (80002d8 <irReset+0xa0>)
 8000290:	f003 fafc 	bl	800388c <memset>
	memset(nec.edge_rising, 0, sizeof(uint16_t) * MAX_NEC_PACKET_CNT);
 8000294:	2242      	movs	r2, #66	; 0x42
 8000296:	2100      	movs	r1, #0
 8000298:	4810      	ldr	r0, [pc, #64]	; (80002dc <irReset+0xa4>)
 800029a:	f003 faf7 	bl	800388c <memset>
	memset(nec.edge_falling, 0, sizeof(uint16_t) * MAX_NEC_PACKET_CNT);
 800029e:	2242      	movs	r2, #66	; 0x42
 80002a0:	2100      	movs	r1, #0
 80002a2:	480f      	ldr	r0, [pc, #60]	; (80002e0 <irReset+0xa8>)
 80002a4:	f003 faf2 	bl	800388c <memset>
	memset(nec.raw_capture, 0, sizeof(uint16_t) * MAX_NEC_PACKET_CNT);
 80002a8:	2242      	movs	r2, #66	; 0x42
 80002aa:	2100      	movs	r1, #0
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <irReset+0xac>)
 80002ae:	f003 faed 	bl	800388c <memset>
	memset(nec.data, 0, MAX_NEC_PACKET_CNT-1);
 80002b2:	2220      	movs	r2, #32
 80002b4:	2100      	movs	r1, #0
 80002b6:	480c      	ldr	r0, [pc, #48]	; (80002e8 <irReset+0xb0>)
 80002b8:	f003 fae8 	bl	800388c <memset>
	memset(nec.decoded, 0, 4);
 80002bc:	2204      	movs	r2, #4
 80002be:	2100      	movs	r1, #0
 80002c0:	480a      	ldr	r0, [pc, #40]	; (80002ec <irReset+0xb4>)
 80002c2:	f003 fae3 	bl	800388c <memset>

}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000000 	.word	0x20000000
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	20000120 	.word	0x20000120
 80002d8:	2000011c 	.word	0x2000011c
 80002dc:	20000072 	.word	0x20000072
 80002e0:	20000030 	.word	0x20000030
 80002e4:	200000b4 	.word	0x200000b4
 80002e8:	200000f6 	.word	0x200000f6
 80002ec:	20000116 	.word	0x20000116

080002f0 <irStart>:

void irStart()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if (used_timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80002f4:	4b23      	ldr	r3, [pc, #140]	; (8000384 <irStart+0x94>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	7f1b      	ldrb	r3, [r3, #28]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d132      	bne.n	8000364 <irStart+0x74>
	{
		if (nec.startL)
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <irStart+0x98>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d01b      	beq.n	800033e <irStart+0x4e>
		{
			if ((nec.startH > 4300 && nec.startH < 4700) && (nec.startL > 8800 && nec.startL < 9200))
 8000306:	4b20      	ldr	r3, [pc, #128]	; (8000388 <irStart+0x98>)
 8000308:	885b      	ldrh	r3, [r3, #2]
 800030a:	f241 02cc 	movw	r2, #4300	; 0x10cc
 800030e:	4293      	cmp	r3, r2
 8000310:	d923      	bls.n	800035a <irStart+0x6a>
 8000312:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <irStart+0x98>)
 8000314:	885b      	ldrh	r3, [r3, #2]
 8000316:	f241 225b 	movw	r2, #4699	; 0x125b
 800031a:	4293      	cmp	r3, r2
 800031c:	d81d      	bhi.n	800035a <irStart+0x6a>
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <irStart+0x98>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	f242 2260 	movw	r2, #8800	; 0x2260
 8000326:	4293      	cmp	r3, r2
 8000328:	d917      	bls.n	800035a <irStart+0x6a>
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <irStart+0x98>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f242 32ef 	movw	r2, #9199	; 0x23ef
 8000332:	4293      	cmp	r3, r2
 8000334:	d811      	bhi.n	800035a <irStart+0x6a>
			{
				irInit(NEC_FORMAT);
 8000336:	2001      	movs	r0, #1
 8000338:	f7ff ff08 	bl	800014c <irInit>
 800033c:	e00d      	b.n	800035a <irStart+0x6a>
			}
		}
		else
		{
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, (uint32_t*)&nec.startH, 1);
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <irStart+0x94>)
 8000340:	6818      	ldr	r0, [r3, #0]
 8000342:	2301      	movs	r3, #1
 8000344:	4a11      	ldr	r2, [pc, #68]	; (800038c <irStart+0x9c>)
 8000346:	2100      	movs	r1, #0
 8000348:	f001 ff52 	bl	80021f0 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, (uint32_t*)&nec.startL, 1);
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <irStart+0x94>)
 800034e:	6818      	ldr	r0, [r3, #0]
 8000350:	2301      	movs	r3, #1
 8000352:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <irStart+0x98>)
 8000354:	2104      	movs	r1, #4
 8000356:	f001 ff4b 	bl	80021f0 <HAL_TIM_IC_Start_DMA>
		}
		TIM2->CNT = 0;
 800035a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	; 0x24
 8000362:	e008      	b.n	8000376 <irStart+0x86>
	}
	else if (used_timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <irStart+0x94>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	7f1b      	ldrb	r3, [r3, #28]
 800036a:	2b02      	cmp	r3, #2
 800036c:	d103      	bne.n	8000376 <irStart+0x86>
	{
		TIM2->CNT = 0;
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
	}

	nec.taskFlag = true;
 8000376:	4b04      	ldr	r3, [pc, #16]	; (8000388 <irStart+0x98>)
 8000378:	2201      	movs	r2, #1
 800037a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000000 	.word	0x20000000
 8000388:	2000002c 	.word	0x2000002c
 800038c:	2000002e 	.word	0x2000002e

08000390 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <HAL_TIM_IC_CaptureCallback+0x58>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d11e      	bne.n	80003de <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		switch (nec.state)
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_TIM_IC_CaptureCallback+0x5c>)
 80003a2:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d016      	beq.n	80003d8 <HAL_TIM_IC_CaptureCallback+0x48>
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	dc17      	bgt.n	80003de <HAL_TIM_IC_CaptureCallback+0x4e>
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <HAL_TIM_IC_CaptureCallback+0x28>
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d003      	beq.n	80003be <HAL_TIM_IC_CaptureCallback+0x2e>


			break;
		}
	}
}
 80003b6:	e012      	b.n	80003de <HAL_TIM_IC_CaptureCallback+0x4e>
				irStart();
 80003b8:	f7ff ff9a 	bl	80002f0 <irStart>
			break;
 80003bc:	e00f      	b.n	80003de <HAL_TIM_IC_CaptureCallback+0x4e>
				if (nec.taskFlag != true)
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <HAL_TIM_IC_CaptureCallback+0x5c>)
 80003c0:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80003c4:	f083 0301 	eor.w	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d006      	beq.n	80003dc <HAL_TIM_IC_CaptureCallback+0x4c>
					nec.taskFlag = true;
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <HAL_TIM_IC_CaptureCallback+0x5c>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			break;
 80003d6:	e001      	b.n	80003dc <HAL_TIM_IC_CaptureCallback+0x4c>
			break;
 80003d8:	bf00      	nop
 80003da:	e000      	b.n	80003de <HAL_TIM_IC_CaptureCallback+0x4e>
			break;
 80003dc:	bf00      	nop
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000128 	.word	0x20000128
 80003ec:	2000002c 	.word	0x2000002c

080003f0 <irGetData>:
void irGetData()
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
	volatile uint8_t i = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	71fb      	strb	r3, [r7, #7]

	for (nec.cap_cnt=0; nec.cap_cnt < MAX_NEC_PACKET_CNT; nec.cap_cnt++)
 80003fa:	4b61      	ldr	r3, [pc, #388]	; (8000580 <irGetData+0x190>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8000402:	e0ad      	b.n	8000560 <irGetData+0x170>
	{
		if (nec.edge_rising[nec.cap_cnt] < nec.edge_falling[nec.cap_cnt])
 8000404:	4b5e      	ldr	r3, [pc, #376]	; (8000580 <irGetData+0x190>)
 8000406:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800040a:	b2db      	uxtb	r3, r3
 800040c:	4a5c      	ldr	r2, [pc, #368]	; (8000580 <irGetData+0x190>)
 800040e:	3320      	adds	r3, #32
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	4413      	add	r3, r2
 8000414:	88da      	ldrh	r2, [r3, #6]
 8000416:	4b5a      	ldr	r3, [pc, #360]	; (8000580 <irGetData+0x190>)
 8000418:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800041c:	b2db      	uxtb	r3, r3
 800041e:	4958      	ldr	r1, [pc, #352]	; (8000580 <irGetData+0x190>)
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	440b      	add	r3, r1
 8000424:	889b      	ldrh	r3, [r3, #4]
 8000426:	429a      	cmp	r2, r3
 8000428:	d21d      	bcs.n	8000466 <irGetData+0x76>
		{
			nec.raw_capture[nec.cap_cnt] = nec.edge_falling[nec.cap_cnt] - nec.edge_rising[nec.cap_cnt];
 800042a:	4b55      	ldr	r3, [pc, #340]	; (8000580 <irGetData+0x190>)
 800042c:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4a53      	ldr	r2, [pc, #332]	; (8000580 <irGetData+0x190>)
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4413      	add	r3, r2
 8000438:	889a      	ldrh	r2, [r3, #4]
 800043a:	4b51      	ldr	r3, [pc, #324]	; (8000580 <irGetData+0x190>)
 800043c:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000440:	b2db      	uxtb	r3, r3
 8000442:	494f      	ldr	r1, [pc, #316]	; (8000580 <irGetData+0x190>)
 8000444:	3320      	adds	r3, #32
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	440b      	add	r3, r1
 800044a:	88db      	ldrh	r3, [r3, #6]
 800044c:	494c      	ldr	r1, [pc, #304]	; (8000580 <irGetData+0x190>)
 800044e:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
 8000452:	b2c9      	uxtb	r1, r1
 8000454:	4608      	mov	r0, r1
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	b299      	uxth	r1, r3
 800045a:	4a49      	ldr	r2, [pc, #292]	; (8000580 <irGetData+0x190>)
 800045c:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8000460:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000464:	e02f      	b.n	80004c6 <irGetData+0xd6>
		}
		else if (nec.edge_rising[nec.cap_cnt] > nec.edge_falling[nec.cap_cnt])
 8000466:	4b46      	ldr	r3, [pc, #280]	; (8000580 <irGetData+0x190>)
 8000468:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4a44      	ldr	r2, [pc, #272]	; (8000580 <irGetData+0x190>)
 8000470:	3320      	adds	r3, #32
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	88da      	ldrh	r2, [r3, #6]
 8000478:	4b41      	ldr	r3, [pc, #260]	; (8000580 <irGetData+0x190>)
 800047a:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800047e:	b2db      	uxtb	r3, r3
 8000480:	493f      	ldr	r1, [pc, #252]	; (8000580 <irGetData+0x190>)
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	440b      	add	r3, r1
 8000486:	889b      	ldrh	r3, [r3, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	d91c      	bls.n	80004c6 <irGetData+0xd6>
		{
			nec.raw_capture[nec.cap_cnt] = nec.edge_rising[nec.cap_cnt] - nec.edge_falling[nec.cap_cnt];
 800048c:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <irGetData+0x190>)
 800048e:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4a3a      	ldr	r2, [pc, #232]	; (8000580 <irGetData+0x190>)
 8000496:	3320      	adds	r3, #32
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	4413      	add	r3, r2
 800049c:	88da      	ldrh	r2, [r3, #6]
 800049e:	4b38      	ldr	r3, [pc, #224]	; (8000580 <irGetData+0x190>)
 80004a0:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4936      	ldr	r1, [pc, #216]	; (8000580 <irGetData+0x190>)
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	440b      	add	r3, r1
 80004ac:	889b      	ldrh	r3, [r3, #4]
 80004ae:	4934      	ldr	r1, [pc, #208]	; (8000580 <irGetData+0x190>)
 80004b0:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
 80004b4:	b2c9      	uxtb	r1, r1
 80004b6:	4608      	mov	r0, r1
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	b299      	uxth	r1, r3
 80004bc:	4a30      	ldr	r2, [pc, #192]	; (8000580 <irGetData+0x190>)
 80004be:	f100 0344 	add.w	r3, r0, #68	; 0x44
 80004c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (nec.raw_capture[nec.cap_cnt] > 1550 && nec.raw_capture[nec.cap_cnt] < 1750)
 80004c6:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <irGetData+0x190>)
 80004c8:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4a2c      	ldr	r2, [pc, #176]	; (8000580 <irGetData+0x190>)
 80004d0:	3344      	adds	r3, #68	; 0x44
 80004d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d6:	f240 620e 	movw	r2, #1550	; 0x60e
 80004da:	4293      	cmp	r3, r2
 80004dc:	d914      	bls.n	8000508 <irGetData+0x118>
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <irGetData+0x190>)
 80004e0:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4a26      	ldr	r2, [pc, #152]	; (8000580 <irGetData+0x190>)
 80004e8:	3344      	adds	r3, #68	; 0x44
 80004ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ee:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d808      	bhi.n	8000508 <irGetData+0x118>
		{
			nec.data[i] = 1;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <irGetData+0x190>)
 80004fe:	4413      	add	r3, r2
 8000500:	2201      	movs	r2, #1
 8000502:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8000506:	e01d      	b.n	8000544 <irGetData+0x154>
		}
		else if (nec.raw_capture[nec.cap_cnt] > 500 && nec.raw_capture[nec.cap_cnt] < 600)
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <irGetData+0x190>)
 800050a:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <irGetData+0x190>)
 8000512:	3344      	adds	r3, #68	; 0x44
 8000514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000518:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800051c:	d912      	bls.n	8000544 <irGetData+0x154>
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <irGetData+0x190>)
 8000520:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4a16      	ldr	r2, [pc, #88]	; (8000580 <irGetData+0x190>)
 8000528:	3344      	adds	r3, #68	; 0x44
 800052a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000532:	d207      	bcs.n	8000544 <irGetData+0x154>
		{
			nec.data[i] = 0;
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <irGetData+0x190>)
 800053c:	4413      	add	r3, r2
 800053e:	2200      	movs	r2, #0
 8000540:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		}
		i++;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	3301      	adds	r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	71fb      	strb	r3, [r7, #7]
	for (nec.cap_cnt=0; nec.cap_cnt < MAX_NEC_PACKET_CNT; nec.cap_cnt++)
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <irGetData+0x190>)
 8000550:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000554:	b2db      	uxtb	r3, r3
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <irGetData+0x190>)
 800055c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <irGetData+0x190>)
 8000562:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b20      	cmp	r3, #32
 800056a:	f67f af4b 	bls.w	8000404 <irGetData+0x14>
	}
	nec.taskFlag = false;
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <irGetData+0x190>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	2000002c 	.word	0x2000002c

08000584 <irDataDecode>:


void irDataDecode()
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	volatile int8_t i = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	71bb      	strb	r3, [r7, #6]
	volatile int8_t j = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	717b      	strb	r3, [r7, #5]

	bool decodeEnd = false;
 8000592:	2300      	movs	r3, #0
 8000594:	71fb      	strb	r3, [r7, #7]

	while(!decodeEnd)
 8000596:	e05d      	b.n	8000654 <irDataDecode+0xd0>
	{
		if ((nec.decoded[0] == ~(nec.decoded[1])) && (nec.decoded[2] == ~(nec.decoded[3])))
 8000598:	4b34      	ldr	r3, [pc, #208]	; (800066c <irDataDecode+0xe8>)
 800059a:	f993 30ea 	ldrsb.w	r3, [r3, #234]	; 0xea
 800059e:	461a      	mov	r2, r3
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <irDataDecode+0xe8>)
 80005a2:	f993 30eb 	ldrsb.w	r3, [r3, #235]	; 0xeb
 80005a6:	43db      	mvns	r3, r3
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d10c      	bne.n	80005c6 <irDataDecode+0x42>
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <irDataDecode+0xe8>)
 80005ae:	f993 30ec 	ldrsb.w	r3, [r3, #236]	; 0xec
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b2d      	ldr	r3, [pc, #180]	; (800066c <irDataDecode+0xe8>)
 80005b6:	f993 30ed 	ldrsb.w	r3, [r3, #237]	; 0xed
 80005ba:	43db      	mvns	r3, r3
 80005bc:	429a      	cmp	r2, r3
 80005be:	d102      	bne.n	80005c6 <irDataDecode+0x42>
		{
			decodeEnd = true;
 80005c0:	2301      	movs	r3, #1
 80005c2:	71fb      	strb	r3, [r7, #7]
			break;
 80005c4:	e04d      	b.n	8000662 <irDataDecode+0xde>
		}

		for (j=0; j<4; j++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	717b      	strb	r3, [r7, #5]
 80005ca:	e03f      	b.n	800064c <irDataDecode+0xc8>
		{
			for (i=8*j; i<(8*j+8); i++)
 80005cc:	797b      	ldrb	r3, [r7, #5]
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	71bb      	strb	r3, [r7, #6]
 80005da:	e027      	b.n	800062c <irDataDecode+0xa8>
			{
				nec.decoded[j] += (nec.data[i] << (8*j+7-i));
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <irDataDecode+0xe8>)
 80005e4:	4413      	add	r3, r2
 80005e6:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80005ea:	461a      	mov	r2, r3
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	3307      	adds	r3, #7
 80005f4:	79b9      	ldrb	r1, [r7, #6]
 80005f6:	b249      	sxtb	r1, r1
 80005f8:	1a5b      	subs	r3, r3, r1
 80005fa:	fa02 f003 	lsl.w	r0, r2, r3
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	b259      	sxtb	r1, r3
 8000602:	460a      	mov	r2, r1
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <irDataDecode+0xe8>)
 8000606:	4413      	add	r3, r2
 8000608:	f993 30ea 	ldrsb.w	r3, [r3, #234]	; 0xea
 800060c:	b2da      	uxtb	r2, r3
 800060e:	b2c3      	uxtb	r3, r0
 8000610:	4413      	add	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	b25a      	sxtb	r2, r3
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <irDataDecode+0xe8>)
 8000618:	440b      	add	r3, r1
 800061a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
			for (i=8*j; i<(8*j+8); i++)
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	3301      	adds	r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	b25b      	sxtb	r3, r3
 800062a:	71bb      	strb	r3, [r7, #6]
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	b25b      	sxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	b25b      	sxtb	r3, r3
 8000636:	3301      	adds	r3, #1
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	429a      	cmp	r2, r3
 800063c:	dbce      	blt.n	80005dc <irDataDecode+0x58>
		for (j=0; j<4; j++)
 800063e:	797b      	ldrb	r3, [r7, #5]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3301      	adds	r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	b25b      	sxtb	r3, r3
 800064a:	717b      	strb	r3, [r7, #5]
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	2b03      	cmp	r3, #3
 8000652:	ddbb      	ble.n	80005cc <irDataDecode+0x48>
	while(!decodeEnd)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f083 0301 	eor.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d19b      	bne.n	8000598 <irDataDecode+0x14>
			}
		}
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	2000002c 	.word	0x2000002c

08000670 <irShowDecoded>:

void irShowDecoded()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	for (uint8_t txIdx=0; txIdx < 4; txIdx++)
 8000676:	2300      	movs	r3, #0
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	e018      	b.n	80006ae <irShowDecoded+0x3e>
	{
		HAL_UART_Transmit(&huart2, "decoded : ", sizeof("decoded : "), 100);
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	220b      	movs	r2, #11
 8000680:	490f      	ldr	r1, [pc, #60]	; (80006c0 <irShowDecoded+0x50>)
 8000682:	4810      	ldr	r0, [pc, #64]	; (80006c4 <irShowDecoded+0x54>)
 8000684:	f002 fd16 	bl	80030b4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &nec.decoded[txIdx], 1, 100);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	33e8      	adds	r3, #232	; 0xe8
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <irShowDecoded+0x58>)
 800068e:	4413      	add	r3, r2
 8000690:	1c99      	adds	r1, r3, #2
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	2201      	movs	r2, #1
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <irShowDecoded+0x54>)
 8000698:	f002 fd0c 	bl	80030b4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\r\n", sizeof("\r\n"), 100);
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	2203      	movs	r2, #3
 80006a0:	490a      	ldr	r1, [pc, #40]	; (80006cc <irShowDecoded+0x5c>)
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <irShowDecoded+0x54>)
 80006a4:	f002 fd06 	bl	80030b4 <HAL_UART_Transmit>
	for (uint8_t txIdx=0; txIdx < 4; txIdx++)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	3301      	adds	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d9e3      	bls.n	800067c <irShowDecoded+0xc>
	}

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	080038fc 	.word	0x080038fc
 80006c4:	200001f8 	.word	0x200001f8
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	08003908 	.word	0x08003908

080006d0 <irTask>:

bool irTask()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t rxBuf=0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

	// Task Lock : only go into isInit == false
	if (!nec.isInit)
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <irTask+0x74>)
 80006dc:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 80006e0:	f083 0301 	eor.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d027      	beq.n	800073a <irTask+0x6a>
	{
		irInit(NEC_INIT);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff fd2e 	bl	800014c <irInit>
		nec.isInit = true;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <irTask+0x74>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef

		if (nec.taskFlag && nec.isInit)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <irTask+0x74>)
 80006fa:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d017      	beq.n	8000732 <irTask+0x62>
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <irTask+0x74>)
 8000704:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 8000708:	2b00      	cmp	r3, #0
 800070a:	d012      	beq.n	8000732 <irTask+0x62>
		{
			irGetData();
 800070c:	f7ff fe70 	bl	80003f0 <irGetData>
			irDataDecode();
 8000710:	f7ff ff38 	bl	8000584 <irDataDecode>
			irInit(NEC_REPEAT);
 8000714:	2002      	movs	r0, #2
 8000716:	f7ff fd19 	bl	800014c <irInit>
			HAL_UART_Receive_DMA(&huart2, rxBuf, 1);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2201      	movs	r2, #1
 800071e:	4619      	mov	r1, r3
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <irTask+0x78>)
 8000722:	f002 fd4a 	bl	80031ba <HAL_UART_Receive_DMA>
			do
			{

				// reset flag rx

				irShowDecoded();
 8000726:	f7ff ffa3 	bl	8000670 <irShowDecoded>
				irReset();
 800072a:	f7ff fd85 	bl	8000238 <irReset>
				break;
 800072e:	bf00      	nop
		if (nec.taskFlag && nec.isInit)
 8000730:	e003      	b.n	800073a <irTask+0x6a>
	//			isInit = false;

		}
		else
		{
			nec.isInit = false;
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <irTask+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
		}
	}

}
 800073a:	bf00      	nop
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000002c 	.word	0x2000002c
 8000748:	200001f8 	.word	0x200001f8

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fb2c 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f80b 	bl	800076e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f924 	bl	80009a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800075c:	f000 f8f4 	bl	8000948 <MX_DMA_Init>
  MX_TIM2_Init();
 8000760:	f000 f84a 	bl	80007f8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000764:	f000 f8c6 	bl	80008f4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	irTask();
 8000768:	f7ff ffb2 	bl	80006d0 <irTask>
 800076c:	e7fc      	b.n	8000768 <main+0x1c>

0800076e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b090      	sub	sp, #64	; 0x40
 8000772:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	2228      	movs	r2, #40	; 0x28
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f003 f885 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f862 	bl	8001880 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007c2:	f000 f93b 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 facf 	bl	8001d84 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007ec:	f000 f926 	bl	8000a3c <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3740      	adds	r7, #64	; 0x40
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <MX_TIM2_Init+0xf8>)
 800082c:	222f      	movs	r2, #47	; 0x2f
 800082e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084a:	4829      	ldr	r0, [pc, #164]	; (80008f0 <MX_TIM2_Init+0xf8>)
 800084c:	f001 fc28 	bl	80020a0 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000856:	f000 f8f1 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4619      	mov	r1, r3
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000868:	f001 ffa8 	bl	80027bc <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000872:	f000 f8e3 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000876:	481e      	ldr	r0, [pc, #120]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000878:	f001 fc61 	bl	800213e <HAL_TIM_IC_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000882:	f000 f8db 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4816      	ldr	r0, [pc, #88]	; (80008f0 <MX_TIM2_Init+0xf8>)
 8000896:	f002 fb65 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80008a0:	f000 f8cc 	bl	8000a3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008a4:	2302      	movs	r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_TIM2_Init+0xf8>)
 80008bc:	f001 fee2 	bl	8002684 <HAL_TIM_IC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80008c6:	f000 f8b9 	bl	8000a3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80008ce:	2302      	movs	r3, #2
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2204      	movs	r2, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM2_Init+0xf8>)
 80008da:	f001 fed3 	bl	8002684 <HAL_TIM_IC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80008e4:	f000 f8aa 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000128 	.word	0x20000128

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART2_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800092c:	f002 fb72 	bl	8003014 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f881 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001f8 	.word	0x200001f8
 8000944:	40004400 	.word	0x40004400

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_DMA_Init+0x58>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <MX_DMA_Init+0x58>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_DMA_Init+0x58>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200f      	movs	r0, #15
 800096c:	f000 fb57 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000970:	200f      	movs	r0, #15
 8000972:	f000 fb70 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2010      	movs	r0, #16
 800097c:	f000 fb4f 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000980:	2010      	movs	r0, #16
 8000982:	f000 fb68 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2011      	movs	r0, #17
 800098c:	f000 fb47 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000990:	2011      	movs	r0, #17
 8000992:	f000 fb60 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009d6:	f043 0320 	orr.w	r3, r3, #32
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_GPIO_Init+0x94>)
 8000a08:	f000 ff22 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0x94>)
 8000a26:	f000 fd97 	bl	8001558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40011000 	.word	0x40011000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aca:	d179      	bne.n	8000bc0 <HAL_TIM_Base_MspInit+0x114>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000acc:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <HAL_TIM_Base_MspInit+0x11c>)
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <HAL_TIM_Base_MspInit+0x11c>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	61d3      	str	r3, [r2, #28]
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <HAL_TIM_Base_MspInit+0x11c>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <HAL_TIM_Base_MspInit+0x11c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <HAL_TIM_Base_MspInit+0x11c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <HAL_TIM_Base_MspInit+0x11c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afc:	2301      	movs	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	482f      	ldr	r0, [pc, #188]	; (8000bcc <HAL_TIM_Base_MspInit+0x120>)
 8000b10:	f000 fd22 	bl	8001558 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b16:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <HAL_TIM_Base_MspInit+0x128>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b32:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b48:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b4a:	f000 fa9f 	bl	800108c <HAL_DMA_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_TIM_Base_MspInit+0xac>
    {
      Error_Handler();
 8000b54:	f7ff ff72 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_TIM_Base_MspInit+0x124>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b66:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_TIM_Base_MspInit+0x130>)
 8000b68:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b82:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000b9a:	f000 fa77 	bl	800108c <HAL_DMA_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_TIM_Base_MspInit+0xfc>
    {
      Error_Handler();
 8000ba4:	f7ff ff4a 	bl	8000a3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_TIM_Base_MspInit+0x12c>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	20000170 	.word	0x20000170
 8000bd4:	40020058 	.word	0x40020058
 8000bd8:	200001b4 	.word	0x200001b4
 8000bdc:	40020080 	.word	0x40020080

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <HAL_UART_MspInit+0xd4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d155      	bne.n	8000cac <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_UART_MspInit+0xd8>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <HAL_UART_MspInit+0xd8>)
 8000c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0a:	61d3      	str	r3, [r2, #28]
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <HAL_UART_MspInit+0xd8>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <HAL_UART_MspInit+0xd8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <HAL_UART_MspInit+0xd8>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <HAL_UART_MspInit+0xd8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c30:	2304      	movs	r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	481e      	ldr	r0, [pc, #120]	; (8000cbc <HAL_UART_MspInit+0xdc>)
 8000c44:	f000 fc88 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4818      	ldr	r0, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0xdc>)
 8000c5c:	f000 fc7c 	bl	8001558 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_UART_MspInit+0xe4>)
 8000c64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c86:	2220      	movs	r2, #32
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000c92:	f000 f9fb 	bl	800108c <HAL_DMA_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000c9c:	f7ff fece 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000ca4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_UART_MspInit+0xe0>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	20000240 	.word	0x20000240
 8000cc4:	4002006c 	.word	0x4002006c

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0e:	f000 f893 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <DMA1_Channel5_IRQHandler+0x10>)
 8000d1e:	f000 fae7 	bl	80012f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000170 	.word	0x20000170

08000d2c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <DMA1_Channel6_IRQHandler+0x10>)
 8000d32:	f000 fadd 	bl	80012f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000240 	.word	0x20000240

08000d40 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA1_Channel7_IRQHandler+0x10>)
 8000d46:	f000 fad3 	bl	80012f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200001b4 	.word	0x200001b4

08000d54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d60:	f7ff fff8 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d66:	490c      	ldr	r1, [pc, #48]	; (8000d98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d7c:	4c09      	ldr	r4, [pc, #36]	; (8000da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f002 fd87 	bl	800389c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8e:	f7ff fcdd 	bl	800074c <main>
  bx lr
 8000d92:	4770      	bx	lr
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d9c:	08003940 	.word	0x08003940
  ldr r2, =_sbss
 8000da0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000da4:	20000288 	.word	0x20000288

08000da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_2_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_Init+0x28>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_Init+0x28>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f923 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fe3e 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f93b 	bl	8001072 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 f903 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000004 	.word	0x20000004
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	20000008 	.word	0x20000008

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000284 	.word	0x20000284

08000e5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	20000284 	.word	0x20000284

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4906      	ldr	r1, [pc, #24]	; (8000f08 <__NVIC_EnableIRQ+0x34>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff90 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff2d 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff42 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff90 	bl	8000f60 <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5f 	bl	8000f0c <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff35 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e043      	b.n	800112a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_DMA_Init+0xa8>)
 80010aa:	4413      	add	r3, r2
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <HAL_DMA_Init+0xac>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	009a      	lsls	r2, r3, #2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_DMA_Init+0xb0>)
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2202      	movs	r2, #2
 80010c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	bffdfff8 	.word	0xbffdfff8
 8001138:	cccccccd 	.word	0xcccccccd
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_DMA_Start_IT+0x20>
 800115c:	2302      	movs	r3, #2
 800115e:	e04b      	b.n	80011f8 <HAL_DMA_Start_IT+0xb8>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d13a      	bne.n	80011ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f9af 	bl	80014fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 020e 	orr.w	r2, r2, #14
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e00f      	b.n	80011d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0204 	bic.w	r2, r2, #4
 80011c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 020a 	orr.w	r2, r2, #10
 80011d6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e005      	b.n	80011f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011f2:	2302      	movs	r3, #2
 80011f4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d005      	beq.n	8001224 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2204      	movs	r2, #4
 800121c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e051      	b.n	80012c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020e 	bic.w	r2, r2, #14
 8001232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <HAL_DMA_Abort_IT+0xd4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d029      	beq.n	80012a2 <HAL_DMA_Abort_IT+0xa2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <HAL_DMA_Abort_IT+0xd8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d022      	beq.n	800129e <HAL_DMA_Abort_IT+0x9e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_DMA_Abort_IT+0xdc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01a      	beq.n	8001298 <HAL_DMA_Abort_IT+0x98>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_DMA_Abort_IT+0xe0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d012      	beq.n	8001292 <HAL_DMA_Abort_IT+0x92>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_DMA_Abort_IT+0xe4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00a      	beq.n	800128c <HAL_DMA_Abort_IT+0x8c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_DMA_Abort_IT+0xe8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d102      	bne.n	8001286 <HAL_DMA_Abort_IT+0x86>
 8001280:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001284:	e00e      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 8001286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800128a:	e00b      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 800128c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001290:	e008      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	e005      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	e002      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 800129e:	2310      	movs	r3, #16
 80012a0:	e000      	b.n	80012a4 <HAL_DMA_Abort_IT+0xa4>
 80012a2:	2301      	movs	r3, #1
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_DMA_Abort_IT+0xec>)
 80012a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
    } 
  }
  return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020008 	.word	0x40020008
 80012d8:	4002001c 	.word	0x4002001c
 80012dc:	40020030 	.word	0x40020030
 80012e0:	40020044 	.word	0x40020044
 80012e4:	40020058 	.word	0x40020058
 80012e8:	4002006c 	.word	0x4002006c
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	2204      	movs	r2, #4
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d04f      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xc8>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d04a      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0204 	bic.w	r2, r2, #4
 800133e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a66      	ldr	r2, [pc, #408]	; (80014e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d029      	beq.n	800139e <HAL_DMA_IRQHandler+0xae>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d022      	beq.n	800139a <HAL_DMA_IRQHandler+0xaa>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a63      	ldr	r2, [pc, #396]	; (80014e8 <HAL_DMA_IRQHandler+0x1f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d01a      	beq.n	8001394 <HAL_DMA_IRQHandler+0xa4>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a62      	ldr	r2, [pc, #392]	; (80014ec <HAL_DMA_IRQHandler+0x1fc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d012      	beq.n	800138e <HAL_DMA_IRQHandler+0x9e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_DMA_IRQHandler+0x200>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00a      	beq.n	8001388 <HAL_DMA_IRQHandler+0x98>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5f      	ldr	r2, [pc, #380]	; (80014f4 <HAL_DMA_IRQHandler+0x204>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d102      	bne.n	8001382 <HAL_DMA_IRQHandler+0x92>
 800137c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001380:	e00e      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 8001382:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001386:	e00b      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 8001388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800138c:	e008      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 800138e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001392:	e005      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 8001394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001398:	e002      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 800139a:	2340      	movs	r3, #64	; 0x40
 800139c:	e000      	b.n	80013a0 <HAL_DMA_IRQHandler+0xb0>
 800139e:	2304      	movs	r3, #4
 80013a0:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_DMA_IRQHandler+0x208>)
 80013a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 8094 	beq.w	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013b6:	e08e      	b.n	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2202      	movs	r2, #2
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d056      	beq.n	8001476 <HAL_DMA_IRQHandler+0x186>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d051      	beq.n	8001476 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10b      	bne.n	80013f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 020a 	bic.w	r2, r2, #10
 80013ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_DMA_IRQHandler+0x1f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d029      	beq.n	8001456 <HAL_DMA_IRQHandler+0x166>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a37      	ldr	r2, [pc, #220]	; (80014e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <HAL_DMA_IRQHandler+0x162>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a35      	ldr	r2, [pc, #212]	; (80014e8 <HAL_DMA_IRQHandler+0x1f8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01a      	beq.n	800144c <HAL_DMA_IRQHandler+0x15c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a34      	ldr	r2, [pc, #208]	; (80014ec <HAL_DMA_IRQHandler+0x1fc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d012      	beq.n	8001446 <HAL_DMA_IRQHandler+0x156>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <HAL_DMA_IRQHandler+0x200>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00a      	beq.n	8001440 <HAL_DMA_IRQHandler+0x150>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a31      	ldr	r2, [pc, #196]	; (80014f4 <HAL_DMA_IRQHandler+0x204>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d102      	bne.n	800143a <HAL_DMA_IRQHandler+0x14a>
 8001434:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001438:	e00e      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 800143a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800143e:	e00b      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001444:	e008      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144a:	e005      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	e002      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001452:	2320      	movs	r3, #32
 8001454:	e000      	b.n	8001458 <HAL_DMA_IRQHandler+0x168>
 8001456:	2302      	movs	r3, #2
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <HAL_DMA_IRQHandler+0x208>)
 800145a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	2b00      	cmp	r3, #0
 800146a:	d034      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001474:	e02f      	b.n	80014d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2208      	movs	r2, #8
 800147c:	409a      	lsls	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d028      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x1e8>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d023      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 020e 	bic.w	r2, r2, #14
 800149e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4798      	blx	r3
    }
  }
  return;
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
}
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40020008 	.word	0x40020008
 80014e4:	4002001c 	.word	0x4002001c
 80014e8:	40020030 	.word	0x40020030
 80014ec:	40020044 	.word	0x40020044
 80014f0:	40020058 	.word	0x40020058
 80014f4:	4002006c 	.word	0x4002006c
 80014f8:	40020000 	.word	0x40020000

080014fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d108      	bne.n	800153c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800153a:	e007      	b.n	800154c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	60da      	str	r2, [r3, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	e161      	b.n	8001830 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800156c:	2201      	movs	r2, #1
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 8150 	bne.w	800182a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a97      	ldr	r2, [pc, #604]	; (80017ec <HAL_GPIO_Init+0x294>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d05e      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 8001594:	4a95      	ldr	r2, [pc, #596]	; (80017ec <HAL_GPIO_Init+0x294>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d875      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 800159a:	4a95      	ldr	r2, [pc, #596]	; (80017f0 <HAL_GPIO_Init+0x298>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d058      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015a0:	4a93      	ldr	r2, [pc, #588]	; (80017f0 <HAL_GPIO_Init+0x298>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d86f      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015a6:	4a93      	ldr	r2, [pc, #588]	; (80017f4 <HAL_GPIO_Init+0x29c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d052      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015ac:	4a91      	ldr	r2, [pc, #580]	; (80017f4 <HAL_GPIO_Init+0x29c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d869      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015b2:	4a91      	ldr	r2, [pc, #580]	; (80017f8 <HAL_GPIO_Init+0x2a0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d04c      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015b8:	4a8f      	ldr	r2, [pc, #572]	; (80017f8 <HAL_GPIO_Init+0x2a0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d863      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015be:	4a8f      	ldr	r2, [pc, #572]	; (80017fc <HAL_GPIO_Init+0x2a4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d046      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015c4:	4a8d      	ldr	r2, [pc, #564]	; (80017fc <HAL_GPIO_Init+0x2a4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d85d      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d82a      	bhi.n	8001624 <HAL_GPIO_Init+0xcc>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d859      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <HAL_GPIO_Init+0x80>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001653 	.word	0x08001653
 80015dc:	0800162d 	.word	0x0800162d
 80015e0:	0800163f 	.word	0x0800163f
 80015e4:	08001681 	.word	0x08001681
 80015e8:	08001687 	.word	0x08001687
 80015ec:	08001687 	.word	0x08001687
 80015f0:	08001687 	.word	0x08001687
 80015f4:	08001687 	.word	0x08001687
 80015f8:	08001687 	.word	0x08001687
 80015fc:	08001687 	.word	0x08001687
 8001600:	08001687 	.word	0x08001687
 8001604:	08001687 	.word	0x08001687
 8001608:	08001687 	.word	0x08001687
 800160c:	08001687 	.word	0x08001687
 8001610:	08001687 	.word	0x08001687
 8001614:	08001687 	.word	0x08001687
 8001618:	08001687 	.word	0x08001687
 800161c:	08001635 	.word	0x08001635
 8001620:	08001649 	.word	0x08001649
 8001624:	4a76      	ldr	r2, [pc, #472]	; (8001800 <HAL_GPIO_Init+0x2a8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162a:	e02c      	b.n	8001686 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e029      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	3304      	adds	r3, #4
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e024      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	3308      	adds	r3, #8
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e01f      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	330c      	adds	r3, #12
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e01a      	b.n	8001688 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165a:	2304      	movs	r3, #4
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e013      	b.n	8001688 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	611a      	str	r2, [r3, #16]
          break;
 8001672:	e009      	b.n	8001688 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	615a      	str	r2, [r3, #20]
          break;
 800167e:	e003      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
          break;
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x130>
          break;
 8001686:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	; 0xff
 800168c:	d801      	bhi.n	8001692 <HAL_GPIO_Init+0x13a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_Init+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d802      	bhi.n	80016a4 <HAL_GPIO_Init+0x14c>
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x152>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3b08      	subs	r3, #8
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	210f      	movs	r1, #15
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80a9 	beq.w	800182a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x2ac>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a49      	ldr	r2, [pc, #292]	; (8001804 <HAL_GPIO_Init+0x2ac>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_GPIO_Init+0x2ac>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f0:	4a45      	ldr	r2, [pc, #276]	; (8001808 <HAL_GPIO_Init+0x2b0>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3d      	ldr	r2, [pc, #244]	; (800180c <HAL_GPIO_Init+0x2b4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1e0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3c      	ldr	r2, [pc, #240]	; (8001810 <HAL_GPIO_Init+0x2b8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1dc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <HAL_GPIO_Init+0x2bc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1d8>
 800172c:	2302      	movs	r3, #2
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001730:	2303      	movs	r3, #3
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001738:	2300      	movs	r3, #0
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174a:	492f      	ldr	r1, [pc, #188]	; (8001808 <HAL_GPIO_Init+0x2b0>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	492b      	ldr	r1, [pc, #172]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4927      	ldr	r1, [pc, #156]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 800177c:	4013      	ands	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4921      	ldr	r1, [pc, #132]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	491d      	ldr	r1, [pc, #116]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4917      	ldr	r1, [pc, #92]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4913      	ldr	r1, [pc, #76]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01f      	beq.n	800181c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	490d      	ldr	r1, [pc, #52]	; (8001818 <HAL_GPIO_Init+0x2c0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e01f      	b.n	800182a <HAL_GPIO_Init+0x2d2>
 80017ea:	bf00      	nop
 80017ec:	10320000 	.word	0x10320000
 80017f0:	10310000 	.word	0x10310000
 80017f4:	10220000 	.word	0x10220000
 80017f8:	10210000 	.word	0x10210000
 80017fc:	10120000 	.word	0x10120000
 8001800:	10110000 	.word	0x10110000
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000
 800180c:	40010800 	.word	0x40010800
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40011000 	.word	0x40011000
 8001818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_GPIO_Init+0x2f4>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	43db      	mvns	r3, r3
 8001824:	4909      	ldr	r1, [pc, #36]	; (800184c <HAL_GPIO_Init+0x2f4>)
 8001826:	4013      	ands	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	3301      	adds	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f ae96 	bne.w	800156c <HAL_GPIO_Init+0x14>
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	372c      	adds	r7, #44	; 0x2c
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40010400 	.word	0x40010400

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e272      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8087 	beq.w	80019ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d00c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ac:	4b8f      	ldr	r3, [pc, #572]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d112      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
 80018b8:	4b8c      	ldr	r3, [pc, #560]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d10b      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c6:	4b89      	ldr	r3, [pc, #548]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06c      	beq.n	80019ac <HAL_RCC_OscConfig+0x12c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d168      	bne.n	80019ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e24c      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x76>
 80018e8:	4b80      	ldr	r3, [pc, #512]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a7f      	ldr	r2, [pc, #508]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e02e      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x98>
 80018fe:	4b7b      	ldr	r3, [pc, #492]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7a      	ldr	r2, [pc, #488]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b78      	ldr	r3, [pc, #480]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a77      	ldr	r2, [pc, #476]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0xbc>
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a71      	ldr	r2, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 800193c:	4b6b      	ldr	r3, [pc, #428]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6a      	ldr	r2, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a67      	ldr	r2, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fa7e 	bl	8000e5c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fa7a 	bl	8000e5c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e200      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xe4>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fa6a 	bl	8000e5c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fa66 	bl	8000e5c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1ec      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x10c>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ba:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d11c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x18c>
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d116      	bne.n	8001a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_RCC_OscConfig+0x176>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e1c0      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4939      	ldr	r1, [pc, #228]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	e03a      	b.n	8001a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x270>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa1f 	bl	8000e5c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fa1b 	bl	8000e5c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1a1      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4927      	ldr	r1, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e015      	b.n	8001a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x270>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f9fe 	bl	8000e5c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff f9fa 	bl	8000e5c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e180      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d03a      	beq.n	8001b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d019      	beq.n	8001aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f9de 	bl	8000e5c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f9da 	bl	8000e5c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e160      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 face 	bl	8002064 <RCC_Delay>
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f9c4 	bl	8000e5c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad6:	e00f      	b.n	8001af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f9c0 	bl	8000e5c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d908      	bls.n	8001af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e146      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	42420000 	.word	0x42420000
 8001af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e9      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80a6 	beq.w	8001c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b16:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10d      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a87      	ldr	r2, [pc, #540]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	4b82      	ldr	r3, [pc, #520]	; (8001d48 <HAL_RCC_OscConfig+0x4c8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d118      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4a:	4b7f      	ldr	r3, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x4c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <HAL_RCC_OscConfig+0x4c8>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b56:	f7ff f981 	bl	8000e5c <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5e:	f7ff f97d 	bl	8000e5c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e103      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x4c8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x312>
 8001b84:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	e02d      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x334>
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a69      	ldr	r2, [pc, #420]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a66      	ldr	r2, [pc, #408]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	e01c      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x356>
 8001bbc:	4b61      	ldr	r3, [pc, #388]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a60      	ldr	r2, [pc, #384]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a5d      	ldr	r2, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001bd6:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a5a      	ldr	r2, [pc, #360]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d015      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f931 	bl	8000e5c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff f92d 	bl	8000e5c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0b1      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ee      	beq.n	8001bfe <HAL_RCC_OscConfig+0x37e>
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f91b 	bl	8000e5c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f917 	bl	8000e5c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e09b      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a3b      	ldr	r2, [pc, #236]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8087 	beq.w	8001d76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d061      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d146      	bne.n	8001d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff f8eb 	bl	8000e5c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff f8e7 	bl	8000e5c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e06d      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d108      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	4921      	ldr	r1, [pc, #132]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a19      	ldr	r1, [r3, #32]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	491b      	ldr	r1, [pc, #108]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f8bb 	bl	8000e5c <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff f8b7 	bl	8000e5c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e03d      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x46a>
 8001d08:	e035      	b.n	8001d76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8a4 	bl	8000e5c <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f8a0 	bl	8000e5c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e026      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x498>
 8001d36:	e01e      	b.n	8001d76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e019      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_OscConfig+0x500>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0d0      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b6a      	ldr	r3, [pc, #424]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4965      	ldr	r1, [pc, #404]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b8      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df8:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	494d      	ldr	r1, [pc, #308]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d040      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e07f      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e073      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e06b      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4936      	ldr	r1, [pc, #216]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7fe fff2 	bl	8000e5c <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7fe ffee 	bl	8000e5c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e053      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d210      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 0207 	bic.w	r2, r3, #7
 8001eba:	4922      	ldr	r1, [pc, #136]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e032      	b.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4916      	ldr	r1, [pc, #88]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	490e      	ldr	r1, [pc, #56]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f12:	f000 f821 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	490a      	ldr	r1, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	5ccb      	ldrb	r3, [r1, r3]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1cc>)
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1d0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe ff50 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	0800390c 	.word	0x0800390c
 8001f50:	20000004 	.word	0x20000004
 8001f54:	20000008 	.word	0x20000008

08001f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_GetSysClockFreq+0x94>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x30>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x36>
 8001f86:	e027      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8a:	613b      	str	r3, [r7, #16]
      break;
 8001f8c:	e027      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	0c9b      	lsrs	r3, r3, #18
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0c5b      	lsrs	r3, r3, #17
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fba:	fb03 f202 	mul.w	r2, r3, r2
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e004      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	613b      	str	r3, [r7, #16]
      break;
 8001fd6:	e002      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fda:	613b      	str	r3, [r7, #16]
      break;
 8001fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fde:	693b      	ldr	r3, [r7, #16]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	007a1200 	.word	0x007a1200
 8001ff4:	08003924 	.word	0x08003924
 8001ff8:	08003934 	.word	0x08003934
 8001ffc:	003d0900 	.word	0x003d0900

08002000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002004:	4b02      	ldr	r3, [pc, #8]	; (8002010 <HAL_RCC_GetHCLKFreq+0x10>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002018:	f7ff fff2 	bl	8002000 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4903      	ldr	r1, [pc, #12]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	0800391c 	.word	0x0800391c

0800203c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002040:	f7ff ffde 	bl	8002000 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	0adb      	lsrs	r3, r3, #11
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	0800391c 	.word	0x0800391c

08002064 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <RCC_Delay+0x34>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <RCC_Delay+0x38>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	0a5b      	lsrs	r3, r3, #9
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002080:	bf00      	nop
  }
  while (Delay --);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	60fa      	str	r2, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f9      	bne.n	8002080 <RCC_Delay+0x1c>
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000004 	.word	0x20000004
 800209c:	10624dd3 	.word	0x10624dd3

080020a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e041      	b.n	8002136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fcf0 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f000 fd26 	bl	8002b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e041      	b.n	80021d4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f839 	bl	80021dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f000 fcd7 	bl	8002b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_TIM_IC_Start_DMA+0x22>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800220e:	b2db      	uxtb	r3, r3
 8002210:	e013      	b.n	800223a <HAL_TIM_IC_Start_DMA+0x4a>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d104      	bne.n	8002222 <HAL_TIM_IC_Start_DMA+0x32>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800221e:	b2db      	uxtb	r3, r3
 8002220:	e00b      	b.n	800223a <HAL_TIM_IC_Start_DMA+0x4a>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d104      	bne.n	8002232 <HAL_TIM_IC_Start_DMA+0x42>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e003      	b.n	800223a <HAL_TIM_IC_Start_DMA+0x4a>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d104      	bne.n	800224c <HAL_TIM_IC_Start_DMA+0x5c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e013      	b.n	8002274 <HAL_TIM_IC_Start_DMA+0x84>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d104      	bne.n	800225c <HAL_TIM_IC_Start_DMA+0x6c>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e00b      	b.n	8002274 <HAL_TIM_IC_Start_DMA+0x84>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b08      	cmp	r3, #8
 8002260:	d104      	bne.n	800226c <HAL_TIM_IC_Start_DMA+0x7c>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e003      	b.n	8002274 <HAL_TIM_IC_Start_DMA+0x84>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002272:	b2db      	uxtb	r3, r3
 8002274:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002276:	7dbb      	ldrb	r3, [r7, #22]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d002      	beq.n	8002282 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800227c:	7d7b      	ldrb	r3, [r7, #21]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d101      	bne.n	8002286 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	e12d      	b.n	80024e2 <HAL_TIM_IC_Start_DMA+0x2f2>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002286:	7dbb      	ldrb	r3, [r7, #22]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d143      	bne.n	8002314 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800228c:	7d7b      	ldrb	r3, [r7, #21]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d140      	bne.n	8002314 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_TIM_IC_Start_DMA+0xae>
 8002298:	887b      	ldrh	r3, [r7, #2]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e11f      	b.n	80024e2 <HAL_TIM_IC_Start_DMA+0x2f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <HAL_TIM_IC_Start_DMA+0xc2>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b0:	e013      	b.n	80022da <HAL_TIM_IC_Start_DMA+0xea>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d104      	bne.n	80022c2 <HAL_TIM_IC_Start_DMA+0xd2>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	e00b      	b.n	80022da <HAL_TIM_IC_Start_DMA+0xea>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_IC_Start_DMA+0xe2>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d0:	e003      	b.n	80022da <HAL_TIM_IC_Start_DMA+0xea>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_TIM_IC_Start_DMA+0xfa>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 80022e8:	e016      	b.n	8002318 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_IC_Start_DMA+0x10a>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) || (Length == 0U))
 80022f8:	e00e      	b.n	8002318 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d104      	bne.n	800230a <HAL_TIM_IC_Start_DMA+0x11a>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8002308:	e006      	b.n	8002318 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8002312:	e001      	b.n	8002318 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0e4      	b.n	80024e2 <HAL_TIM_IC_Start_DMA+0x2f2>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2201      	movs	r2, #1
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fdfa 	bl	8002f1a <TIM_CCxChannelCmd>

  switch (Channel)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b0c      	cmp	r3, #12
 800232a:	f200 80ad 	bhi.w	8002488 <HAL_TIM_IC_Start_DMA+0x298>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <HAL_TIM_IC_Start_DMA+0x144>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002369 	.word	0x08002369
 8002338:	08002489 	.word	0x08002489
 800233c:	08002489 	.word	0x08002489
 8002340:	08002489 	.word	0x08002489
 8002344:	080023b1 	.word	0x080023b1
 8002348:	08002489 	.word	0x08002489
 800234c:	08002489 	.word	0x08002489
 8002350:	08002489 	.word	0x08002489
 8002354:	080023f9 	.word	0x080023f9
 8002358:	08002489 	.word	0x08002489
 800235c:	08002489 	.word	0x08002489
 8002360:	08002489 	.word	0x08002489
 8002364:	08002441 	.word	0x08002441
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	4a5f      	ldr	r2, [pc, #380]	; (80024ec <HAL_TIM_IC_Start_DMA+0x2fc>)
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	4a5e      	ldr	r2, [pc, #376]	; (80024f0 <HAL_TIM_IC_Start_DMA+0x300>)
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	4a5d      	ldr	r2, [pc, #372]	; (80024f4 <HAL_TIM_IC_Start_DMA+0x304>)
 800237e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3334      	adds	r3, #52	; 0x34
 800238a:	4619      	mov	r1, r3
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	f7fe fed6 	bl	8001140 <HAL_DMA_Start_IT>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0a1      	b.n	80024e2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ac:	60da      	str	r2, [r3, #12]
      break;
 80023ae:	e06e      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_TIM_IC_Start_DMA+0x2fc>)
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <HAL_TIM_IC_Start_DMA+0x300>)
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	4a4b      	ldr	r2, [pc, #300]	; (80024f4 <HAL_TIM_IC_Start_DMA+0x304>)
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3338      	adds	r3, #56	; 0x38
 80023d2:	4619      	mov	r1, r3
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	f7fe feb2 	bl	8001140 <HAL_DMA_Start_IT>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07d      	b.n	80024e2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023f4:	60da      	str	r2, [r3, #12]
      break;
 80023f6:	e04a      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_TIM_IC_Start_DMA+0x2fc>)
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <HAL_TIM_IC_Start_DMA+0x300>)
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <HAL_TIM_IC_Start_DMA+0x304>)
 800240e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	333c      	adds	r3, #60	; 0x3c
 800241a:	4619      	mov	r1, r3
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	f7fe fe8e 	bl	8001140 <HAL_DMA_Start_IT>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e059      	b.n	80024e2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800243c:	60da      	str	r2, [r3, #12]
      break;
 800243e:	e026      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4a29      	ldr	r2, [pc, #164]	; (80024ec <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_TIM_IC_Start_DMA+0x300>)
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_TIM_IC_Start_DMA+0x304>)
 8002456:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3340      	adds	r3, #64	; 0x40
 8002462:	4619      	mov	r1, r3
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	f7fe fe6a 	bl	8001140 <HAL_DMA_Start_IT>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e035      	b.n	80024e2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002484:	60da      	str	r2, [r3, #12]
      break;
 8002486:	e002      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	75fb      	strb	r3, [r7, #23]
      break;
 800248c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <HAL_TIM_IC_Start_DMA+0x308>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_TIM_IC_Start_DMA+0x2bc>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d004      	beq.n	80024ac <HAL_TIM_IC_Start_DMA+0x2bc>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_TIM_IC_Start_DMA+0x30c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d111      	bne.n	80024d0 <HAL_TIM_IC_Start_DMA+0x2e0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d010      	beq.n	80024e0 <HAL_TIM_IC_Start_DMA+0x2f0>
    {
      __HAL_TIM_ENABLE(htim);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ce:	e007      	b.n	80024e0 <HAL_TIM_IC_Start_DMA+0x2f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	08002a01 	.word	0x08002a01
 80024f0:	08002ac9 	.word	0x08002ac9
 80024f4:	0800296f 	.word	0x0800296f
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40000400 	.word	0x40000400

08002500 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fcff 	bl	8002f1a <TIM_CCxChannelCmd>

  switch (Channel)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d854      	bhi.n	80025cc <HAL_TIM_IC_Stop_DMA+0xcc>
 8002522:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <HAL_TIM_IC_Stop_DMA+0x28>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	0800255d 	.word	0x0800255d
 800252c:	080025cd 	.word	0x080025cd
 8002530:	080025cd 	.word	0x080025cd
 8002534:	080025cd 	.word	0x080025cd
 8002538:	08002579 	.word	0x08002579
 800253c:	080025cd 	.word	0x080025cd
 8002540:	080025cd 	.word	0x080025cd
 8002544:	080025cd 	.word	0x080025cd
 8002548:	08002595 	.word	0x08002595
 800254c:	080025cd 	.word	0x080025cd
 8002550:	080025cd 	.word	0x080025cd
 8002554:	080025cd 	.word	0x080025cd
 8002558:	080025b1 	.word	0x080025b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800256a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fe45 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 8002576:	e02c      	b.n	80025d2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fe37 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 8002592:	e01e      	b.n	80025d2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fe29 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 80025ae:	e010      	b.n	80025d2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fe1b 	bl	8001200 <HAL_DMA_Abort_IT>
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d14f      	bne.n	8002678 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	f241 1311 	movw	r3, #4369	; 0x1111
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10f      	bne.n	8002608 <HAL_TIM_IC_Stop_DMA+0x108>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	f240 4344 	movw	r3, #1092	; 0x444
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IC_Stop_DMA+0x108>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <HAL_TIM_IC_Stop_DMA+0x118>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002616:	e013      	b.n	8002640 <HAL_TIM_IC_Stop_DMA+0x140>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b04      	cmp	r3, #4
 800261c:	d104      	bne.n	8002628 <HAL_TIM_IC_Stop_DMA+0x128>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002626:	e00b      	b.n	8002640 <HAL_TIM_IC_Stop_DMA+0x140>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d104      	bne.n	8002638 <HAL_TIM_IC_Stop_DMA+0x138>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002636:	e003      	b.n	8002640 <HAL_TIM_IC_Stop_DMA+0x140>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <HAL_TIM_IC_Stop_DMA+0x150>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264e:	e013      	b.n	8002678 <HAL_TIM_IC_Stop_DMA+0x178>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d104      	bne.n	8002660 <HAL_TIM_IC_Stop_DMA+0x160>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800265e:	e00b      	b.n	8002678 <HAL_TIM_IC_Stop_DMA+0x178>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b08      	cmp	r3, #8
 8002664:	d104      	bne.n	8002670 <HAL_TIM_IC_Stop_DMA+0x170>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800266e:	e003      	b.n	8002678 <HAL_TIM_IC_Stop_DMA+0x178>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop

08002684 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800269e:	2302      	movs	r3, #2
 80026a0:	e088      	b.n	80027b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80026c0:	f000 fa8e 	bl	8002be0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020c 	bic.w	r2, r2, #12
 80026d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6999      	ldr	r1, [r3, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	619a      	str	r2, [r3, #24]
 80026e6:	e060      	b.n	80027aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d11c      	bne.n	8002728 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026fe:	f000 faf1 	bl	8002ce4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002710:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6999      	ldr	r1, [r3, #24]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	619a      	str	r2, [r3, #24]
 8002726:	e040      	b.n	80027aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11b      	bne.n	8002766 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800273e:	f000 fb3c 	bl	8002dba <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020c 	bic.w	r2, r2, #12
 8002750:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69d9      	ldr	r1, [r3, #28]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	61da      	str	r2, [r3, #28]
 8002764:	e021      	b.n	80027aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d11c      	bne.n	80027a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800277c:	f000 fb58 	bl	8002e30 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800278e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69d9      	ldr	r1, [r3, #28]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	61da      	str	r2, [r3, #28]
 80027a4:	e001      	b.n	80027aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_ConfigClockSource+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0b4      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x186>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002810:	d03e      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0xd4>
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002816:	f200 8087 	bhi.w	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	f000 8086 	beq.w	800292e <HAL_TIM_ConfigClockSource+0x172>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d87f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d01a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xa6>
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d87b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b60      	cmp	r3, #96	; 0x60
 8002832:	d050      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d877      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b50      	cmp	r3, #80	; 0x50
 800283a:	d03c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xfa>
 800283c:	2b50      	cmp	r3, #80	; 0x50
 800283e:	d873      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d058      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d86f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b30      	cmp	r3, #48	; 0x30
 800284a:	d064      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b30      	cmp	r3, #48	; 0x30
 800284e:	d86b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d060      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d867      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d05a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	e062      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002872:	f000 fb33 	bl	8002edc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	609a      	str	r2, [r3, #8]
      break;
 800288e:	e04f      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	f000 fb1c 	bl	8002edc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b2:	609a      	str	r2, [r3, #8]
      break;
 80028b4:	e03c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f9e0 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2150      	movs	r1, #80	; 0x50
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 faea 	bl	8002ea8 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e02c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 fa3a 	bl	8002d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2160      	movs	r1, #96	; 0x60
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fada 	bl	8002ea8 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e01c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f9c0 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	4618      	mov	r0, r3
 8002910:	f000 faca 	bl	8002ea8 <TIM_ITRx_SetConfig>
      break;
 8002914:	e00c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f000 fac1 	bl	8002ea8 <TIM_ITRx_SetConfig>
      break;
 8002926:	e003      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e000      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800292e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	d107      	bne.n	8002996 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	e02a      	b.n	80029ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2202      	movs	r2, #2
 80029a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ae:	e01d      	b.n	80029ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d107      	bne.n	80029ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2204      	movs	r2, #4
 80029be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c8:	e010      	b.n	80029ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2208      	movs	r2, #8
 80029d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029e2:	e003      	b.n	80029ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff ffb5 	bl	800295c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10f      	bne.n	8002a38 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d146      	bne.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a36:	e03d      	b.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d10f      	bne.n	8002a62 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2202      	movs	r2, #2
 8002a46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d131      	bne.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a60:	e028      	b.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d10f      	bne.n	8002a8c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11c      	bne.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8a:	e013      	b.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d10e      	bne.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7fd fc6b 	bl	8000390 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d103      	bne.n	8002ae8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	771a      	strb	r2, [r3, #28]
 8002ae6:	e019      	b.n	8002b1c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d103      	bne.n	8002afa <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2202      	movs	r2, #2
 8002af6:	771a      	strb	r2, [r3, #28]
 8002af8:	e010      	b.n	8002b1c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d103      	bne.n	8002b0c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2204      	movs	r2, #4
 8002b08:	771a      	strb	r2, [r3, #28]
 8002b0a:	e007      	b.n	8002b1c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d102      	bne.n	8002b1c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff ff14 	bl	800294a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <TIM_Base_SetConfig+0xa8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_Base_SetConfig+0x28>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0x28>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <TIM_Base_SetConfig+0xac>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d108      	bne.n	8002b6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <TIM_Base_SetConfig+0xa8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <TIM_Base_SetConfig+0x52>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b78:	d003      	beq.n	8002b82 <TIM_Base_SetConfig+0x52>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <TIM_Base_SetConfig+0xac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d108      	bne.n	8002b94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <TIM_Base_SetConfig+0xa8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400

08002be0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f023 0201 	bic.w	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <TIM_TI1_SetConfig+0xa0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_TI1_SetConfig+0x3e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d003      	beq.n	8002c1e <TIM_TI1_SetConfig+0x3e>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <TIM_TI1_SetConfig+0xa4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <TIM_TI1_SetConfig+0x42>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <TIM_TI1_SetConfig+0x44>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e003      	b.n	8002c42 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f023 030a 	bic.w	r3, r3, #10
 8002c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f003 030a 	and.w	r3, r3, #10
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400

08002c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 030a 	bic.w	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f023 0210 	bic.w	r2, r3, #16
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	031b      	lsls	r3, r3, #12
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0210 	bic.w	r2, r3, #16
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	031b      	lsls	r3, r3, #12
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b087      	sub	sp, #28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	031b      	lsls	r3, r3, #12
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e82:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	031b      	lsls	r3, r3, #12
 8002e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	621a      	str	r2, [r3, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f043 0307 	orr.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	609a      	str	r2, [r3, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	021a      	lsls	r2, r3, #8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	431a      	orrs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e041      	b.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10c      	bne.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400

08003014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fdd0 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fb89 	bl	8003770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800306c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800307c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800308c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d16d      	bne.n	80031b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_Transmit+0x2c>
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e066      	b.n	80031b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2221      	movs	r2, #33	; 0x21
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f2:	f7fd feb3 	bl	8000e5c <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	88fa      	ldrh	r2, [r7, #6]
 8003102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310c:	d108      	bne.n	8003120 <HAL_UART_Transmit+0x6c>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	e003      	b.n	8003128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003128:	e02a      	b.n	8003180 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f989 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e036      	b.n	80031b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3302      	adds	r3, #2
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e007      	b.n	8003172 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3301      	adds	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1cf      	bne.n	800312a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	2140      	movs	r1, #64	; 0x40
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f959 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e006      	b.n	80031b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d112      	bne.n	80031fa <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Receive_DMA+0x26>
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e00b      	b.n	80031fc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	461a      	mov	r2, r3
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f999 	bl	8003528 <UART_Start_Receive_DMA>
 80031f6:	4603      	mov	r3, r0
 80031f8:	e000      	b.n	80031fc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b09c      	sub	sp, #112	; 0x70
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d172      	bne.n	8003352 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800326c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326e:	2200      	movs	r2, #0
 8003270:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003288:	66bb      	str	r3, [r7, #104]	; 0x68
 800328a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	330c      	adds	r3, #12
 8003290:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003292:	65ba      	str	r2, [r7, #88]	; 0x58
 8003294:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e5      	bne.n	8003272 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	667b      	str	r3, [r7, #100]	; 0x64
 80032be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3314      	adds	r3, #20
 80032c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80032c6:	647a      	str	r2, [r7, #68]	; 0x44
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e5      	bne.n	80032a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3314      	adds	r3, #20
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	623b      	str	r3, [r7, #32]
   return(result);
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f0:	663b      	str	r3, [r7, #96]	; 0x60
 80032f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3314      	adds	r3, #20
 80032f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032fa:	633a      	str	r2, [r7, #48]	; 0x30
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e5      	bne.n	80032da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	2b01      	cmp	r3, #1
 800331c:	d119      	bne.n	8003352 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	60fb      	str	r3, [r7, #12]
   return(result);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f023 0310 	bic.w	r3, r3, #16
 8003334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800333e:	61fa      	str	r2, [r7, #28]
 8003340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	69b9      	ldr	r1, [r7, #24]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	617b      	str	r3, [r7, #20]
   return(result);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e5      	bne.n	800331e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003354:	2200      	movs	r2, #0
 8003356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003364:	4619      	mov	r1, r3
 8003366:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003368:	f7ff ff67 	bl	800323a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800336c:	e002      	b.n	8003374 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800336e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003370:	f7ff ff48 	bl	8003204 <HAL_UART_RxCpltCallback>
}
 8003374:	bf00      	nop
 8003376:	3770      	adds	r7, #112	; 0x70
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2b01      	cmp	r3, #1
 8003396:	d108      	bne.n	80033aa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff ff49 	bl	800323a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80033a8:	e002      	b.n	80033b0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff ff33 	bl	8003216 <HAL_UART_RxHalfCpltCallback>
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b21      	cmp	r3, #33	; 0x21
 80033ea:	d108      	bne.n	80033fe <UART_DMAError+0x46>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2200      	movs	r2, #0
 80033f6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f000 f92f 	bl	800365c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b22      	cmp	r3, #34	; 0x22
 800341e:	d108      	bne.n	8003432 <UART_DMAError+0x7a>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	f000 f93c 	bl	80036aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0210 	orr.w	r2, r3, #16
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800343e:	68b8      	ldr	r0, [r7, #8]
 8003440:	f7ff fef2 	bl	8003228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b090      	sub	sp, #64	; 0x40
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345c:	e050      	b.n	8003500 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d04c      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <UART_WaitOnFlagUntilTimeout+0x30>
 800346c:	f7fd fcf6 	bl	8000e5c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003478:	429a      	cmp	r2, r3
 800347a:	d241      	bcs.n	8003500 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349c:	637a      	str	r2, [r7, #52]	; 0x34
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e5      	bne.n	800347c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3314      	adds	r3, #20
 80034b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	613b      	str	r3, [r7, #16]
   return(result);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3314      	adds	r3, #20
 80034ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d0:	623a      	str	r2, [r7, #32]
 80034d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	69f9      	ldr	r1, [r7, #28]
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e5      	bne.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e00f      	b.n	8003520 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d09f      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3740      	adds	r7, #64	; 0x40
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b098      	sub	sp, #96	; 0x60
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2222      	movs	r2, #34	; 0x22
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	4a3e      	ldr	r2, [pc, #248]	; (8003650 <UART_Start_Receive_DMA+0x128>)
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <UART_Start_Receive_DMA+0x12c>)
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	4a3c      	ldr	r2, [pc, #240]	; (8003658 <UART_Start_Receive_DMA+0x130>)
 8003566:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	2200      	movs	r2, #0
 800356e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3304      	adds	r3, #4
 8003580:	4619      	mov	r1, r3
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	f7fd fdda 	bl	8001140 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d019      	beq.n	80035de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	330c      	adds	r3, #12
 80035c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80035d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e5      	bne.n	80035aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3314      	adds	r3, #20
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	657b      	str	r3, [r7, #84]	; 0x54
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3314      	adds	r3, #20
 80035fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3314      	adds	r3, #20
 8003618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	617b      	str	r3, [r7, #20]
   return(result);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003632:	627a      	str	r2, [r7, #36]	; 0x24
 8003634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6a39      	ldr	r1, [r7, #32]
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3760      	adds	r7, #96	; 0x60
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	08003251 	.word	0x08003251
 8003654:	0800337d 	.word	0x0800337d
 8003658:	080033b9 	.word	0x080033b9

0800365c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	60bb      	str	r3, [r7, #8]
   return(result);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	61ba      	str	r2, [r7, #24]
 8003686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6979      	ldr	r1, [r7, #20]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	613b      	str	r3, [r7, #16]
   return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80036a0:	bf00      	nop
 80036a2:	3724      	adds	r7, #36	; 0x24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b095      	sub	sp, #84	; 0x54
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d2:	643a      	str	r2, [r7, #64]	; 0x40
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e5      	bne.n	80036b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800370c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e5      	bne.n	80036e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	2b01      	cmp	r3, #1
 8003720:	d119      	bne.n	8003756 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	60bb      	str	r3, [r7, #8]
   return(result);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f023 0310 	bic.w	r3, r3, #16
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003742:	61ba      	str	r2, [r7, #24]
 8003744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6979      	ldr	r1, [r7, #20]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	613b      	str	r3, [r7, #16]
   return(result);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e5      	bne.n	8003722 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003764:	bf00      	nop
 8003766:	3754      	adds	r7, #84	; 0x54
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
	...

08003770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037aa:	f023 030c 	bic.w	r3, r3, #12
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <UART_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7fe fc30 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	e002      	b.n	80037e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe fc18 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009a      	lsls	r2, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <UART_SetConfig+0x118>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	0119      	lsls	r1, r3, #4
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <UART_SetConfig+0x118>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	4419      	add	r1, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <UART_SetConfig+0x118>)
 8003856:	fba3 0302 	umull	r0, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2064      	movs	r0, #100	; 0x64
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	440a      	add	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40013800 	.word	0x40013800
 8003888:	51eb851f 	.word	0x51eb851f

0800388c <memset>:
 800388c:	4603      	mov	r3, r0
 800388e:	4402      	add	r2, r0
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	f803 1b01 	strb.w	r1, [r3], #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <__libc_init_array>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	2600      	movs	r6, #0
 80038a0:	4d0c      	ldr	r5, [pc, #48]	; (80038d4 <__libc_init_array+0x38>)
 80038a2:	4c0d      	ldr	r4, [pc, #52]	; (80038d8 <__libc_init_array+0x3c>)
 80038a4:	1b64      	subs	r4, r4, r5
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	42a6      	cmp	r6, r4
 80038aa:	d109      	bne.n	80038c0 <__libc_init_array+0x24>
 80038ac:	f000 f81a 	bl	80038e4 <_init>
 80038b0:	2600      	movs	r6, #0
 80038b2:	4d0a      	ldr	r5, [pc, #40]	; (80038dc <__libc_init_array+0x40>)
 80038b4:	4c0a      	ldr	r4, [pc, #40]	; (80038e0 <__libc_init_array+0x44>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	42a6      	cmp	r6, r4
 80038bc:	d105      	bne.n	80038ca <__libc_init_array+0x2e>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c4:	4798      	blx	r3
 80038c6:	3601      	adds	r6, #1
 80038c8:	e7ee      	b.n	80038a8 <__libc_init_array+0xc>
 80038ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ce:	4798      	blx	r3
 80038d0:	3601      	adds	r6, #1
 80038d2:	e7f2      	b.n	80038ba <__libc_init_array+0x1e>
 80038d4:	08003938 	.word	0x08003938
 80038d8:	08003938 	.word	0x08003938
 80038dc:	08003938 	.word	0x08003938
 80038e0:	0800393c 	.word	0x0800393c

080038e4 <_init>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr

080038f0 <_fini>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr
