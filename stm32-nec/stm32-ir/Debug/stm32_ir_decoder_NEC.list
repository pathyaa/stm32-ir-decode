
stm32_ir_decoder_NEC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f3c  08003f3c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f3c  08003f3c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f3c  08003f3c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000005c  08003fa0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08003fa0  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f082  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002100  00000000  00000000  0002f14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00031250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf1  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017dee  00000000  00000000  00032d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001200f  00000000  00000000  0004ab3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a8c9  00000000  00000000  0005cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004558  00000000  00000000  000e7418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000eb970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ea0 	.word	0x08003ea0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003ea0 	.word	0x08003ea0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NEC_Init>:
 */

#include "NEC.h"

void NEC_Init(NEC* handle)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	handle->timerHandle = &htim2;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4a12      	ldr	r2, [pc, #72]	; (80001b0 <NEC_Init+0x54>)
 8000168:	649a      	str	r2, [r3, #72]	; 0x48

	handle->timerChannel = TIM_CHANNEL_1;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	64da      	str	r2, [r3, #76]	; 0x4c
	handle->timerChannelActive = HAL_TIM_ACTIVE_CHANNEL_1;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2201      	movs	r2, #1
 8000174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	handle->timingBitBoundary = 1650;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f240 6272 	movw	r2, #1650	; 0x672
 800017e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	handle->timingAgcBoundary = 13500;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f243 42bc 	movw	r2, #13500	; 0x34bc
 8000188:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	handle->type = NEC_NOT_EXTENDED;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2200      	movs	r2, #0
 8000190:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	handle->NEC_DecodedCallback = myNecDecodedCallback;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <NEC_Init+0x58>)
 8000198:	659a      	str	r2, [r3, #88]	; 0x58
	handle->NEC_ErrorCallback = myNecErrorCallback;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4a06      	ldr	r2, [pc, #24]	; (80001b8 <NEC_Init+0x5c>)
 800019e:	65da      	str	r2, [r3, #92]	; 0x5c
	handle->NEC_RepeatCallback = myNecRepeatCallback;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4a06      	ldr	r2, [pc, #24]	; (80001bc <NEC_Init+0x60>)
 80001a4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	200000cc 	.word	0x200000cc
 80001b4:	0800036d 	.word	0x0800036d
 80001b8:	080003c5 	.word	0x080003c5
 80001bc:	080003fd 	.word	0x080003fd

080001c0 <NEC_TIM_IC_CaptureCallback>:

void NEC_TIM_IC_CaptureCallback(NEC* handle)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	switch(handle->state)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d002      	beq.n	80001d8 <NEC_TIM_IC_CaptureCallback+0x18>
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	d01d      	beq.n	8000212 <NEC_TIM_IC_CaptureCallback+0x52>
			handle->NEC_DecodedCallback(handle->decoded[0], handle->decoded[2]);
		else
			handle->NEC_ErrorCallback();
		break;
	}
}
 80001d6:	e099      	b.n	800030c <NEC_TIM_IC_CaptureCallback+0x14c>
		uint16_t header_time = handle->rawTimerData[1];
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	885b      	ldrh	r3, [r3, #2]
 80001dc:	813b      	strh	r3, [r7, #8]
		if (header_time < AGC_START_TIME)
 80001de:	893b      	ldrh	r3, [r7, #8]
 80001e0:	f243 02d3 	movw	r2, #12499	; 0x30d3
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d807      	bhi.n	80001f8 <NEC_TIM_IC_CaptureCallback+0x38>
			handle->state = NEC_OK;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2204      	movs	r2, #4
 80001ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			handle->NEC_RepeatCallback();
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80001f4:	4798      	blx	r3
		break;
 80001f6:	e089      	b.n	800030c <NEC_TIM_IC_CaptureCallback+0x14c>
			handle->state = NEC_AGC_OK;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2201      	movs	r2, #1
 80001fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			HAL_TIM_IC_Start_DMA(handle->timerHandle, handle->timerChannel,
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
					(uint32_t*) handle->rawTimerData, 32);
 8000208:	687a      	ldr	r2, [r7, #4]
			HAL_TIM_IC_Start_DMA(handle->timerHandle, handle->timerChannel,
 800020a:	2320      	movs	r3, #32
 800020c:	f001 ffc6 	bl	800219c <HAL_TIM_IC_Start_DMA>
		break;
 8000210:	e07c      	b.n	800030c <NEC_TIM_IC_CaptureCallback+0x14c>
		for (uint8_t pos = 0; pos < 32; pos++)
 8000212:	2300      	movs	r3, #0
 8000214:	73fb      	strb	r3, [r7, #15]
 8000216:	e03f      	b.n	8000298 <NEC_TIM_IC_CaptureCallback+0xd8>
			uint16_t time = handle->rawTimerData[pos];
 8000218:	7bfa      	ldrb	r2, [r7, #15]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000220:	817b      	strh	r3, [r7, #10]
			if (time > BIT_BOUNDARY)
 8000222:	897b      	ldrh	r3, [r7, #10]
 8000224:	f240 6272 	movw	r2, #1650	; 0x672
 8000228:	4293      	cmp	r3, r2
 800022a:	d918      	bls.n	800025e <NEC_TIM_IC_CaptureCallback+0x9e>
				handle->decoded[pos / 8] |= 1 << (pos % 8);
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	08db      	lsrs	r3, r3, #3
 8000230:	b2d8      	uxtb	r0, r3
 8000232:	4602      	mov	r2, r0
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800023c:	b25a      	sxtb	r2, r3
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	f003 0307 	and.w	r3, r3, #7
 8000244:	2101      	movs	r1, #1
 8000246:	fa01 f303 	lsl.w	r3, r1, r3
 800024a:	b25b      	sxtb	r3, r3
 800024c:	4313      	orrs	r3, r2
 800024e:	b25b      	sxtb	r3, r3
 8000250:	4601      	mov	r1, r0
 8000252:	b2da      	uxtb	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	440b      	add	r3, r1
 8000258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800025c:	e019      	b.n	8000292 <NEC_TIM_IC_CaptureCallback+0xd2>
				handle->decoded[pos / 8] &= ~(1 << (pos % 8));
 800025e:	7bfb      	ldrb	r3, [r7, #15]
 8000260:	08db      	lsrs	r3, r3, #3
 8000262:	b2d8      	uxtb	r0, r3
 8000264:	4602      	mov	r2, r0
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4413      	add	r3, r2
 800026a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800026e:	b25a      	sxtb	r2, r3
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	f003 0307 	and.w	r3, r3, #7
 8000276:	2101      	movs	r1, #1
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	b25b      	sxtb	r3, r3
 800027e:	43db      	mvns	r3, r3
 8000280:	b25b      	sxtb	r3, r3
 8000282:	4013      	ands	r3, r2
 8000284:	b25b      	sxtb	r3, r3
 8000286:	4601      	mov	r1, r0
 8000288:	b2da      	uxtb	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	440b      	add	r3, r1
 800028e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		for (uint8_t pos = 0; pos < 32; pos++)
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	3301      	adds	r3, #1
 8000296:	73fb      	strb	r3, [r7, #15]
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	2b1f      	cmp	r3, #31
 800029c:	d9bc      	bls.n	8000218 <NEC_TIM_IC_CaptureCallback+0x58>
		uint8_t valid = 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	73bb      	strb	r3, [r7, #14]
		uint8_t naddr = ~handle->decoded[1];
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80002a8:	43db      	mvns	r3, r3
 80002aa:	737b      	strb	r3, [r7, #13]
		uint8_t ncmd = ~handle->decoded[3];
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80002b2:	43db      	mvns	r3, r3
 80002b4:	733b      	strb	r3, [r7, #12]
		if (handle->type == NEC_NOT_EXTENDED && handle->decoded[0] != naddr)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d107      	bne.n	80002d0 <NEC_TIM_IC_CaptureCallback+0x110>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80002c6:	7b7a      	ldrb	r2, [r7, #13]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d001      	beq.n	80002d0 <NEC_TIM_IC_CaptureCallback+0x110>
			valid = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
		if (handle->decoded[2] != ncmd)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80002d6:	7b3a      	ldrb	r2, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d001      	beq.n	80002e0 <NEC_TIM_IC_CaptureCallback+0x120>
			valid = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	73bb      	strb	r3, [r7, #14]
		handle->state = NEC_OK;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2204      	movs	r2, #4
 80002e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (valid)
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d00a      	beq.n	8000304 <NEC_TIM_IC_CaptureCallback+0x144>
			handle->NEC_DecodedCallback(handle->decoded[0], handle->decoded[2]);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80002fe:	4611      	mov	r1, r2
 8000300:	4798      	blx	r3
		break;
 8000302:	e002      	b.n	800030a <NEC_TIM_IC_CaptureCallback+0x14a>
			handle->NEC_ErrorCallback();
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000308:	4798      	blx	r3
		break;
 800030a:	bf00      	nop
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <NEC_Read>:

void NEC_Read(NEC* handle)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
    handle->state = NEC_INIT;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    HAL_TIM_IC_Start_DMA(handle->timerHandle, handle->timerChannel,
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            (uint32_t*) handle->rawTimerData, 2);
 800032c:	687a      	ldr	r2, [r7, #4]
    HAL_TIM_IC_Start_DMA(handle->timerHandle, handle->timerChannel,
 800032e:	2302      	movs	r3, #2
 8000330:	f001 ff34 	bl	800219c <HAL_TIM_IC_Start_DMA>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <NEC_Reset>:

void NEC_Reset(NEC* handle)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	memset(handle->rawTimerData, 0, sizeof(uint16_t) * 32);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2240      	movs	r2, #64	; 0x40
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f916 	bl	800357c <memset>
	memset(handle->decoded, 0, sizeof(uint8_t) * 2);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3340      	adds	r3, #64	; 0x40
 8000354:	2202      	movs	r2, #2
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f003 f90f 	bl	800357c <memset>

	NEC_Read(handle);
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ffd8 	bl	8000314 <NEC_Read>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <myNecDecodedCallback>:
void myNecDecodedCallback(uint8_t address, uint8_t cmd)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b09e      	sub	sp, #120	; 0x78
 8000370:	af02      	add	r7, sp, #8
 8000372:	4603      	mov	r3, r0
 8000374:	460a      	mov	r2, r1
 8000376:	71fb      	strb	r3, [r7, #7]
 8000378:	4613      	mov	r3, r2
 800037a:	71bb      	strb	r3, [r7, #6]
    char buff[100];
    snprintf(buff, 100, "Addr:0x%x\tC:%d\n", address, cmd);
 800037c:	79fa      	ldrb	r2, [r7, #7]
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	f107 000c 	add.w	r0, r7, #12
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	4613      	mov	r3, r2
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <myNecDecodedCallback+0x4c>)
 800038a:	2164      	movs	r1, #100	; 0x64
 800038c:	f003 f8c2 	bl	8003514 <sniprintf>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*) buff, strlen(buff));
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff fed9 	bl	800014c <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b29a      	uxth	r2, r3
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <myNecDecodedCallback+0x50>)
 80003a6:	f002 fe6d 	bl	8003084 <HAL_UART_Transmit_DMA>

    NEC_Reset(&nec);
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <myNecDecodedCallback+0x54>)
 80003ac:	f7ff ffc6 	bl	800033c <NEC_Reset>
}
 80003b0:	bf00      	nop
 80003b2:	3770      	adds	r7, #112	; 0x70
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	08003eb8 	.word	0x08003eb8
 80003bc:	20000158 	.word	0x20000158
 80003c0:	200001e4 	.word	0x200001e4

080003c4 <myNecErrorCallback>:

void myNecErrorCallback() {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
    char* msg = "Error!\n";
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <myNecErrorCallback+0x2c>)
 80003cc:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*) msg, strlen(msg));
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f7ff febc 	bl	800014c <strlen>
 80003d4:	4603      	mov	r3, r0
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	4805      	ldr	r0, [pc, #20]	; (80003f4 <myNecErrorCallback+0x30>)
 80003de:	f002 fe51 	bl	8003084 <HAL_UART_Transmit_DMA>

    NEC_Reset(&nec);
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <myNecErrorCallback+0x34>)
 80003e4:	f7ff ffaa 	bl	800033c <NEC_Reset>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	08003ec8 	.word	0x08003ec8
 80003f4:	20000158 	.word	0x20000158
 80003f8:	200001e4 	.word	0x200001e4

080003fc <myNecRepeatCallback>:

void myNecRepeatCallback() {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
    char* msg = "Repeat!\n";
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <myNecRepeatCallback+0x2c>)
 8000404:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*) msg, strlen(msg));
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fea0 	bl	800014c <strlen>
 800040c:	4603      	mov	r3, r0
 800040e:	b29b      	uxth	r3, r3
 8000410:	461a      	mov	r2, r3
 8000412:	6879      	ldr	r1, [r7, #4]
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <myNecRepeatCallback+0x30>)
 8000416:	f002 fe35 	bl	8003084 <HAL_UART_Transmit_DMA>

    NEC_Reset(&nec);
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <myNecRepeatCallback+0x34>)
 800041c:	f7ff ff8e 	bl	800033c <NEC_Reset>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	08003ed0 	.word	0x08003ed0
 800042c:	20000158 	.word	0x20000158
 8000430:	200001e4 	.word	0x200001e4

08000434 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d102      	bne.n	800044a <HAL_TIM_IC_CaptureCallback+0x16>
    {
        NEC_TIM_IC_CaptureCallback(&nec);
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000446:	f7ff febb 	bl	80001c0 <NEC_TIM_IC_CaptureCallback>
    }
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000cc 	.word	0x200000cc
 8000458:	200001e4 	.word	0x200001e4

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f000 fbae 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f814 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f000 f960 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 800046c:	f000 f938 	bl	80006e0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000470:	f000 f882 	bl	8000578 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000474:	f000 f90a 	bl	800068c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000478:	f000 f850 	bl	800051c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  NEC_Init(&nec);
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <main+0x30>)
 800047e:	f7ff fe6d 	bl	800015c <NEC_Init>
  NEC_Read(&nec);
 8000482:	4802      	ldr	r0, [pc, #8]	; (800048c <main+0x30>)
 8000484:	f7ff ff46 	bl	8000314 <NEC_Read>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000488:	e7fe      	b.n	8000488 <main+0x2c>
 800048a:	bf00      	nop
 800048c:	200001e4 	.word	0x200001e4

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b090      	sub	sp, #64	; 0x40
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	2228      	movs	r2, #40	; 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 f86c 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b2:	2301      	movs	r3, #1
 80004b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c0:	2301      	movs	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c4:	2302      	movs	r3, #2
 80004c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f9a7 	bl	800182c <HAL_RCC_OscConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004e4:	f000 f97a 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e8:	230f      	movs	r3, #15
 80004ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ec:	2302      	movs	r3, #2
 80004ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fc14 	bl	8001d30 <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800050e:	f000 f965 	bl	80007dc <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3740      	adds	r7, #64	; 0x40
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_I2C1_Init+0x50>)
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <MX_I2C1_Init+0x54>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_I2C1_Init+0x50>)
 8000528:	4a12      	ldr	r2, [pc, #72]	; (8000574 <MX_I2C1_Init+0x58>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_I2C1_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_I2C1_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_I2C1_Init+0x50>)
 800053a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_I2C1_Init+0x50>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_I2C1_Init+0x50>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_I2C1_Init+0x50>)
 800055a:	f001 f823 	bl	80015a4 <HAL_I2C_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000564:	f000 f93a 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000078 	.word	0x20000078
 8000570:	40005400 	.word	0x40005400
 8000574:	00061a80 	.word	0x00061a80

08000578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b090      	sub	sp, #64	; 0x40
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b2:	4b35      	ldr	r3, [pc, #212]	; (8000688 <MX_TIM2_Init+0x110>)
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80005ba:	4b33      	ldr	r3, [pc, #204]	; (8000688 <MX_TIM2_Init+0x110>)
 80005bc:	222f      	movs	r2, #47	; 0x2f
 80005be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b31      	ldr	r3, [pc, #196]	; (8000688 <MX_TIM2_Init+0x110>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <MX_TIM2_Init+0x110>)
 80005c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <MX_TIM2_Init+0x110>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <MX_TIM2_Init+0x110>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005da:	482b      	ldr	r0, [pc, #172]	; (8000688 <MX_TIM2_Init+0x110>)
 80005dc:	f001 fd36 	bl	800204c <HAL_TIM_Base_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005e6:	f000 f8f9 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f4:	4619      	mov	r1, r3
 80005f6:	4824      	ldr	r0, [pc, #144]	; (8000688 <MX_TIM2_Init+0x110>)
 80005f8:	f001 fff4 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000602:	f000 f8eb 	bl	80007dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000606:	4820      	ldr	r0, [pc, #128]	; (8000688 <MX_TIM2_Init+0x110>)
 8000608:	f001 fd6f 	bl	80020ea <HAL_TIM_IC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000612:	f000 f8e3 	bl	80007dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000616:	2304      	movs	r3, #4
 8000618:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800061a:	2350      	movs	r3, #80	; 0x50
 800061c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800061e:	2302      	movs	r3, #2
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	4816      	ldr	r0, [pc, #88]	; (8000688 <MX_TIM2_Init+0x110>)
 800062e:	f002 f8a0 	bl	8002772 <HAL_TIM_SlaveConfigSynchro>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000638:	f000 f8d0 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	480f      	ldr	r0, [pc, #60]	; (8000688 <MX_TIM2_Init+0x110>)
 800064c:	f002 fc72 	bl	8002f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000656:	f000 f8c1 	bl	80007dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800065a:	2302      	movs	r3, #2
 800065c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800065e:	2301      	movs	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_TIM2_Init+0x110>)
 8000672:	f001 ff1b 	bl	80024ac <HAL_TIM_IC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 800067c:	f000 f8ae 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3740      	adds	r7, #64	; 0x40
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000cc 	.word	0x200000cc

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f002 fc8e 	bl	8002fe4 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f885 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000158 	.word	0x20000158
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DMA_Init+0x48>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_DMA_Init+0x48>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_DMA_Init+0x48>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200f      	movs	r0, #15
 8000704:	f000 fb95 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000708:	200f      	movs	r0, #15
 800070a:	f000 fbae 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2011      	movs	r0, #17
 8000714:	f000 fb8d 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000718:	2011      	movs	r0, #17
 800071a:	f000 fba6 	bl	8000e6a <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xa8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <MX_GPIO_Init+0xa8>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_GPIO_Init+0xa8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_GPIO_Init+0xa8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <MX_GPIO_Init+0xa8>)
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_GPIO_Init+0xa8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_GPIO_Init+0xa8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_GPIO_Init+0xa8>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_GPIO_Init+0xa8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xa8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <MX_GPIO_Init+0xa8>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_GPIO_Init+0xa8>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_GPIO_Init+0xac>)
 80007a8:	f000 fee4 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_GPIO_Init+0xac>)
 80007c6:	f000 fd59 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40011000 	.word	0x40011000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_MspInit+0x5c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_MspInit+0x5c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x5c>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x5c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_MspInit+0x60>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_MspInit+0x60>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000
 8000848:	40010000 	.word	0x40010000

0800084c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <HAL_I2C_MspInit+0x74>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d125      	bne.n	80008b8 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_I2C_MspInit+0x78>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_I2C_MspInit+0x78>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_I2C_MspInit+0x78>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000884:	23c0      	movs	r3, #192	; 0xc0
 8000886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000888:	2312      	movs	r3, #18
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <HAL_I2C_MspInit+0x7c>)
 800089c:	f000 fcee 	bl	800127c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_I2C_MspInit+0x78>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_I2C_MspInit+0x78>)
 80008a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008aa:	61d3      	str	r3, [r2, #28]
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_I2C_MspInit+0x78>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40005400 	.word	0x40005400
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010c00 	.word	0x40010c00

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008ea:	d14b      	bne.n	8000984 <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <HAL_TIM_Base_MspInit+0xc0>)
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	4a26      	ldr	r2, [pc, #152]	; (800098c <HAL_TIM_Base_MspInit+0xc0>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	61d3      	str	r3, [r2, #28]
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <HAL_TIM_Base_MspInit+0xc0>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <HAL_TIM_Base_MspInit+0xc0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <HAL_TIM_Base_MspInit+0xc0>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <HAL_TIM_Base_MspInit+0xc0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4818      	ldr	r0, [pc, #96]	; (8000990 <HAL_TIM_Base_MspInit+0xc4>)
 8000930:	f000 fca4 	bl	800127c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_TIM_Base_MspInit+0xcc>)
 8000938:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 800094e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000952:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 8000956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 800096a:	f000 fa99 	bl	8000ea0 <HAL_DMA_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_TIM_Base_MspInit+0xac>
    {
      Error_Handler();
 8000974:	f7ff ff32 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <HAL_TIM_Base_MspInit+0xc8>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	40010800 	.word	0x40010800
 8000994:	20000114 	.word	0x20000114
 8000998:	40020058 	.word	0x40020058

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <HAL_UART_MspInit+0xd4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d155      	bne.n	8000a68 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <HAL_UART_MspInit+0xd8>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	4a2c      	ldr	r2, [pc, #176]	; (8000a74 <HAL_UART_MspInit+0xd8>)
 80009c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c6:	61d3      	str	r3, [r2, #28]
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <HAL_UART_MspInit+0xd8>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <HAL_UART_MspInit+0xd8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <HAL_UART_MspInit+0xd8>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_UART_MspInit+0xd8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ec:	2304      	movs	r3, #4
 80009ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4619      	mov	r1, r3
 80009fe:	481e      	ldr	r0, [pc, #120]	; (8000a78 <HAL_UART_MspInit+0xdc>)
 8000a00:	f000 fc3c 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a04:	2308      	movs	r3, #8
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0xdc>)
 8000a18:	f000 fc30 	bl	800127c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0xe4>)
 8000a20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a24:	2210      	movs	r2, #16
 8000a26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a42:	2220      	movs	r2, #32
 8000a44:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a4e:	f000 fa27 	bl	8000ea0 <HAL_DMA_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000a58:	f7ff fec0 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_UART_MspInit+0xe0>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	200001a0 	.word	0x200001a0
 8000a80:	40020080 	.word	0x40020080

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f8bf 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <DMA1_Channel5_IRQHandler+0x10>)
 8000ada:	f000 fa9b 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000114 	.word	0x20000114

08000ae8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <DMA1_Channel7_IRQHandler+0x10>)
 8000aee:	f000 fa91 	bl	8001014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001a0 	.word	0x200001a0

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f002 fd2e 	bl	800358c <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20002800 	.word	0x20002800
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	20000248 	.word	0x20000248
 8000b64:	20000398 	.word	0x20000398

08000b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b74:	f7ff fff8 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b7a:	490c      	ldr	r1, [pc, #48]	; (8000bac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b90:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f002 fcfb 	bl	8003598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fc5b 	bl	800045c <main>
  bx lr
 8000ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bb0:	08003f44 	.word	0x08003f44
  ldr r2, =_sbss
 8000bb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bb8:	20000398 	.word	0x20000398

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f923 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fe04 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f93b 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f903 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	2000024c 	.word	0x2000024c

08000c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	2000024c 	.word	0x2000024c

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <__NVIC_EnableIRQ+0x34>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff90 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff2d 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff42 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff90 	bl	8000d74 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5f 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff35 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e043      	b.n	8000f3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_DMA_Init+0xa8>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_DMA_Init+0xac>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	009a      	lsls	r2, r3, #2
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_DMA_Init+0xb0>)
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	bffdfff8 	.word	0xbffdfff8
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_DMA_Start_IT+0x20>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e04b      	b.n	800100c <HAL_DMA_Start_IT+0xb8>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d13a      	bne.n	8000ffe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0201 	bic.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f000 f937 	bl	8001220 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 020e 	orr.w	r2, r2, #14
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e00f      	b.n	8000fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0204 	bic.w	r2, r2, #4
 8000fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 020a 	orr.w	r2, r2, #10
 8000fea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e005      	b.n	800100a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001006:	2302      	movs	r3, #2
 8001008:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800100a:	7dfb      	ldrb	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2204      	movs	r2, #4
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d04f      	beq.n	80010dc <HAL_DMA_IRQHandler+0xc8>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d04a      	beq.n	80010dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0204 	bic.w	r2, r2, #4
 8001062:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_DMA_IRQHandler+0x1f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d029      	beq.n	80010c2 <HAL_DMA_IRQHandler+0xae>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_DMA_IRQHandler+0x1f4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d022      	beq.n	80010be <HAL_DMA_IRQHandler+0xaa>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a63      	ldr	r2, [pc, #396]	; (800120c <HAL_DMA_IRQHandler+0x1f8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01a      	beq.n	80010b8 <HAL_DMA_IRQHandler+0xa4>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a62      	ldr	r2, [pc, #392]	; (8001210 <HAL_DMA_IRQHandler+0x1fc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d012      	beq.n	80010b2 <HAL_DMA_IRQHandler+0x9e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a60      	ldr	r2, [pc, #384]	; (8001214 <HAL_DMA_IRQHandler+0x200>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00a      	beq.n	80010ac <HAL_DMA_IRQHandler+0x98>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a5f      	ldr	r2, [pc, #380]	; (8001218 <HAL_DMA_IRQHandler+0x204>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d102      	bne.n	80010a6 <HAL_DMA_IRQHandler+0x92>
 80010a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a4:	e00e      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010aa:	e00b      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010b0:	e008      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b6:	e005      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010bc:	e002      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	e000      	b.n	80010c4 <HAL_DMA_IRQHandler+0xb0>
 80010c2:	2304      	movs	r3, #4
 80010c4:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_DMA_IRQHandler+0x208>)
 80010c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8094 	beq.w	80011fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010da:	e08e      	b.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	2202      	movs	r2, #2
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d056      	beq.n	800119a <HAL_DMA_IRQHandler+0x186>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d051      	beq.n	800119a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020a 	bic.w	r2, r2, #10
 8001112:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a38      	ldr	r2, [pc, #224]	; (8001204 <HAL_DMA_IRQHandler+0x1f0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d029      	beq.n	800117a <HAL_DMA_IRQHandler+0x166>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a37      	ldr	r2, [pc, #220]	; (8001208 <HAL_DMA_IRQHandler+0x1f4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d022      	beq.n	8001176 <HAL_DMA_IRQHandler+0x162>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a35      	ldr	r2, [pc, #212]	; (800120c <HAL_DMA_IRQHandler+0x1f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01a      	beq.n	8001170 <HAL_DMA_IRQHandler+0x15c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a34      	ldr	r2, [pc, #208]	; (8001210 <HAL_DMA_IRQHandler+0x1fc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d012      	beq.n	800116a <HAL_DMA_IRQHandler+0x156>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a32      	ldr	r2, [pc, #200]	; (8001214 <HAL_DMA_IRQHandler+0x200>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00a      	beq.n	8001164 <HAL_DMA_IRQHandler+0x150>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_DMA_IRQHandler+0x204>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d102      	bne.n	800115e <HAL_DMA_IRQHandler+0x14a>
 8001158:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800115c:	e00e      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800115e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001162:	e00b      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001168:	e008      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	e005      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001174:	e002      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 8001176:	2320      	movs	r3, #32
 8001178:	e000      	b.n	800117c <HAL_DMA_IRQHandler+0x168>
 800117a:	2302      	movs	r3, #2
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <HAL_DMA_IRQHandler+0x208>)
 800117e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	2b00      	cmp	r3, #0
 800118e:	d034      	beq.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001198:	e02f      	b.n	80011fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2208      	movs	r2, #8
 80011a0:	409a      	lsls	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d028      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 020e 	bic.w	r2, r2, #14
 80011c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
    }
  }
  return;
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
}
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020008 	.word	0x40020008
 8001208:	4002001c 	.word	0x4002001c
 800120c:	40020030 	.word	0x40020030
 8001210:	40020044 	.word	0x40020044
 8001214:	40020058 	.word	0x40020058
 8001218:	4002006c 	.word	0x4002006c
 800121c:	40020000 	.word	0x40020000

08001220 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d108      	bne.n	8001260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800125e:	e007      	b.n	8001270 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e161      	b.n	8001554 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001290:	2201      	movs	r2, #1
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 8150 	bne.w	800154e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a97      	ldr	r2, [pc, #604]	; (8001510 <HAL_GPIO_Init+0x294>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d05e      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012b8:	4a95      	ldr	r2, [pc, #596]	; (8001510 <HAL_GPIO_Init+0x294>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d875      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012be:	4a95      	ldr	r2, [pc, #596]	; (8001514 <HAL_GPIO_Init+0x298>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d058      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012c4:	4a93      	ldr	r2, [pc, #588]	; (8001514 <HAL_GPIO_Init+0x298>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d86f      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ca:	4a93      	ldr	r2, [pc, #588]	; (8001518 <HAL_GPIO_Init+0x29c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d052      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012d0:	4a91      	ldr	r2, [pc, #580]	; (8001518 <HAL_GPIO_Init+0x29c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d869      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012d6:	4a91      	ldr	r2, [pc, #580]	; (800151c <HAL_GPIO_Init+0x2a0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d04c      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012dc:	4a8f      	ldr	r2, [pc, #572]	; (800151c <HAL_GPIO_Init+0x2a0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d863      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012e2:	4a8f      	ldr	r2, [pc, #572]	; (8001520 <HAL_GPIO_Init+0x2a4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d046      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012e8:	4a8d      	ldr	r2, [pc, #564]	; (8001520 <HAL_GPIO_Init+0x2a4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d85d      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d82a      	bhi.n	8001348 <HAL_GPIO_Init+0xcc>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d859      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <HAL_GPIO_Init+0x80>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001377 	.word	0x08001377
 8001300:	08001351 	.word	0x08001351
 8001304:	08001363 	.word	0x08001363
 8001308:	080013a5 	.word	0x080013a5
 800130c:	080013ab 	.word	0x080013ab
 8001310:	080013ab 	.word	0x080013ab
 8001314:	080013ab 	.word	0x080013ab
 8001318:	080013ab 	.word	0x080013ab
 800131c:	080013ab 	.word	0x080013ab
 8001320:	080013ab 	.word	0x080013ab
 8001324:	080013ab 	.word	0x080013ab
 8001328:	080013ab 	.word	0x080013ab
 800132c:	080013ab 	.word	0x080013ab
 8001330:	080013ab 	.word	0x080013ab
 8001334:	080013ab 	.word	0x080013ab
 8001338:	080013ab 	.word	0x080013ab
 800133c:	080013ab 	.word	0x080013ab
 8001340:	08001359 	.word	0x08001359
 8001344:	0800136d 	.word	0x0800136d
 8001348:	4a76      	ldr	r2, [pc, #472]	; (8001524 <HAL_GPIO_Init+0x2a8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134e:	e02c      	b.n	80013aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e029      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e024      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	3308      	adds	r3, #8
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e01f      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	330c      	adds	r3, #12
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e01a      	b.n	80013ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137e:	2304      	movs	r3, #4
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e013      	b.n	80013ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	611a      	str	r2, [r3, #16]
          break;
 8001396:	e009      	b.n	80013ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	615a      	str	r2, [r3, #20]
          break;
 80013a2:	e003      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
          break;
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x130>
          break;
 80013aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2bff      	cmp	r3, #255	; 0xff
 80013b0:	d801      	bhi.n	80013b6 <HAL_GPIO_Init+0x13a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_Init+0x13e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d802      	bhi.n	80013c8 <HAL_GPIO_Init+0x14c>
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_Init+0x152>
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	3b08      	subs	r3, #8
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	210f      	movs	r1, #15
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80a9 	beq.w	800154e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fc:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <HAL_GPIO_Init+0x2ac>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a49      	ldr	r2, [pc, #292]	; (8001528 <HAL_GPIO_Init+0x2ac>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_GPIO_Init+0x2ac>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001414:	4a45      	ldr	r2, [pc, #276]	; (800152c <HAL_GPIO_Init+0x2b0>)
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <HAL_GPIO_Init+0x2b4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d00d      	beq.n	800145c <HAL_GPIO_Init+0x1e0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3c      	ldr	r2, [pc, #240]	; (8001534 <HAL_GPIO_Init+0x2b8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d007      	beq.n	8001458 <HAL_GPIO_Init+0x1dc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <HAL_GPIO_Init+0x2bc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_GPIO_Init+0x1d8>
 8001450:	2302      	movs	r3, #2
 8001452:	e004      	b.n	800145e <HAL_GPIO_Init+0x1e2>
 8001454:	2303      	movs	r3, #3
 8001456:	e002      	b.n	800145e <HAL_GPIO_Init+0x1e2>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <HAL_GPIO_Init+0x1e2>
 800145c:	2300      	movs	r3, #0
 800145e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001460:	f002 0203 	and.w	r2, r2, #3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	4093      	lsls	r3, r2
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800146e:	492f      	ldr	r1, [pc, #188]	; (800152c <HAL_GPIO_Init+0x2b0>)
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_GPIO_Init+0x2c0>)
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	492b      	ldr	r1, [pc, #172]	; (800153c <HAL_GPIO_Init+0x2c0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_GPIO_Init+0x2c0>)
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4927      	ldr	r1, [pc, #156]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	4921      	ldr	r1, [pc, #132]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60cb      	str	r3, [r1, #12]
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	491d      	ldr	r1, [pc, #116]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4917      	ldr	r1, [pc, #92]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4913      	ldr	r1, [pc, #76]	; (800153c <HAL_GPIO_Init+0x2c0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01f      	beq.n	8001540 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_GPIO_Init+0x2c0>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	490d      	ldr	r1, [pc, #52]	; (800153c <HAL_GPIO_Init+0x2c0>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e01f      	b.n	800154e <HAL_GPIO_Init+0x2d2>
 800150e:	bf00      	nop
 8001510:	10320000 	.word	0x10320000
 8001514:	10310000 	.word	0x10310000
 8001518:	10220000 	.word	0x10220000
 800151c:	10210000 	.word	0x10210000
 8001520:	10120000 	.word	0x10120000
 8001524:	10110000 	.word	0x10110000
 8001528:	40021000 	.word	0x40021000
 800152c:	40010000 	.word	0x40010000
 8001530:	40010800 	.word	0x40010800
 8001534:	40010c00 	.word	0x40010c00
 8001538:	40011000 	.word	0x40011000
 800153c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_GPIO_Init+0x2f4>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	43db      	mvns	r3, r3
 8001548:	4909      	ldr	r1, [pc, #36]	; (8001570 <HAL_GPIO_Init+0x2f4>)
 800154a:	4013      	ands	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	fa22 f303 	lsr.w	r3, r2, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	f47f ae96 	bne.w	8001290 <HAL_GPIO_Init+0x14>
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	372c      	adds	r7, #44	; 0x2c
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40010400 	.word	0x40010400

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	611a      	str	r2, [r3, #16]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e12b      	b.n	800180e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff f93e 	bl	800084c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2224      	movs	r2, #36	; 0x24
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001608:	f000 fcda 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a81      	ldr	r2, [pc, #516]	; (8001818 <HAL_I2C_Init+0x274>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d807      	bhi.n	8001628 <HAL_I2C_Init+0x84>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4a80      	ldr	r2, [pc, #512]	; (800181c <HAL_I2C_Init+0x278>)
 800161c:	4293      	cmp	r3, r2
 800161e:	bf94      	ite	ls
 8001620:	2301      	movls	r3, #1
 8001622:	2300      	movhi	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	e006      	b.n	8001636 <HAL_I2C_Init+0x92>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a7d      	ldr	r2, [pc, #500]	; (8001820 <HAL_I2C_Init+0x27c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0e7      	b.n	800180e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4a78      	ldr	r2, [pc, #480]	; (8001824 <HAL_I2C_Init+0x280>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0c9b      	lsrs	r3, r3, #18
 8001648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <HAL_I2C_Init+0x274>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d802      	bhi.n	8001678 <HAL_I2C_Init+0xd4>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3301      	adds	r3, #1
 8001676:	e009      	b.n	800168c <HAL_I2C_Init+0xe8>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	4a69      	ldr	r2, [pc, #420]	; (8001828 <HAL_I2C_Init+0x284>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	3301      	adds	r3, #1
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800169e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	495c      	ldr	r1, [pc, #368]	; (8001818 <HAL_I2C_Init+0x274>)
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d819      	bhi.n	80016e0 <HAL_I2C_Init+0x13c>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e59      	subs	r1, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ba:	1c59      	adds	r1, r3, #1
 80016bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016c0:	400b      	ands	r3, r1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00a      	beq.n	80016dc <HAL_I2C_Init+0x138>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1e59      	subs	r1, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016da:	e051      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 80016dc:	2304      	movs	r3, #4
 80016de:	e04f      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_I2C_Init+0x168>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e58      	subs	r0, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e012      	b.n	8001732 <HAL_I2C_Init+0x18e>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1e58      	subs	r0, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	0099      	lsls	r1, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001722:	3301      	adds	r3, #1
 8001724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_Init+0x196>
 8001736:	2301      	movs	r3, #1
 8001738:	e022      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10e      	bne.n	8001760 <HAL_I2C_Init+0x1bc>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1e58      	subs	r0, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6859      	ldr	r1, [r3, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	440b      	add	r3, r1
 8001750:	fbb0 f3f3 	udiv	r3, r0, r3
 8001754:	3301      	adds	r3, #1
 8001756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175e:	e00f      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1e58      	subs	r0, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	0099      	lsls	r1, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	fbb0 f3f3 	udiv	r3, r0, r3
 8001776:	3301      	adds	r3, #1
 8001778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	6809      	ldr	r1, [r1, #0]
 8001784:	4313      	orrs	r3, r2
 8001786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6911      	ldr	r1, [r2, #16]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68d2      	ldr	r2, [r2, #12]
 80017ba:	4311      	orrs	r1, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	000186a0 	.word	0x000186a0
 800181c:	001e847f 	.word	0x001e847f
 8001820:	003d08ff 	.word	0x003d08ff
 8001824:	431bde83 	.word	0x431bde83
 8001828:	10624dd3 	.word	0x10624dd3

0800182c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e272      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800184c:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d00c      	beq.n	8001872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001858:	4b8f      	ldr	r3, [pc, #572]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d112      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
 8001864:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d06c      	beq.n	8001958 <HAL_RCC_OscConfig+0x12c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d168      	bne.n	8001958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e24c      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x76>
 8001894:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a7f      	ldr	r2, [pc, #508]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e02e      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7a      	ldr	r2, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a77      	ldr	r2, [pc, #476]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0xbc>
 80018ce:	4b72      	ldr	r3, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6a      	ldr	r2, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f9b2 	bl	8000c70 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f9ae 	bl	8000c70 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e200      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xe4>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f99e 	bl	8000c70 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff f99a 	bl	8000c70 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1ec      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x10c>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x18c>
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x176>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1c0      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4939      	ldr	r1, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff f953 	bl	8000c70 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff f94f 	bl	8000c70 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1a1      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4927      	ldr	r1, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f932 	bl	8000c70 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff f92e 	bl	8000c70 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e180      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d03a      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d019      	beq.n	8001a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff f912 	bl	8000c70 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff f90e 	bl	8000c70 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e160      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 face 	bl	8002010 <RCC_Delay>
 8001a74:	e01c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f8f8 	bl	8000c70 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a82:	e00f      	b.n	8001aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff f8f4 	bl	8000c70 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d908      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e146      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	42420000 	.word	0x42420000
 8001aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e9      	bne.n	8001a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a6 	beq.w	8001c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b88      	ldr	r3, [pc, #544]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a87      	ldr	r2, [pc, #540]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]
 8001ada:	4b85      	ldr	r3, [pc, #532]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af6:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7e      	ldr	r2, [pc, #504]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b02:	f7ff f8b5 	bl	8000c70 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0a:	f7ff f8b1 	bl	8000c70 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b64      	cmp	r3, #100	; 0x64
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e103      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4b75      	ldr	r3, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x312>
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	e02d      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x334>
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a69      	ldr	r2, [pc, #420]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a66      	ldr	r2, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	e01c      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x356>
 8001b68:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b82:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a5a      	ldr	r2, [pc, #360]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a57      	ldr	r2, [pc, #348]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d015      	beq.n	8001bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f865 	bl	8000c70 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f861 	bl	8000c70 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0b1      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ee      	beq.n	8001baa <HAL_RCC_OscConfig+0x37e>
 8001bcc:	e014      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f84f 	bl	8000c70 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff f84b 	bl	8000c70 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e09b      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ee      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a3b      	ldr	r2, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8087 	beq.w	8001d22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d061      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d146      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x4cc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f81f 	bl	8000c70 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff f81b 	bl	8000c70 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e06d      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4921      	ldr	r1, [pc, #132]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a19      	ldr	r1, [r3, #32]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	430b      	orrs	r3, r1
 8001c82:	491b      	ldr	r1, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ffef 	bl	8000c70 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe ffeb 	bl	8000c70 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e03d      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x46a>
 8001cb4:	e035      	b.n	8001d22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ffd8 	bl	8000c70 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe ffd4 	bl	8000c70 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e026      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x498>
 8001ce2:	e01e      	b.n	8001d22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e019      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x500>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0d0      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d910      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b67      	ldr	r3, [pc, #412]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4965      	ldr	r1, [pc, #404]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b8      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	494d      	ldr	r1, [pc, #308]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d040      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d115      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e07f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e073      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06b      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4936      	ldr	r1, [pc, #216]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e20:	f7fe ff26 	bl	8000c70 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7fe ff22 	bl	8000c70 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e053      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d210      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e032      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4916      	ldr	r1, [pc, #88]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ebe:	f000 f821 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	490a      	ldr	r1, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	5ccb      	ldrb	r3, [r1, r3]
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1cc>)
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1d0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fe84 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08003edc 	.word	0x08003edc
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d002      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x30>
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0x36>
 8001f32:	e027      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f36:	613b      	str	r3, [r7, #16]
      break;
 8001f38:	e027      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	0c9b      	lsrs	r3, r3, #18
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0c5b      	lsrs	r3, r3, #17
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f66:	fb03 f202 	mul.w	r2, r3, r2
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e004      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	613b      	str	r3, [r7, #16]
      break;
 8001f82:	e002      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f86:	613b      	str	r3, [r7, #16]
      break;
 8001f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8a:	693b      	ldr	r3, [r7, #16]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	08003ef4 	.word	0x08003ef4
 8001fa4:	08003f04 	.word	0x08003f04
 8001fa8:	003d0900 	.word	0x003d0900

08001fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc4:	f7ff fff2 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08003eec 	.word	0x08003eec

08001fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fec:	f7ff ffde 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0adb      	lsrs	r3, r3, #11
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	08003eec 	.word	0x08003eec

08002010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <RCC_Delay+0x34>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <RCC_Delay+0x38>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a5b      	lsrs	r3, r3, #9
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800202c:	bf00      	nop
  }
  while (Delay --);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	60fa      	str	r2, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <RCC_Delay+0x1c>
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000000 	.word	0x20000000
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e041      	b.n	80020e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fc2a 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3304      	adds	r3, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f000 fca6 	bl	80029dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e041      	b.n	8002180 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f839 	bl	8002188 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f000 fc57 	bl	80029dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d104      	bne.n	80021be <HAL_TIM_IC_Start_DMA+0x22>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	e013      	b.n	80021e6 <HAL_TIM_IC_Start_DMA+0x4a>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_IC_Start_DMA+0x32>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e00b      	b.n	80021e6 <HAL_TIM_IC_Start_DMA+0x4a>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d104      	bne.n	80021de <HAL_TIM_IC_Start_DMA+0x42>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e003      	b.n	80021e6 <HAL_TIM_IC_Start_DMA+0x4a>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <HAL_TIM_IC_Start_DMA+0x5c>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e013      	b.n	8002220 <HAL_TIM_IC_Start_DMA+0x84>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d104      	bne.n	8002208 <HAL_TIM_IC_Start_DMA+0x6c>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e00b      	b.n	8002220 <HAL_TIM_IC_Start_DMA+0x84>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d104      	bne.n	8002218 <HAL_TIM_IC_Start_DMA+0x7c>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e003      	b.n	8002220 <HAL_TIM_IC_Start_DMA+0x84>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800221e:	b2db      	uxtb	r3, r3
 8002220:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002222:	7dbb      	ldrb	r3, [r7, #22]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d002      	beq.n	800222e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002228:	7d7b      	ldrb	r3, [r7, #21]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d101      	bne.n	8002232 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	e12d      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x2f2>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d143      	bne.n	80022c0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002238:	7d7b      	ldrb	r3, [r7, #21]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d140      	bne.n	80022c0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_TIM_IC_Start_DMA+0xae>
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e11f      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x2f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <HAL_TIM_IC_Start_DMA+0xc2>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800225c:	e013      	b.n	8002286 <HAL_TIM_IC_Start_DMA+0xea>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d104      	bne.n	800226e <HAL_TIM_IC_Start_DMA+0xd2>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800226c:	e00b      	b.n	8002286 <HAL_TIM_IC_Start_DMA+0xea>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d104      	bne.n	800227e <HAL_TIM_IC_Start_DMA+0xe2>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800227c:	e003      	b.n	8002286 <HAL_TIM_IC_Start_DMA+0xea>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <HAL_TIM_IC_Start_DMA+0xfa>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 8002294:	e016      	b.n	80022c4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d104      	bne.n	80022a6 <HAL_TIM_IC_Start_DMA+0x10a>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) || (Length == 0U))
 80022a4:	e00e      	b.n	80022c4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d104      	bne.n	80022b6 <HAL_TIM_IC_Start_DMA+0x11a>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 80022b4:	e006      	b.n	80022c4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 80022be:	e001      	b.n	80022c4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0e4      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x2f2>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fe0c 	bl	8002eea <TIM_CCxChannelCmd>

  switch (Channel)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	f200 80ad 	bhi.w	8002434 <HAL_TIM_IC_Start_DMA+0x298>
 80022da:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <HAL_TIM_IC_Start_DMA+0x144>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	08002315 	.word	0x08002315
 80022e4:	08002435 	.word	0x08002435
 80022e8:	08002435 	.word	0x08002435
 80022ec:	08002435 	.word	0x08002435
 80022f0:	0800235d 	.word	0x0800235d
 80022f4:	08002435 	.word	0x08002435
 80022f8:	08002435 	.word	0x08002435
 80022fc:	08002435 	.word	0x08002435
 8002300:	080023a5 	.word	0x080023a5
 8002304:	08002435 	.word	0x08002435
 8002308:	08002435 	.word	0x08002435
 800230c:	08002435 	.word	0x08002435
 8002310:	080023ed 	.word	0x080023ed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	4a5f      	ldr	r2, [pc, #380]	; (8002498 <HAL_TIM_IC_Start_DMA+0x2fc>)
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	4a5e      	ldr	r2, [pc, #376]	; (800249c <HAL_TIM_IC_Start_DMA+0x300>)
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	4a5d      	ldr	r2, [pc, #372]	; (80024a0 <HAL_TIM_IC_Start_DMA+0x304>)
 800232a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3334      	adds	r3, #52	; 0x34
 8002336:	4619      	mov	r1, r3
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	f7fe fe0a 	bl	8000f54 <HAL_DMA_Start_IT>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0a1      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002358:	60da      	str	r2, [r3, #12]
      break;
 800235a:	e06e      	b.n	800243a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	4a4d      	ldr	r2, [pc, #308]	; (8002498 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_TIM_IC_Start_DMA+0x300>)
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <HAL_TIM_IC_Start_DMA+0x304>)
 8002372:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3338      	adds	r3, #56	; 0x38
 800237e:	4619      	mov	r1, r3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	f7fe fde6 	bl	8000f54 <HAL_DMA_Start_IT>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e07d      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023a0:	60da      	str	r2, [r3, #12]
      break;
 80023a2:	e04a      	b.n	800243a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_TIM_IC_Start_DMA+0x2fc>)
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	4a3a      	ldr	r2, [pc, #232]	; (800249c <HAL_TIM_IC_Start_DMA+0x300>)
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	4a39      	ldr	r2, [pc, #228]	; (80024a0 <HAL_TIM_IC_Start_DMA+0x304>)
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	333c      	adds	r3, #60	; 0x3c
 80023c6:	4619      	mov	r1, r3
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	f7fe fdc2 	bl	8000f54 <HAL_DMA_Start_IT>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e059      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e8:	60da      	str	r2, [r3, #12]
      break;
 80023ea:	e026      	b.n	800243a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4a29      	ldr	r2, [pc, #164]	; (8002498 <HAL_TIM_IC_Start_DMA+0x2fc>)
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_TIM_IC_Start_DMA+0x300>)
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_TIM_IC_Start_DMA+0x304>)
 8002402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3340      	adds	r3, #64	; 0x40
 800240e:	4619      	mov	r1, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	f7fe fd9e 	bl	8000f54 <HAL_DMA_Start_IT>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e035      	b.n	800248e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002430:	60da      	str	r2, [r3, #12]
      break;
 8002432:	e002      	b.n	800243a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
      break;
 8002438:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_TIM_IC_Start_DMA+0x308>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_TIM_IC_Start_DMA+0x2bc>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244c:	d004      	beq.n	8002458 <HAL_TIM_IC_Start_DMA+0x2bc>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d111      	bne.n	800247c <HAL_TIM_IC_Start_DMA+0x2e0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d010      	beq.n	800248c <HAL_TIM_IC_Start_DMA+0x2f0>
    {
      __HAL_TIM_ENABLE(htim);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	e007      	b.n	800248c <HAL_TIM_IC_Start_DMA+0x2f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800248c:	7dfb      	ldrb	r3, [r7, #23]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	080028ad 	.word	0x080028ad
 800249c:	08002975 	.word	0x08002975
 80024a0:	0800281b 	.word	0x0800281b
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400

080024ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e088      	b.n	80025dc <HAL_TIM_IC_ConfigChannel+0x130>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d11b      	bne.n	8002510 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80024e8:	f000 fb62 	bl	8002bb0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020c 	bic.w	r2, r2, #12
 80024fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6999      	ldr	r1, [r3, #24]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	619a      	str	r2, [r3, #24]
 800250e:	e060      	b.n	80025d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d11c      	bne.n	8002550 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002526:	f000 fbc5 	bl	8002cb4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002538:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6999      	ldr	r1, [r3, #24]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	021a      	lsls	r2, r3, #8
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	e040      	b.n	80025d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11b      	bne.n	800258e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002566:	f000 fc10 	bl	8002d8a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 020c 	bic.w	r2, r2, #12
 8002578:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69d9      	ldr	r1, [r3, #28]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	61da      	str	r2, [r3, #28]
 800258c:	e021      	b.n	80025d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b0c      	cmp	r3, #12
 8002592:	d11c      	bne.n	80025ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80025a4:	f000 fc2c 	bl	8002e00 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69d9      	ldr	r1, [r3, #28]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	021a      	lsls	r2, r3, #8
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	61da      	str	r2, [r3, #28]
 80025cc:	e001      	b.n	80025d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025da:	7dfb      	ldrb	r3, [r7, #23]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_ConfigClockSource+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0b4      	b.n	800276a <HAL_TIM_ConfigClockSource+0x186>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002638:	d03e      	beq.n	80026b8 <HAL_TIM_ConfigClockSource+0xd4>
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	f200 8087 	bhi.w	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	f000 8086 	beq.w	8002756 <HAL_TIM_ConfigClockSource+0x172>
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d87f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d01a      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xa6>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d87b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d050      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x11a>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d877      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d03c      	beq.n	80026de <HAL_TIM_ConfigClockSource+0xfa>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d873      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d058      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x13a>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d86f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d064      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d86b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d060      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d867      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05c      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002684:	2b10      	cmp	r3, #16
 8002686:	d05a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002688:	e062      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	f000 fc07 	bl	8002eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	609a      	str	r2, [r3, #8]
      break;
 80026b6:	e04f      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026c8:	f000 fbf0 	bl	8002eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026da:	609a      	str	r2, [r3, #8]
      break;
 80026dc:	e03c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 fab4 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2150      	movs	r1, #80	; 0x50
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fbbe 	bl	8002e78 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e02c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800270a:	461a      	mov	r2, r3
 800270c:	f000 fb0e 	bl	8002d2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2160      	movs	r1, #96	; 0x60
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fbae 	bl	8002e78 <TIM_ITRx_SetConfig>
      break;
 800271c:	e01c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fa94 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fb9e 	bl	8002e78 <TIM_ITRx_SetConfig>
      break;
 800273c:	e00c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f000 fb95 	bl	8002e78 <TIM_ITRx_SetConfig>
      break;
 800274e:	e003      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e000      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_TIM_SlaveConfigSynchro+0x18>
 8002786:	2302      	movs	r3, #2
 8002788:	e031      	b.n	80027ee <HAL_TIM_SlaveConfigSynchro+0x7c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f975 	bl	8002a8c <TIM_SlaveTimer_SetConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e018      	b.n	80027ee <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027da:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	d107      	bne.n	8002842 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002840:	e02a      	b.n	8002898 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2202      	movs	r2, #2
 8002850:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800285a:	e01d      	b.n	8002898 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d107      	bne.n	8002876 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2204      	movs	r2, #4
 800286a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002874:	e010      	b.n	8002898 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d107      	bne.n	8002890 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2208      	movs	r2, #8
 8002884:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800288e:	e003      	b.n	8002898 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ffb5 	bl	8002808 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10f      	bne.n	80028e4 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d146      	bne.n	8002960 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e2:	e03d      	b.n	8002960 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d10f      	bne.n	800290e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2202      	movs	r2, #2
 80028f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d131      	bne.n	8002960 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290c:	e028      	b.n	8002960 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d10f      	bne.n	8002938 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2204      	movs	r2, #4
 800291c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11c      	bne.n	8002960 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002936:	e013      	b.n	8002960 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d10e      	bne.n	8002960 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2208      	movs	r2, #8
 8002946:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7fd fd67 	bl	8000434 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d103      	bne.n	8002994 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	771a      	strb	r2, [r3, #28]
 8002992:	e019      	b.n	80029c8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d103      	bne.n	80029a6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2202      	movs	r2, #2
 80029a2:	771a      	strb	r2, [r3, #28]
 80029a4:	e010      	b.n	80029c8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d103      	bne.n	80029b8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2204      	movs	r2, #4
 80029b4:	771a      	strb	r2, [r3, #28]
 80029b6:	e007      	b.n	80029c8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d102      	bne.n	80029c8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2208      	movs	r2, #8
 80029c6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff14 	bl	80027f6 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <TIM_Base_SetConfig+0xa8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x28>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x28>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <TIM_Base_SetConfig+0xac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <TIM_Base_SetConfig+0xa8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_Base_SetConfig+0x52>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d003      	beq.n	8002a2e <TIM_Base_SetConfig+0x52>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <TIM_Base_SetConfig+0xac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <TIM_Base_SetConfig+0xa8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d103      	bne.n	8002a74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	615a      	str	r2, [r3, #20]
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40000400 	.word	0x40000400

08002a8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f023 0307 	bic.w	r3, r3, #7
 8002aba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b70      	cmp	r3, #112	; 0x70
 8002ad4:	d01a      	beq.n	8002b0c <TIM_SlaveTimer_SetConfig+0x80>
 8002ad6:	2b70      	cmp	r3, #112	; 0x70
 8002ad8:	d860      	bhi.n	8002b9c <TIM_SlaveTimer_SetConfig+0x110>
 8002ada:	2b60      	cmp	r3, #96	; 0x60
 8002adc:	d054      	beq.n	8002b88 <TIM_SlaveTimer_SetConfig+0xfc>
 8002ade:	2b60      	cmp	r3, #96	; 0x60
 8002ae0:	d85c      	bhi.n	8002b9c <TIM_SlaveTimer_SetConfig+0x110>
 8002ae2:	2b50      	cmp	r3, #80	; 0x50
 8002ae4:	d046      	beq.n	8002b74 <TIM_SlaveTimer_SetConfig+0xe8>
 8002ae6:	2b50      	cmp	r3, #80	; 0x50
 8002ae8:	d858      	bhi.n	8002b9c <TIM_SlaveTimer_SetConfig+0x110>
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d019      	beq.n	8002b22 <TIM_SlaveTimer_SetConfig+0x96>
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d854      	bhi.n	8002b9c <TIM_SlaveTimer_SetConfig+0x110>
 8002af2:	2b30      	cmp	r3, #48	; 0x30
 8002af4:	d055      	beq.n	8002ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8002af6:	2b30      	cmp	r3, #48	; 0x30
 8002af8:	d850      	bhi.n	8002b9c <TIM_SlaveTimer_SetConfig+0x110>
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d051      	beq.n	8002ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d84c      	bhi.n	8002b9c <TIM_SlaveTimer_SetConfig+0x110>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04d      	beq.n	8002ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d04b      	beq.n	8002ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8002b0a:	e047      	b.n	8002b9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002b1c:	f000 f9c6 	bl	8002eac <TIM_ETR_SetConfig>
      break;
 8002b20:	e040      	b.n	8002ba4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d101      	bne.n	8002b2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e03b      	b.n	8002ba6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
      break;
 8002b72:	e017      	b.n	8002ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b80:	461a      	mov	r2, r3
 8002b82:	f000 f869 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      break;
 8002b86:	e00d      	b.n	8002ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b94:	461a      	mov	r2, r3
 8002b96:	f000 f8c9 	bl	8002d2c <TIM_TI2_ConfigInputStage>
      break;
 8002b9a:	e003      	b.n	8002ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba0:	e000      	b.n	8002ba4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002ba2:	bf00      	nop
  }

  return status;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f023 0201 	bic.w	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <TIM_TI1_SetConfig+0xa0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_TI1_SetConfig+0x3e>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d003      	beq.n	8002bee <TIM_TI1_SetConfig+0x3e>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <TIM_TI1_SetConfig+0xa4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <TIM_TI1_SetConfig+0x42>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <TIM_TI1_SetConfig+0x44>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e003      	b.n	8002c12 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f023 030a 	bic.w	r3, r3, #10
 8002c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 030a 	and.w	r3, r3, #10
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400

08002c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0201 	bic.w	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 030a 	bic.w	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f023 0210 	bic.w	r2, r3, #16
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	031b      	lsls	r3, r3, #12
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d06:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0210 	bic.w	r2, r3, #16
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	031b      	lsls	r3, r3, #12
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	031b      	lsls	r3, r3, #12
 8002e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	621a      	str	r2, [r3, #32]
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f043 0307 	orr.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	609a      	str	r2, [r3, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b087      	sub	sp, #28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2201      	movs	r2, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e041      	b.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d004      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10c      	bne.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002faa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40000400 	.word	0x40000400

08002fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e042      	b.n	800307c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fcc6 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f9e5 	bl	80033f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b20      	cmp	r3, #32
 800309c:	d156      	bne.n	800314c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_UART_Transmit_DMA+0x26>
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e04f      	b.n	800314e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2221      	movs	r2, #33	; 0x21
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_UART_Transmit_DMA+0xd4>)
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_UART_Transmit_DMA+0xd8>)
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_UART_Transmit_DMA+0xdc>)
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	2200      	movs	r2, #0
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	461a      	mov	r2, r3
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f7fd ff25 	bl	8000f54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003112:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3314      	adds	r3, #20
 800311a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	617b      	str	r3, [r7, #20]
   return(result);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003134:	627a      	str	r2, [r7, #36]	; 0x24
 8003136:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6a39      	ldr	r1, [r7, #32]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	61fb      	str	r3, [r7, #28]
   return(result);
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e5      	bne.n	8003114 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3730      	adds	r7, #48	; 0x30
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	0800319b 	.word	0x0800319b
 800315c:	08003235 	.word	0x08003235
 8003160:	08003251 	.word	0x08003251

08003164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b090      	sub	sp, #64	; 0x40
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d137      	bne.n	8003226 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80031b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b8:	2200      	movs	r2, #0
 80031ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3314      	adds	r3, #20
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	623b      	str	r3, [r7, #32]
   return(result);
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3314      	adds	r3, #20
 80031da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031dc:	633a      	str	r2, [r7, #48]	; 0x30
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e5      	bne.n	80031bc <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
 8003208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003210:	61fa      	str	r2, [r7, #28]
 8003212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	69b9      	ldr	r1, [r7, #24]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	617b      	str	r3, [r7, #20]
   return(result);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e5      	bne.n	80031f0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003224:	e002      	b.n	800322c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003226:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003228:	f7ff ff9c 	bl	8003164 <HAL_UART_TxCpltCallback>
}
 800322c:	bf00      	nop
 800322e:	3740      	adds	r7, #64	; 0x40
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff ff97 	bl	8003176 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b21      	cmp	r3, #33	; 0x21
 8003282:	d108      	bne.n	8003296 <UART_DMAError+0x46>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2200      	movs	r2, #0
 800328e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003290:	68b8      	ldr	r0, [r7, #8]
 8003292:	f000 f827 	bl	80032e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b22      	cmp	r3, #34	; 0x22
 80032b6:	d108      	bne.n	80032ca <UART_DMAError+0x7a>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2200      	movs	r2, #0
 80032c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f000 f834 	bl	8003332 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d6:	68b8      	ldr	r0, [r7, #8]
 80032d8:	f7ff ff56 	bl	8003188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	61ba      	str	r2, [r7, #24]
 800330e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6979      	ldr	r1, [r7, #20]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	613b      	str	r3, [r7, #16]
   return(result);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003328:	bf00      	nop
 800332a:	3724      	adds	r7, #36	; 0x24
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003332:	b480      	push	{r7}
 8003334:	b095      	sub	sp, #84	; 0x54
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335a:	643a      	str	r2, [r7, #64]	; 0x40
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e5      	bne.n	800333a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3314      	adds	r3, #20
 8003374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	61fb      	str	r3, [r7, #28]
   return(result);
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3314      	adds	r3, #20
 800338c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800338e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e5      	bne.n	800336e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d119      	bne.n	80033de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f023 0310 	bic.w	r3, r3, #16
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ca:	61ba      	str	r2, [r7, #24]
 80033cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6979      	ldr	r1, [r7, #20]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	613b      	str	r3, [r7, #16]
   return(result);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e5      	bne.n	80033aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033ec:	bf00      	nop
 80033ee:	3754      	adds	r7, #84	; 0x54
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
	...

080033f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003432:	f023 030c 	bic.w	r3, r3, #12
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	430b      	orrs	r3, r1
 800343e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <UART_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7fe fdc2 	bl	8001fe8 <HAL_RCC_GetPCLK2Freq>
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	e002      	b.n	800346e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe fdaa 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 800346c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009a      	lsls	r2, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <UART_SetConfig+0x118>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	0119      	lsls	r1, r3, #4
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <UART_SetConfig+0x118>)
 80034a6:	fba3 0302 	umull	r0, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2064      	movs	r0, #100	; 0x64
 80034ae:	fb00 f303 	mul.w	r3, r0, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	3332      	adds	r3, #50	; 0x32
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <UART_SetConfig+0x118>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c4:	4419      	add	r1, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009a      	lsls	r2, r3, #2
 80034d0:	441a      	add	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <UART_SetConfig+0x118>)
 80034de:	fba3 0302 	umull	r0, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2064      	movs	r0, #100	; 0x64
 80034e6:	fb00 f303 	mul.w	r3, r0, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	3332      	adds	r3, #50	; 0x32
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <UART_SetConfig+0x118>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	440a      	add	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40013800 	.word	0x40013800
 8003510:	51eb851f 	.word	0x51eb851f

08003514 <sniprintf>:
 8003514:	b40c      	push	{r2, r3}
 8003516:	b530      	push	{r4, r5, lr}
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <sniprintf+0x64>)
 800351a:	1e0c      	subs	r4, r1, #0
 800351c:	681d      	ldr	r5, [r3, #0]
 800351e:	b09d      	sub	sp, #116	; 0x74
 8003520:	da08      	bge.n	8003534 <sniprintf+0x20>
 8003522:	238b      	movs	r3, #139	; 0x8b
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	602b      	str	r3, [r5, #0]
 800352a:	b01d      	add	sp, #116	; 0x74
 800352c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003530:	b002      	add	sp, #8
 8003532:	4770      	bx	lr
 8003534:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003538:	f8ad 3014 	strh.w	r3, [sp, #20]
 800353c:	bf0c      	ite	eq
 800353e:	4623      	moveq	r3, r4
 8003540:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	9307      	str	r3, [sp, #28]
 8003548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354c:	9002      	str	r0, [sp, #8]
 800354e:	9006      	str	r0, [sp, #24]
 8003550:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003554:	4628      	mov	r0, r5
 8003556:	ab21      	add	r3, sp, #132	; 0x84
 8003558:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800355a:	a902      	add	r1, sp, #8
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	f000 f98f 	bl	8003880 <_svfiprintf_r>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	bfbc      	itt	lt
 8003566:	238b      	movlt	r3, #139	; 0x8b
 8003568:	602b      	strlt	r3, [r5, #0]
 800356a:	2c00      	cmp	r4, #0
 800356c:	d0dd      	beq.n	800352a <sniprintf+0x16>
 800356e:	2200      	movs	r2, #0
 8003570:	9b02      	ldr	r3, [sp, #8]
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e7d9      	b.n	800352a <sniprintf+0x16>
 8003576:	bf00      	nop
 8003578:	20000058 	.word	0x20000058

0800357c <memset>:
 800357c:	4603      	mov	r3, r0
 800357e:	4402      	add	r2, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <__errno>:
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <__errno+0x8>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000058 	.word	0x20000058

08003598 <__libc_init_array>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	2600      	movs	r6, #0
 800359c:	4d0c      	ldr	r5, [pc, #48]	; (80035d0 <__libc_init_array+0x38>)
 800359e:	4c0d      	ldr	r4, [pc, #52]	; (80035d4 <__libc_init_array+0x3c>)
 80035a0:	1b64      	subs	r4, r4, r5
 80035a2:	10a4      	asrs	r4, r4, #2
 80035a4:	42a6      	cmp	r6, r4
 80035a6:	d109      	bne.n	80035bc <__libc_init_array+0x24>
 80035a8:	f000 fc7a 	bl	8003ea0 <_init>
 80035ac:	2600      	movs	r6, #0
 80035ae:	4d0a      	ldr	r5, [pc, #40]	; (80035d8 <__libc_init_array+0x40>)
 80035b0:	4c0a      	ldr	r4, [pc, #40]	; (80035dc <__libc_init_array+0x44>)
 80035b2:	1b64      	subs	r4, r4, r5
 80035b4:	10a4      	asrs	r4, r4, #2
 80035b6:	42a6      	cmp	r6, r4
 80035b8:	d105      	bne.n	80035c6 <__libc_init_array+0x2e>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c0:	4798      	blx	r3
 80035c2:	3601      	adds	r6, #1
 80035c4:	e7ee      	b.n	80035a4 <__libc_init_array+0xc>
 80035c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ca:	4798      	blx	r3
 80035cc:	3601      	adds	r6, #1
 80035ce:	e7f2      	b.n	80035b6 <__libc_init_array+0x1e>
 80035d0:	08003f3c 	.word	0x08003f3c
 80035d4:	08003f3c 	.word	0x08003f3c
 80035d8:	08003f3c 	.word	0x08003f3c
 80035dc:	08003f40 	.word	0x08003f40

080035e0 <__retarget_lock_acquire_recursive>:
 80035e0:	4770      	bx	lr

080035e2 <__retarget_lock_release_recursive>:
 80035e2:	4770      	bx	lr

080035e4 <_free_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	4605      	mov	r5, r0
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d040      	beq.n	800366e <_free_r+0x8a>
 80035ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035f0:	1f0c      	subs	r4, r1, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bfb8      	it	lt
 80035f6:	18e4      	addlt	r4, r4, r3
 80035f8:	f000 f8dc 	bl	80037b4 <__malloc_lock>
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <_free_r+0x8c>)
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	b933      	cbnz	r3, 8003610 <_free_r+0x2c>
 8003602:	6063      	str	r3, [r4, #4]
 8003604:	6014      	str	r4, [r2, #0]
 8003606:	4628      	mov	r0, r5
 8003608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800360c:	f000 b8d8 	b.w	80037c0 <__malloc_unlock>
 8003610:	42a3      	cmp	r3, r4
 8003612:	d908      	bls.n	8003626 <_free_r+0x42>
 8003614:	6820      	ldr	r0, [r4, #0]
 8003616:	1821      	adds	r1, r4, r0
 8003618:	428b      	cmp	r3, r1
 800361a:	bf01      	itttt	eq
 800361c:	6819      	ldreq	r1, [r3, #0]
 800361e:	685b      	ldreq	r3, [r3, #4]
 8003620:	1809      	addeq	r1, r1, r0
 8003622:	6021      	streq	r1, [r4, #0]
 8003624:	e7ed      	b.n	8003602 <_free_r+0x1e>
 8003626:	461a      	mov	r2, r3
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b10b      	cbz	r3, 8003630 <_free_r+0x4c>
 800362c:	42a3      	cmp	r3, r4
 800362e:	d9fa      	bls.n	8003626 <_free_r+0x42>
 8003630:	6811      	ldr	r1, [r2, #0]
 8003632:	1850      	adds	r0, r2, r1
 8003634:	42a0      	cmp	r0, r4
 8003636:	d10b      	bne.n	8003650 <_free_r+0x6c>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	4401      	add	r1, r0
 800363c:	1850      	adds	r0, r2, r1
 800363e:	4283      	cmp	r3, r0
 8003640:	6011      	str	r1, [r2, #0]
 8003642:	d1e0      	bne.n	8003606 <_free_r+0x22>
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4408      	add	r0, r1
 800364a:	6010      	str	r0, [r2, #0]
 800364c:	6053      	str	r3, [r2, #4]
 800364e:	e7da      	b.n	8003606 <_free_r+0x22>
 8003650:	d902      	bls.n	8003658 <_free_r+0x74>
 8003652:	230c      	movs	r3, #12
 8003654:	602b      	str	r3, [r5, #0]
 8003656:	e7d6      	b.n	8003606 <_free_r+0x22>
 8003658:	6820      	ldr	r0, [r4, #0]
 800365a:	1821      	adds	r1, r4, r0
 800365c:	428b      	cmp	r3, r1
 800365e:	bf01      	itttt	eq
 8003660:	6819      	ldreq	r1, [r3, #0]
 8003662:	685b      	ldreq	r3, [r3, #4]
 8003664:	1809      	addeq	r1, r1, r0
 8003666:	6021      	streq	r1, [r4, #0]
 8003668:	6063      	str	r3, [r4, #4]
 800366a:	6054      	str	r4, [r2, #4]
 800366c:	e7cb      	b.n	8003606 <_free_r+0x22>
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000390 	.word	0x20000390

08003674 <sbrk_aligned>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	4e0e      	ldr	r6, [pc, #56]	; (80036b0 <sbrk_aligned+0x3c>)
 8003678:	460c      	mov	r4, r1
 800367a:	6831      	ldr	r1, [r6, #0]
 800367c:	4605      	mov	r5, r0
 800367e:	b911      	cbnz	r1, 8003686 <sbrk_aligned+0x12>
 8003680:	f000 fbaa 	bl	8003dd8 <_sbrk_r>
 8003684:	6030      	str	r0, [r6, #0]
 8003686:	4621      	mov	r1, r4
 8003688:	4628      	mov	r0, r5
 800368a:	f000 fba5 	bl	8003dd8 <_sbrk_r>
 800368e:	1c43      	adds	r3, r0, #1
 8003690:	d00a      	beq.n	80036a8 <sbrk_aligned+0x34>
 8003692:	1cc4      	adds	r4, r0, #3
 8003694:	f024 0403 	bic.w	r4, r4, #3
 8003698:	42a0      	cmp	r0, r4
 800369a:	d007      	beq.n	80036ac <sbrk_aligned+0x38>
 800369c:	1a21      	subs	r1, r4, r0
 800369e:	4628      	mov	r0, r5
 80036a0:	f000 fb9a 	bl	8003dd8 <_sbrk_r>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d101      	bne.n	80036ac <sbrk_aligned+0x38>
 80036a8:	f04f 34ff 	mov.w	r4, #4294967295
 80036ac:	4620      	mov	r0, r4
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	20000394 	.word	0x20000394

080036b4 <_malloc_r>:
 80036b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036b8:	1ccd      	adds	r5, r1, #3
 80036ba:	f025 0503 	bic.w	r5, r5, #3
 80036be:	3508      	adds	r5, #8
 80036c0:	2d0c      	cmp	r5, #12
 80036c2:	bf38      	it	cc
 80036c4:	250c      	movcc	r5, #12
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	4607      	mov	r7, r0
 80036ca:	db01      	blt.n	80036d0 <_malloc_r+0x1c>
 80036cc:	42a9      	cmp	r1, r5
 80036ce:	d905      	bls.n	80036dc <_malloc_r+0x28>
 80036d0:	230c      	movs	r3, #12
 80036d2:	2600      	movs	r6, #0
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4630      	mov	r0, r6
 80036d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037b0 <_malloc_r+0xfc>
 80036e0:	f000 f868 	bl	80037b4 <__malloc_lock>
 80036e4:	f8d8 3000 	ldr.w	r3, [r8]
 80036e8:	461c      	mov	r4, r3
 80036ea:	bb5c      	cbnz	r4, 8003744 <_malloc_r+0x90>
 80036ec:	4629      	mov	r1, r5
 80036ee:	4638      	mov	r0, r7
 80036f0:	f7ff ffc0 	bl	8003674 <sbrk_aligned>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	4604      	mov	r4, r0
 80036f8:	d155      	bne.n	80037a6 <_malloc_r+0xf2>
 80036fa:	f8d8 4000 	ldr.w	r4, [r8]
 80036fe:	4626      	mov	r6, r4
 8003700:	2e00      	cmp	r6, #0
 8003702:	d145      	bne.n	8003790 <_malloc_r+0xdc>
 8003704:	2c00      	cmp	r4, #0
 8003706:	d048      	beq.n	800379a <_malloc_r+0xe6>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	4631      	mov	r1, r6
 800370c:	4638      	mov	r0, r7
 800370e:	eb04 0903 	add.w	r9, r4, r3
 8003712:	f000 fb61 	bl	8003dd8 <_sbrk_r>
 8003716:	4581      	cmp	r9, r0
 8003718:	d13f      	bne.n	800379a <_malloc_r+0xe6>
 800371a:	6821      	ldr	r1, [r4, #0]
 800371c:	4638      	mov	r0, r7
 800371e:	1a6d      	subs	r5, r5, r1
 8003720:	4629      	mov	r1, r5
 8003722:	f7ff ffa7 	bl	8003674 <sbrk_aligned>
 8003726:	3001      	adds	r0, #1
 8003728:	d037      	beq.n	800379a <_malloc_r+0xe6>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	442b      	add	r3, r5
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	f8d8 3000 	ldr.w	r3, [r8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d038      	beq.n	80037aa <_malloc_r+0xf6>
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	42a2      	cmp	r2, r4
 800373c:	d12b      	bne.n	8003796 <_malloc_r+0xe2>
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	e00f      	b.n	8003764 <_malloc_r+0xb0>
 8003744:	6822      	ldr	r2, [r4, #0]
 8003746:	1b52      	subs	r2, r2, r5
 8003748:	d41f      	bmi.n	800378a <_malloc_r+0xd6>
 800374a:	2a0b      	cmp	r2, #11
 800374c:	d917      	bls.n	800377e <_malloc_r+0xca>
 800374e:	1961      	adds	r1, r4, r5
 8003750:	42a3      	cmp	r3, r4
 8003752:	6025      	str	r5, [r4, #0]
 8003754:	bf18      	it	ne
 8003756:	6059      	strne	r1, [r3, #4]
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	bf08      	it	eq
 800375c:	f8c8 1000 	streq.w	r1, [r8]
 8003760:	5162      	str	r2, [r4, r5]
 8003762:	604b      	str	r3, [r1, #4]
 8003764:	4638      	mov	r0, r7
 8003766:	f104 060b 	add.w	r6, r4, #11
 800376a:	f000 f829 	bl	80037c0 <__malloc_unlock>
 800376e:	f026 0607 	bic.w	r6, r6, #7
 8003772:	1d23      	adds	r3, r4, #4
 8003774:	1af2      	subs	r2, r6, r3
 8003776:	d0ae      	beq.n	80036d6 <_malloc_r+0x22>
 8003778:	1b9b      	subs	r3, r3, r6
 800377a:	50a3      	str	r3, [r4, r2]
 800377c:	e7ab      	b.n	80036d6 <_malloc_r+0x22>
 800377e:	42a3      	cmp	r3, r4
 8003780:	6862      	ldr	r2, [r4, #4]
 8003782:	d1dd      	bne.n	8003740 <_malloc_r+0x8c>
 8003784:	f8c8 2000 	str.w	r2, [r8]
 8003788:	e7ec      	b.n	8003764 <_malloc_r+0xb0>
 800378a:	4623      	mov	r3, r4
 800378c:	6864      	ldr	r4, [r4, #4]
 800378e:	e7ac      	b.n	80036ea <_malloc_r+0x36>
 8003790:	4634      	mov	r4, r6
 8003792:	6876      	ldr	r6, [r6, #4]
 8003794:	e7b4      	b.n	8003700 <_malloc_r+0x4c>
 8003796:	4613      	mov	r3, r2
 8003798:	e7cc      	b.n	8003734 <_malloc_r+0x80>
 800379a:	230c      	movs	r3, #12
 800379c:	4638      	mov	r0, r7
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	f000 f80e 	bl	80037c0 <__malloc_unlock>
 80037a4:	e797      	b.n	80036d6 <_malloc_r+0x22>
 80037a6:	6025      	str	r5, [r4, #0]
 80037a8:	e7dc      	b.n	8003764 <_malloc_r+0xb0>
 80037aa:	605b      	str	r3, [r3, #4]
 80037ac:	deff      	udf	#255	; 0xff
 80037ae:	bf00      	nop
 80037b0:	20000390 	.word	0x20000390

080037b4 <__malloc_lock>:
 80037b4:	4801      	ldr	r0, [pc, #4]	; (80037bc <__malloc_lock+0x8>)
 80037b6:	f7ff bf13 	b.w	80035e0 <__retarget_lock_acquire_recursive>
 80037ba:	bf00      	nop
 80037bc:	2000038c 	.word	0x2000038c

080037c0 <__malloc_unlock>:
 80037c0:	4801      	ldr	r0, [pc, #4]	; (80037c8 <__malloc_unlock+0x8>)
 80037c2:	f7ff bf0e 	b.w	80035e2 <__retarget_lock_release_recursive>
 80037c6:	bf00      	nop
 80037c8:	2000038c 	.word	0x2000038c

080037cc <__ssputs_r>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	461f      	mov	r7, r3
 80037d2:	688e      	ldr	r6, [r1, #8]
 80037d4:	4682      	mov	sl, r0
 80037d6:	42be      	cmp	r6, r7
 80037d8:	460c      	mov	r4, r1
 80037da:	4690      	mov	r8, r2
 80037dc:	680b      	ldr	r3, [r1, #0]
 80037de:	d82c      	bhi.n	800383a <__ssputs_r+0x6e>
 80037e0:	898a      	ldrh	r2, [r1, #12]
 80037e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037e6:	d026      	beq.n	8003836 <__ssputs_r+0x6a>
 80037e8:	6965      	ldr	r5, [r4, #20]
 80037ea:	6909      	ldr	r1, [r1, #16]
 80037ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037f0:	eba3 0901 	sub.w	r9, r3, r1
 80037f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037f8:	1c7b      	adds	r3, r7, #1
 80037fa:	444b      	add	r3, r9
 80037fc:	106d      	asrs	r5, r5, #1
 80037fe:	429d      	cmp	r5, r3
 8003800:	bf38      	it	cc
 8003802:	461d      	movcc	r5, r3
 8003804:	0553      	lsls	r3, r2, #21
 8003806:	d527      	bpl.n	8003858 <__ssputs_r+0x8c>
 8003808:	4629      	mov	r1, r5
 800380a:	f7ff ff53 	bl	80036b4 <_malloc_r>
 800380e:	4606      	mov	r6, r0
 8003810:	b360      	cbz	r0, 800386c <__ssputs_r+0xa0>
 8003812:	464a      	mov	r2, r9
 8003814:	6921      	ldr	r1, [r4, #16]
 8003816:	f000 fafd 	bl	8003e14 <memcpy>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	6126      	str	r6, [r4, #16]
 8003828:	444e      	add	r6, r9
 800382a:	6026      	str	r6, [r4, #0]
 800382c:	463e      	mov	r6, r7
 800382e:	6165      	str	r5, [r4, #20]
 8003830:	eba5 0509 	sub.w	r5, r5, r9
 8003834:	60a5      	str	r5, [r4, #8]
 8003836:	42be      	cmp	r6, r7
 8003838:	d900      	bls.n	800383c <__ssputs_r+0x70>
 800383a:	463e      	mov	r6, r7
 800383c:	4632      	mov	r2, r6
 800383e:	4641      	mov	r1, r8
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	f000 faaf 	bl	8003da4 <memmove>
 8003846:	2000      	movs	r0, #0
 8003848:	68a3      	ldr	r3, [r4, #8]
 800384a:	1b9b      	subs	r3, r3, r6
 800384c:	60a3      	str	r3, [r4, #8]
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	4433      	add	r3, r6
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003858:	462a      	mov	r2, r5
 800385a:	f000 fae9 	bl	8003e30 <_realloc_r>
 800385e:	4606      	mov	r6, r0
 8003860:	2800      	cmp	r0, #0
 8003862:	d1e0      	bne.n	8003826 <__ssputs_r+0x5a>
 8003864:	4650      	mov	r0, sl
 8003866:	6921      	ldr	r1, [r4, #16]
 8003868:	f7ff febc 	bl	80035e4 <_free_r>
 800386c:	230c      	movs	r3, #12
 800386e:	f8ca 3000 	str.w	r3, [sl]
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	e7e9      	b.n	8003854 <__ssputs_r+0x88>

08003880 <_svfiprintf_r>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	4698      	mov	r8, r3
 8003886:	898b      	ldrh	r3, [r1, #12]
 8003888:	4607      	mov	r7, r0
 800388a:	061b      	lsls	r3, r3, #24
 800388c:	460d      	mov	r5, r1
 800388e:	4614      	mov	r4, r2
 8003890:	b09d      	sub	sp, #116	; 0x74
 8003892:	d50e      	bpl.n	80038b2 <_svfiprintf_r+0x32>
 8003894:	690b      	ldr	r3, [r1, #16]
 8003896:	b963      	cbnz	r3, 80038b2 <_svfiprintf_r+0x32>
 8003898:	2140      	movs	r1, #64	; 0x40
 800389a:	f7ff ff0b 	bl	80036b4 <_malloc_r>
 800389e:	6028      	str	r0, [r5, #0]
 80038a0:	6128      	str	r0, [r5, #16]
 80038a2:	b920      	cbnz	r0, 80038ae <_svfiprintf_r+0x2e>
 80038a4:	230c      	movs	r3, #12
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	e0d0      	b.n	8003a50 <_svfiprintf_r+0x1d0>
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	616b      	str	r3, [r5, #20]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9309      	str	r3, [sp, #36]	; 0x24
 80038b6:	2320      	movs	r3, #32
 80038b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038bc:	2330      	movs	r3, #48	; 0x30
 80038be:	f04f 0901 	mov.w	r9, #1
 80038c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038c6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003a68 <_svfiprintf_r+0x1e8>
 80038ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ce:	4623      	mov	r3, r4
 80038d0:	469a      	mov	sl, r3
 80038d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038d6:	b10a      	cbz	r2, 80038dc <_svfiprintf_r+0x5c>
 80038d8:	2a25      	cmp	r2, #37	; 0x25
 80038da:	d1f9      	bne.n	80038d0 <_svfiprintf_r+0x50>
 80038dc:	ebba 0b04 	subs.w	fp, sl, r4
 80038e0:	d00b      	beq.n	80038fa <_svfiprintf_r+0x7a>
 80038e2:	465b      	mov	r3, fp
 80038e4:	4622      	mov	r2, r4
 80038e6:	4629      	mov	r1, r5
 80038e8:	4638      	mov	r0, r7
 80038ea:	f7ff ff6f 	bl	80037cc <__ssputs_r>
 80038ee:	3001      	adds	r0, #1
 80038f0:	f000 80a9 	beq.w	8003a46 <_svfiprintf_r+0x1c6>
 80038f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038f6:	445a      	add	r2, fp
 80038f8:	9209      	str	r2, [sp, #36]	; 0x24
 80038fa:	f89a 3000 	ldrb.w	r3, [sl]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a1 	beq.w	8003a46 <_svfiprintf_r+0x1c6>
 8003904:	2300      	movs	r3, #0
 8003906:	f04f 32ff 	mov.w	r2, #4294967295
 800390a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800390e:	f10a 0a01 	add.w	sl, sl, #1
 8003912:	9304      	str	r3, [sp, #16]
 8003914:	9307      	str	r3, [sp, #28]
 8003916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800391a:	931a      	str	r3, [sp, #104]	; 0x68
 800391c:	4654      	mov	r4, sl
 800391e:	2205      	movs	r2, #5
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	4850      	ldr	r0, [pc, #320]	; (8003a68 <_svfiprintf_r+0x1e8>)
 8003926:	f000 fa67 	bl	8003df8 <memchr>
 800392a:	9a04      	ldr	r2, [sp, #16]
 800392c:	b9d8      	cbnz	r0, 8003966 <_svfiprintf_r+0xe6>
 800392e:	06d0      	lsls	r0, r2, #27
 8003930:	bf44      	itt	mi
 8003932:	2320      	movmi	r3, #32
 8003934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003938:	0711      	lsls	r1, r2, #28
 800393a:	bf44      	itt	mi
 800393c:	232b      	movmi	r3, #43	; 0x2b
 800393e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003942:	f89a 3000 	ldrb.w	r3, [sl]
 8003946:	2b2a      	cmp	r3, #42	; 0x2a
 8003948:	d015      	beq.n	8003976 <_svfiprintf_r+0xf6>
 800394a:	4654      	mov	r4, sl
 800394c:	2000      	movs	r0, #0
 800394e:	f04f 0c0a 	mov.w	ip, #10
 8003952:	9a07      	ldr	r2, [sp, #28]
 8003954:	4621      	mov	r1, r4
 8003956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800395a:	3b30      	subs	r3, #48	; 0x30
 800395c:	2b09      	cmp	r3, #9
 800395e:	d94d      	bls.n	80039fc <_svfiprintf_r+0x17c>
 8003960:	b1b0      	cbz	r0, 8003990 <_svfiprintf_r+0x110>
 8003962:	9207      	str	r2, [sp, #28]
 8003964:	e014      	b.n	8003990 <_svfiprintf_r+0x110>
 8003966:	eba0 0308 	sub.w	r3, r0, r8
 800396a:	fa09 f303 	lsl.w	r3, r9, r3
 800396e:	4313      	orrs	r3, r2
 8003970:	46a2      	mov	sl, r4
 8003972:	9304      	str	r3, [sp, #16]
 8003974:	e7d2      	b.n	800391c <_svfiprintf_r+0x9c>
 8003976:	9b03      	ldr	r3, [sp, #12]
 8003978:	1d19      	adds	r1, r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	9103      	str	r1, [sp, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfbb      	ittet	lt
 8003982:	425b      	neglt	r3, r3
 8003984:	f042 0202 	orrlt.w	r2, r2, #2
 8003988:	9307      	strge	r3, [sp, #28]
 800398a:	9307      	strlt	r3, [sp, #28]
 800398c:	bfb8      	it	lt
 800398e:	9204      	strlt	r2, [sp, #16]
 8003990:	7823      	ldrb	r3, [r4, #0]
 8003992:	2b2e      	cmp	r3, #46	; 0x2e
 8003994:	d10c      	bne.n	80039b0 <_svfiprintf_r+0x130>
 8003996:	7863      	ldrb	r3, [r4, #1]
 8003998:	2b2a      	cmp	r3, #42	; 0x2a
 800399a:	d134      	bne.n	8003a06 <_svfiprintf_r+0x186>
 800399c:	9b03      	ldr	r3, [sp, #12]
 800399e:	3402      	adds	r4, #2
 80039a0:	1d1a      	adds	r2, r3, #4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	9203      	str	r2, [sp, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bfb8      	it	lt
 80039aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ae:	9305      	str	r3, [sp, #20]
 80039b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003a6c <_svfiprintf_r+0x1ec>
 80039b4:	2203      	movs	r2, #3
 80039b6:	4650      	mov	r0, sl
 80039b8:	7821      	ldrb	r1, [r4, #0]
 80039ba:	f000 fa1d 	bl	8003df8 <memchr>
 80039be:	b138      	cbz	r0, 80039d0 <_svfiprintf_r+0x150>
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	9b04      	ldr	r3, [sp, #16]
 80039c4:	eba0 000a 	sub.w	r0, r0, sl
 80039c8:	4082      	lsls	r2, r0
 80039ca:	4313      	orrs	r3, r2
 80039cc:	3401      	adds	r4, #1
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d4:	2206      	movs	r2, #6
 80039d6:	4826      	ldr	r0, [pc, #152]	; (8003a70 <_svfiprintf_r+0x1f0>)
 80039d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039dc:	f000 fa0c 	bl	8003df8 <memchr>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d038      	beq.n	8003a56 <_svfiprintf_r+0x1d6>
 80039e4:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <_svfiprintf_r+0x1f4>)
 80039e6:	bb1b      	cbnz	r3, 8003a30 <_svfiprintf_r+0x1b0>
 80039e8:	9b03      	ldr	r3, [sp, #12]
 80039ea:	3307      	adds	r3, #7
 80039ec:	f023 0307 	bic.w	r3, r3, #7
 80039f0:	3308      	adds	r3, #8
 80039f2:	9303      	str	r3, [sp, #12]
 80039f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f6:	4433      	add	r3, r6
 80039f8:	9309      	str	r3, [sp, #36]	; 0x24
 80039fa:	e768      	b.n	80038ce <_svfiprintf_r+0x4e>
 80039fc:	460c      	mov	r4, r1
 80039fe:	2001      	movs	r0, #1
 8003a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a04:	e7a6      	b.n	8003954 <_svfiprintf_r+0xd4>
 8003a06:	2300      	movs	r3, #0
 8003a08:	f04f 0c0a 	mov.w	ip, #10
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	3401      	adds	r4, #1
 8003a10:	9305      	str	r3, [sp, #20]
 8003a12:	4620      	mov	r0, r4
 8003a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a18:	3a30      	subs	r2, #48	; 0x30
 8003a1a:	2a09      	cmp	r2, #9
 8003a1c:	d903      	bls.n	8003a26 <_svfiprintf_r+0x1a6>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0c6      	beq.n	80039b0 <_svfiprintf_r+0x130>
 8003a22:	9105      	str	r1, [sp, #20]
 8003a24:	e7c4      	b.n	80039b0 <_svfiprintf_r+0x130>
 8003a26:	4604      	mov	r4, r0
 8003a28:	2301      	movs	r3, #1
 8003a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a2e:	e7f0      	b.n	8003a12 <_svfiprintf_r+0x192>
 8003a30:	ab03      	add	r3, sp, #12
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	462a      	mov	r2, r5
 8003a36:	4638      	mov	r0, r7
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <_svfiprintf_r+0x1f8>)
 8003a3a:	a904      	add	r1, sp, #16
 8003a3c:	f3af 8000 	nop.w
 8003a40:	1c42      	adds	r2, r0, #1
 8003a42:	4606      	mov	r6, r0
 8003a44:	d1d6      	bne.n	80039f4 <_svfiprintf_r+0x174>
 8003a46:	89ab      	ldrh	r3, [r5, #12]
 8003a48:	065b      	lsls	r3, r3, #25
 8003a4a:	f53f af2d 	bmi.w	80038a8 <_svfiprintf_r+0x28>
 8003a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a50:	b01d      	add	sp, #116	; 0x74
 8003a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a56:	ab03      	add	r3, sp, #12
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	462a      	mov	r2, r5
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <_svfiprintf_r+0x1f8>)
 8003a60:	a904      	add	r1, sp, #16
 8003a62:	f000 f87d 	bl	8003b60 <_printf_i>
 8003a66:	e7eb      	b.n	8003a40 <_svfiprintf_r+0x1c0>
 8003a68:	08003f06 	.word	0x08003f06
 8003a6c:	08003f0c 	.word	0x08003f0c
 8003a70:	08003f10 	.word	0x08003f10
 8003a74:	00000000 	.word	0x00000000
 8003a78:	080037cd 	.word	0x080037cd

08003a7c <_printf_common>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	4616      	mov	r6, r2
 8003a82:	4699      	mov	r9, r3
 8003a84:	688a      	ldr	r2, [r1, #8]
 8003a86:	690b      	ldr	r3, [r1, #16]
 8003a88:	4607      	mov	r7, r0
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	bfb8      	it	lt
 8003a8e:	4613      	movlt	r3, r2
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a96:	460c      	mov	r4, r1
 8003a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a9c:	b10a      	cbz	r2, 8003aa2 <_printf_common+0x26>
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	0699      	lsls	r1, r3, #26
 8003aa6:	bf42      	ittt	mi
 8003aa8:	6833      	ldrmi	r3, [r6, #0]
 8003aaa:	3302      	addmi	r3, #2
 8003aac:	6033      	strmi	r3, [r6, #0]
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	f015 0506 	ands.w	r5, r5, #6
 8003ab4:	d106      	bne.n	8003ac4 <_printf_common+0x48>
 8003ab6:	f104 0a19 	add.w	sl, r4, #25
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	42ab      	cmp	r3, r5
 8003ac2:	dc2b      	bgt.n	8003b1c <_printf_common+0xa0>
 8003ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ac8:	1e13      	subs	r3, r2, #0
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	0692      	lsls	r2, r2, #26
 8003ad2:	d430      	bmi.n	8003b36 <_printf_common+0xba>
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003adc:	47c0      	blx	r8
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d023      	beq.n	8003b2a <_printf_common+0xae>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	6922      	ldr	r2, [r4, #16]
 8003ae6:	f003 0306 	and.w	r3, r3, #6
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	bf14      	ite	ne
 8003aee:	2500      	movne	r5, #0
 8003af0:	6833      	ldreq	r3, [r6, #0]
 8003af2:	f04f 0600 	mov.w	r6, #0
 8003af6:	bf08      	it	eq
 8003af8:	68e5      	ldreq	r5, [r4, #12]
 8003afa:	f104 041a 	add.w	r4, r4, #26
 8003afe:	bf08      	it	eq
 8003b00:	1aed      	subeq	r5, r5, r3
 8003b02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b06:	bf08      	it	eq
 8003b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bfc4      	itt	gt
 8003b10:	1a9b      	subgt	r3, r3, r2
 8003b12:	18ed      	addgt	r5, r5, r3
 8003b14:	42b5      	cmp	r5, r6
 8003b16:	d11a      	bne.n	8003b4e <_printf_common+0xd2>
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e008      	b.n	8003b2e <_printf_common+0xb2>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4652      	mov	r2, sl
 8003b20:	4649      	mov	r1, r9
 8003b22:	4638      	mov	r0, r7
 8003b24:	47c0      	blx	r8
 8003b26:	3001      	adds	r0, #1
 8003b28:	d103      	bne.n	8003b32 <_printf_common+0xb6>
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b32:	3501      	adds	r5, #1
 8003b34:	e7c1      	b.n	8003aba <_printf_common+0x3e>
 8003b36:	2030      	movs	r0, #48	; 0x30
 8003b38:	18e1      	adds	r1, r4, r3
 8003b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b44:	4422      	add	r2, r4
 8003b46:	3302      	adds	r3, #2
 8003b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b4c:	e7c2      	b.n	8003ad4 <_printf_common+0x58>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4622      	mov	r2, r4
 8003b52:	4649      	mov	r1, r9
 8003b54:	4638      	mov	r0, r7
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d0e6      	beq.n	8003b2a <_printf_common+0xae>
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7d9      	b.n	8003b14 <_printf_common+0x98>

08003b60 <_printf_i>:
 8003b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	7e0f      	ldrb	r7, [r1, #24]
 8003b66:	4691      	mov	r9, r2
 8003b68:	2f78      	cmp	r7, #120	; 0x78
 8003b6a:	4680      	mov	r8, r0
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	469a      	mov	sl, r3
 8003b70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b76:	d807      	bhi.n	8003b88 <_printf_i+0x28>
 8003b78:	2f62      	cmp	r7, #98	; 0x62
 8003b7a:	d80a      	bhi.n	8003b92 <_printf_i+0x32>
 8003b7c:	2f00      	cmp	r7, #0
 8003b7e:	f000 80d5 	beq.w	8003d2c <_printf_i+0x1cc>
 8003b82:	2f58      	cmp	r7, #88	; 0x58
 8003b84:	f000 80c1 	beq.w	8003d0a <_printf_i+0x1aa>
 8003b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b90:	e03a      	b.n	8003c08 <_printf_i+0xa8>
 8003b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b96:	2b15      	cmp	r3, #21
 8003b98:	d8f6      	bhi.n	8003b88 <_printf_i+0x28>
 8003b9a:	a101      	add	r1, pc, #4	; (adr r1, 8003ba0 <_printf_i+0x40>)
 8003b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ba0:	08003bf9 	.word	0x08003bf9
 8003ba4:	08003c0d 	.word	0x08003c0d
 8003ba8:	08003b89 	.word	0x08003b89
 8003bac:	08003b89 	.word	0x08003b89
 8003bb0:	08003b89 	.word	0x08003b89
 8003bb4:	08003b89 	.word	0x08003b89
 8003bb8:	08003c0d 	.word	0x08003c0d
 8003bbc:	08003b89 	.word	0x08003b89
 8003bc0:	08003b89 	.word	0x08003b89
 8003bc4:	08003b89 	.word	0x08003b89
 8003bc8:	08003b89 	.word	0x08003b89
 8003bcc:	08003d13 	.word	0x08003d13
 8003bd0:	08003c39 	.word	0x08003c39
 8003bd4:	08003ccd 	.word	0x08003ccd
 8003bd8:	08003b89 	.word	0x08003b89
 8003bdc:	08003b89 	.word	0x08003b89
 8003be0:	08003d35 	.word	0x08003d35
 8003be4:	08003b89 	.word	0x08003b89
 8003be8:	08003c39 	.word	0x08003c39
 8003bec:	08003b89 	.word	0x08003b89
 8003bf0:	08003b89 	.word	0x08003b89
 8003bf4:	08003cd5 	.word	0x08003cd5
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	602a      	str	r2, [r5, #0]
 8003c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0a0      	b.n	8003d4e <_printf_i+0x1ee>
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	0607      	lsls	r7, r0, #24
 8003c12:	f103 0104 	add.w	r1, r3, #4
 8003c16:	6029      	str	r1, [r5, #0]
 8003c18:	d501      	bpl.n	8003c1e <_printf_i+0xbe>
 8003c1a:	681e      	ldr	r6, [r3, #0]
 8003c1c:	e003      	b.n	8003c26 <_printf_i+0xc6>
 8003c1e:	0646      	lsls	r6, r0, #25
 8003c20:	d5fb      	bpl.n	8003c1a <_printf_i+0xba>
 8003c22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c26:	2e00      	cmp	r6, #0
 8003c28:	da03      	bge.n	8003c32 <_printf_i+0xd2>
 8003c2a:	232d      	movs	r3, #45	; 0x2d
 8003c2c:	4276      	negs	r6, r6
 8003c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c32:	230a      	movs	r3, #10
 8003c34:	4859      	ldr	r0, [pc, #356]	; (8003d9c <_printf_i+0x23c>)
 8003c36:	e012      	b.n	8003c5e <_printf_i+0xfe>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	6820      	ldr	r0, [r4, #0]
 8003c3c:	1d19      	adds	r1, r3, #4
 8003c3e:	6029      	str	r1, [r5, #0]
 8003c40:	0605      	lsls	r5, r0, #24
 8003c42:	d501      	bpl.n	8003c48 <_printf_i+0xe8>
 8003c44:	681e      	ldr	r6, [r3, #0]
 8003c46:	e002      	b.n	8003c4e <_printf_i+0xee>
 8003c48:	0641      	lsls	r1, r0, #25
 8003c4a:	d5fb      	bpl.n	8003c44 <_printf_i+0xe4>
 8003c4c:	881e      	ldrh	r6, [r3, #0]
 8003c4e:	2f6f      	cmp	r7, #111	; 0x6f
 8003c50:	bf0c      	ite	eq
 8003c52:	2308      	moveq	r3, #8
 8003c54:	230a      	movne	r3, #10
 8003c56:	4851      	ldr	r0, [pc, #324]	; (8003d9c <_printf_i+0x23c>)
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c5e:	6865      	ldr	r5, [r4, #4]
 8003c60:	2d00      	cmp	r5, #0
 8003c62:	bfa8      	it	ge
 8003c64:	6821      	ldrge	r1, [r4, #0]
 8003c66:	60a5      	str	r5, [r4, #8]
 8003c68:	bfa4      	itt	ge
 8003c6a:	f021 0104 	bicge.w	r1, r1, #4
 8003c6e:	6021      	strge	r1, [r4, #0]
 8003c70:	b90e      	cbnz	r6, 8003c76 <_printf_i+0x116>
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	d04b      	beq.n	8003d0e <_printf_i+0x1ae>
 8003c76:	4615      	mov	r5, r2
 8003c78:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c7c:	fb03 6711 	mls	r7, r3, r1, r6
 8003c80:	5dc7      	ldrb	r7, [r0, r7]
 8003c82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c86:	4637      	mov	r7, r6
 8003c88:	42bb      	cmp	r3, r7
 8003c8a:	460e      	mov	r6, r1
 8003c8c:	d9f4      	bls.n	8003c78 <_printf_i+0x118>
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d10b      	bne.n	8003caa <_printf_i+0x14a>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	07de      	lsls	r6, r3, #31
 8003c96:	d508      	bpl.n	8003caa <_printf_i+0x14a>
 8003c98:	6923      	ldr	r3, [r4, #16]
 8003c9a:	6861      	ldr	r1, [r4, #4]
 8003c9c:	4299      	cmp	r1, r3
 8003c9e:	bfde      	ittt	le
 8003ca0:	2330      	movle	r3, #48	; 0x30
 8003ca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ca6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003caa:	1b52      	subs	r2, r2, r5
 8003cac:	6122      	str	r2, [r4, #16]
 8003cae:	464b      	mov	r3, r9
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f8cd a000 	str.w	sl, [sp]
 8003cb8:	aa03      	add	r2, sp, #12
 8003cba:	f7ff fedf 	bl	8003a7c <_printf_common>
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d14a      	bne.n	8003d58 <_printf_i+0x1f8>
 8003cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc6:	b004      	add	sp, #16
 8003cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	f043 0320 	orr.w	r3, r3, #32
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	2778      	movs	r7, #120	; 0x78
 8003cd6:	4832      	ldr	r0, [pc, #200]	; (8003da0 <_printf_i+0x240>)
 8003cd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	6829      	ldr	r1, [r5, #0]
 8003ce0:	061f      	lsls	r7, r3, #24
 8003ce2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ce6:	d402      	bmi.n	8003cee <_printf_i+0x18e>
 8003ce8:	065f      	lsls	r7, r3, #25
 8003cea:	bf48      	it	mi
 8003cec:	b2b6      	uxthmi	r6, r6
 8003cee:	07df      	lsls	r7, r3, #31
 8003cf0:	bf48      	it	mi
 8003cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8003cf6:	6029      	str	r1, [r5, #0]
 8003cf8:	bf48      	it	mi
 8003cfa:	6023      	strmi	r3, [r4, #0]
 8003cfc:	b91e      	cbnz	r6, 8003d06 <_printf_i+0x1a6>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	f023 0320 	bic.w	r3, r3, #32
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	2310      	movs	r3, #16
 8003d08:	e7a6      	b.n	8003c58 <_printf_i+0xf8>
 8003d0a:	4824      	ldr	r0, [pc, #144]	; (8003d9c <_printf_i+0x23c>)
 8003d0c:	e7e4      	b.n	8003cd8 <_printf_i+0x178>
 8003d0e:	4615      	mov	r5, r2
 8003d10:	e7bd      	b.n	8003c8e <_printf_i+0x12e>
 8003d12:	682b      	ldr	r3, [r5, #0]
 8003d14:	6826      	ldr	r6, [r4, #0]
 8003d16:	1d18      	adds	r0, r3, #4
 8003d18:	6961      	ldr	r1, [r4, #20]
 8003d1a:	6028      	str	r0, [r5, #0]
 8003d1c:	0635      	lsls	r5, r6, #24
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	d501      	bpl.n	8003d26 <_printf_i+0x1c6>
 8003d22:	6019      	str	r1, [r3, #0]
 8003d24:	e002      	b.n	8003d2c <_printf_i+0x1cc>
 8003d26:	0670      	lsls	r0, r6, #25
 8003d28:	d5fb      	bpl.n	8003d22 <_printf_i+0x1c2>
 8003d2a:	8019      	strh	r1, [r3, #0]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4615      	mov	r5, r2
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	e7bc      	b.n	8003cae <_printf_i+0x14e>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	2100      	movs	r1, #0
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	602a      	str	r2, [r5, #0]
 8003d3c:	681d      	ldr	r5, [r3, #0]
 8003d3e:	6862      	ldr	r2, [r4, #4]
 8003d40:	4628      	mov	r0, r5
 8003d42:	f000 f859 	bl	8003df8 <memchr>
 8003d46:	b108      	cbz	r0, 8003d4c <_printf_i+0x1ec>
 8003d48:	1b40      	subs	r0, r0, r5
 8003d4a:	6060      	str	r0, [r4, #4]
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	6123      	str	r3, [r4, #16]
 8003d50:	2300      	movs	r3, #0
 8003d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d56:	e7aa      	b.n	8003cae <_printf_i+0x14e>
 8003d58:	462a      	mov	r2, r5
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	47d0      	blx	sl
 8003d62:	3001      	adds	r0, #1
 8003d64:	d0ad      	beq.n	8003cc2 <_printf_i+0x162>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	079b      	lsls	r3, r3, #30
 8003d6a:	d413      	bmi.n	8003d94 <_printf_i+0x234>
 8003d6c:	68e0      	ldr	r0, [r4, #12]
 8003d6e:	9b03      	ldr	r3, [sp, #12]
 8003d70:	4298      	cmp	r0, r3
 8003d72:	bfb8      	it	lt
 8003d74:	4618      	movlt	r0, r3
 8003d76:	e7a6      	b.n	8003cc6 <_printf_i+0x166>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	4632      	mov	r2, r6
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	4640      	mov	r0, r8
 8003d80:	47d0      	blx	sl
 8003d82:	3001      	adds	r0, #1
 8003d84:	d09d      	beq.n	8003cc2 <_printf_i+0x162>
 8003d86:	3501      	adds	r5, #1
 8003d88:	68e3      	ldr	r3, [r4, #12]
 8003d8a:	9903      	ldr	r1, [sp, #12]
 8003d8c:	1a5b      	subs	r3, r3, r1
 8003d8e:	42ab      	cmp	r3, r5
 8003d90:	dcf2      	bgt.n	8003d78 <_printf_i+0x218>
 8003d92:	e7eb      	b.n	8003d6c <_printf_i+0x20c>
 8003d94:	2500      	movs	r5, #0
 8003d96:	f104 0619 	add.w	r6, r4, #25
 8003d9a:	e7f5      	b.n	8003d88 <_printf_i+0x228>
 8003d9c:	08003f17 	.word	0x08003f17
 8003da0:	08003f28 	.word	0x08003f28

08003da4 <memmove>:
 8003da4:	4288      	cmp	r0, r1
 8003da6:	b510      	push	{r4, lr}
 8003da8:	eb01 0402 	add.w	r4, r1, r2
 8003dac:	d902      	bls.n	8003db4 <memmove+0x10>
 8003dae:	4284      	cmp	r4, r0
 8003db0:	4623      	mov	r3, r4
 8003db2:	d807      	bhi.n	8003dc4 <memmove+0x20>
 8003db4:	1e43      	subs	r3, r0, #1
 8003db6:	42a1      	cmp	r1, r4
 8003db8:	d008      	beq.n	8003dcc <memmove+0x28>
 8003dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dc2:	e7f8      	b.n	8003db6 <memmove+0x12>
 8003dc4:	4601      	mov	r1, r0
 8003dc6:	4402      	add	r2, r0
 8003dc8:	428a      	cmp	r2, r1
 8003dca:	d100      	bne.n	8003dce <memmove+0x2a>
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dd6:	e7f7      	b.n	8003dc8 <memmove+0x24>

08003dd8 <_sbrk_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	2300      	movs	r3, #0
 8003ddc:	4d05      	ldr	r5, [pc, #20]	; (8003df4 <_sbrk_r+0x1c>)
 8003dde:	4604      	mov	r4, r0
 8003de0:	4608      	mov	r0, r1
 8003de2:	602b      	str	r3, [r5, #0]
 8003de4:	f7fc fe8a 	bl	8000afc <_sbrk>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_sbrk_r+0x1a>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_sbrk_r+0x1a>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	20000388 	.word	0x20000388

08003df8 <memchr>:
 8003df8:	4603      	mov	r3, r0
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	b2c9      	uxtb	r1, r1
 8003dfe:	4402      	add	r2, r0
 8003e00:	4293      	cmp	r3, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	d101      	bne.n	8003e0a <memchr+0x12>
 8003e06:	2000      	movs	r0, #0
 8003e08:	e003      	b.n	8003e12 <memchr+0x1a>
 8003e0a:	7804      	ldrb	r4, [r0, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	428c      	cmp	r4, r1
 8003e10:	d1f6      	bne.n	8003e00 <memchr+0x8>
 8003e12:	bd10      	pop	{r4, pc}

08003e14 <memcpy>:
 8003e14:	440a      	add	r2, r1
 8003e16:	4291      	cmp	r1, r2
 8003e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e1c:	d100      	bne.n	8003e20 <memcpy+0xc>
 8003e1e:	4770      	bx	lr
 8003e20:	b510      	push	{r4, lr}
 8003e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e26:	4291      	cmp	r1, r2
 8003e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e2c:	d1f9      	bne.n	8003e22 <memcpy+0xe>
 8003e2e:	bd10      	pop	{r4, pc}

08003e30 <_realloc_r>:
 8003e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e34:	4680      	mov	r8, r0
 8003e36:	4614      	mov	r4, r2
 8003e38:	460e      	mov	r6, r1
 8003e3a:	b921      	cbnz	r1, 8003e46 <_realloc_r+0x16>
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	f7ff bc37 	b.w	80036b4 <_malloc_r>
 8003e46:	b92a      	cbnz	r2, 8003e54 <_realloc_r+0x24>
 8003e48:	f7ff fbcc 	bl	80035e4 <_free_r>
 8003e4c:	4625      	mov	r5, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e54:	f000 f81b 	bl	8003e8e <_malloc_usable_size_r>
 8003e58:	4284      	cmp	r4, r0
 8003e5a:	4607      	mov	r7, r0
 8003e5c:	d802      	bhi.n	8003e64 <_realloc_r+0x34>
 8003e5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e62:	d812      	bhi.n	8003e8a <_realloc_r+0x5a>
 8003e64:	4621      	mov	r1, r4
 8003e66:	4640      	mov	r0, r8
 8003e68:	f7ff fc24 	bl	80036b4 <_malloc_r>
 8003e6c:	4605      	mov	r5, r0
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d0ed      	beq.n	8003e4e <_realloc_r+0x1e>
 8003e72:	42bc      	cmp	r4, r7
 8003e74:	4622      	mov	r2, r4
 8003e76:	4631      	mov	r1, r6
 8003e78:	bf28      	it	cs
 8003e7a:	463a      	movcs	r2, r7
 8003e7c:	f7ff ffca 	bl	8003e14 <memcpy>
 8003e80:	4631      	mov	r1, r6
 8003e82:	4640      	mov	r0, r8
 8003e84:	f7ff fbae 	bl	80035e4 <_free_r>
 8003e88:	e7e1      	b.n	8003e4e <_realloc_r+0x1e>
 8003e8a:	4635      	mov	r5, r6
 8003e8c:	e7df      	b.n	8003e4e <_realloc_r+0x1e>

08003e8e <_malloc_usable_size_r>:
 8003e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e92:	1f18      	subs	r0, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bfbc      	itt	lt
 8003e98:	580b      	ldrlt	r3, [r1, r0]
 8003e9a:	18c0      	addlt	r0, r0, r3
 8003e9c:	4770      	bx	lr
	...

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
