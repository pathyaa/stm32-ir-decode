
stm32-nec-fixed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800438c  0800438c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800438c  0800438c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000068  080043fc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080043fc  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7e4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000200a  00000000  00000000  0002c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  0002e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1e  00000000  00000000  0002f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184e8  00000000  00000000  0002ffde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecfe  00000000  00000000  000484c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089d78  00000000  00000000  000571c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d78  00000000  00000000  000e0f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e4cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080042a4 	.word	0x080042a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080042a4 	.word	0x080042a4

0800014c <irNecInit>:
	.data = {0,},
	.state = NEC_INIT
};

void irNecInit()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&nec.startH, 1);
 8000150:	2301      	movs	r3, #1
 8000152:	4a06      	ldr	r2, [pc, #24]	; (800016c <irNecInit+0x20>)
 8000154:	2100      	movs	r1, #0
 8000156:	4806      	ldr	r0, [pc, #24]	; (8000170 <irNecInit+0x24>)
 8000158:	f002 f828 	bl	80021ac <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)&nec.startL, 1);
 800015c:	2301      	movs	r3, #1
 800015e:	4a05      	ldr	r2, [pc, #20]	; (8000174 <irNecInit+0x28>)
 8000160:	2104      	movs	r1, #4
 8000162:	4803      	ldr	r0, [pc, #12]	; (8000170 <irNecInit+0x24>)
 8000164:	f002 f822 	bl	80021ac <HAL_TIM_IC_Start_DMA>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000086 	.word	0x20000086
 8000170:	20000178 	.word	0x20000178
 8000174:	20000084 	.word	0x20000084

08000178 <irNecStart>:

void irNecStart()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	nec.state = NEC_FORMAT;
 800017c:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <irNecStart+0x44>)
 800017e:	2201      	movs	r2, #1
 8000180:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000184:	2100      	movs	r1, #0
 8000186:	480e      	ldr	r0, [pc, #56]	; (80001c0 <irNecStart+0x48>)
 8000188:	f002 f998 	bl	80024bc <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 800018c:	2104      	movs	r1, #4
 800018e:	480c      	ldr	r0, [pc, #48]	; (80001c0 <irNecStart+0x48>)
 8000190:	f002 f994 	bl	80024bc <HAL_TIM_IC_Stop_DMA>
	hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000194:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <irNecStart+0x4c>)
 8000196:	2220      	movs	r2, #32
 8000198:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 800019a:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <irNecStart+0x50>)
 800019c:	2220      	movs	r2, #32
 800019e:	619a      	str	r2, [r3, #24]
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)nec.edge_falling, MAX_NEC_CNT);
 80001a0:	2321      	movs	r3, #33	; 0x21
 80001a2:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <irNecStart+0x54>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	4806      	ldr	r0, [pc, #24]	; (80001c0 <irNecStart+0x48>)
 80001a8:	f002 f800 	bl	80021ac <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)nec.edge_rising, MAX_NEC_CNT);
 80001ac:	2321      	movs	r3, #33	; 0x21
 80001ae:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <irNecStart+0x58>)
 80001b0:	2104      	movs	r1, #4
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <irNecStart+0x48>)
 80001b4:	f001 fffa 	bl	80021ac <HAL_TIM_IC_Start_DMA>
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	20000084 	.word	0x20000084
 80001c0:	20000178 	.word	0x20000178
 80001c4:	200001c0 	.word	0x200001c0
 80001c8:	20000204 	.word	0x20000204
 80001cc:	20000088 	.word	0x20000088
 80001d0:	200000ca 	.word	0x200000ca

080001d4 <HAL_TIM_IC_CaptureCallback>:

void	HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a23      	ldr	r2, [pc, #140]	; (800026c <HAL_TIM_IC_CaptureCallback+0x98>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d13e      	bne.n	8000262 <HAL_TIM_IC_CaptureCallback+0x8e>
	{
	switch (nec.state)
 80001e4:	4b22      	ldr	r3, [pc, #136]	; (8000270 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80001e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d002      	beq.n	80001f4 <HAL_TIM_IC_CaptureCallback+0x20>
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d031      	beq.n	8000256 <HAL_TIM_IC_CaptureCallback+0x82>
		case NEC_FORMAT :
			nec.taskFlag = true;
			break;
		}
	}
}
 80001f2:	e036      	b.n	8000262 <HAL_TIM_IC_CaptureCallback+0x8e>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	7f1b      	ldrb	r3, [r3, #28]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d123      	bne.n	8000244 <HAL_TIM_IC_CaptureCallback+0x70>
				if (nec.startL)
 80001fc:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d00e      	beq.n	8000222 <HAL_TIM_IC_CaptureCallback+0x4e>
					if (nec.startH > 4400 && nec.startL > 8900)
 8000204:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000206:	885b      	ldrh	r3, [r3, #2]
 8000208:	f241 1230 	movw	r2, #4400	; 0x1130
 800020c:	4293      	cmp	r3, r2
 800020e:	d914      	bls.n	800023a <HAL_TIM_IC_CaptureCallback+0x66>
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	f242 22c4 	movw	r2, #8900	; 0x22c4
 8000218:	4293      	cmp	r3, r2
 800021a:	d90e      	bls.n	800023a <HAL_TIM_IC_CaptureCallback+0x66>
							irNecStart();
 800021c:	f7ff ffac 	bl	8000178 <irNecStart>
 8000220:	e00b      	b.n	800023a <HAL_TIM_IC_CaptureCallback+0x66>
						HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&nec.startH, 1);
 8000222:	2301      	movs	r3, #1
 8000224:	4a13      	ldr	r2, [pc, #76]	; (8000274 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000226:	2100      	movs	r1, #0
 8000228:	4810      	ldr	r0, [pc, #64]	; (800026c <HAL_TIM_IC_CaptureCallback+0x98>)
 800022a:	f001 ffbf 	bl	80021ac <HAL_TIM_IC_Start_DMA>
						HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)&nec.startL, 1);
 800022e:	2301      	movs	r3, #1
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000232:	2104      	movs	r1, #4
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000236:	f001 ffb9 	bl	80021ac <HAL_TIM_IC_Start_DMA>
				TIM2->CNT = 0;
 800023a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023e:	2200      	movs	r2, #0
 8000240:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000242:	e00d      	b.n	8000260 <HAL_TIM_IC_CaptureCallback+0x8c>
			else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	7f1b      	ldrb	r3, [r3, #28]
 8000248:	2b02      	cmp	r3, #2
 800024a:	d109      	bne.n	8000260 <HAL_TIM_IC_CaptureCallback+0x8c>
				TIM2->CNT = 0;
 800024c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000250:	2200      	movs	r2, #0
 8000252:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000254:	e004      	b.n	8000260 <HAL_TIM_IC_CaptureCallback+0x8c>
			nec.taskFlag = true;
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000258:	2201      	movs	r2, #1
 800025a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
			break;
 800025e:	e000      	b.n	8000262 <HAL_TIM_IC_CaptureCallback+0x8e>
		break;
 8000260:	bf00      	nop
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000178 	.word	0x20000178
 8000270:	20000084 	.word	0x20000084
 8000274:	20000086 	.word	0x20000086

08000278 <irNecTask>:

bool irNecTask()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	if (irNecData())
 800027c:	f000 f80a 	bl	8000294 <irNecData>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d003      	beq.n	800028e <irNecTask+0x16>
	return irNecDecode();
 8000286:	f000 f8af 	bl	80003e8 <irNecDecode>
 800028a:	4603      	mov	r3, r0
 800028c:	e7ff      	b.n	800028e <irNecTask+0x16>
}
 800028e:	4618      	mov	r0, r3
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <irNecData>:

bool irNecData()
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]

		if (nec.taskFlag)
 800029e:	4b51      	ldr	r3, [pc, #324]	; (80003e4 <irNecData+0x150>)
 80002a0:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	f000 8096 	beq.w	80003d6 <irNecData+0x142>
		{
			for (nec.cap_cnt=0; nec.cap_cnt < MAX_NEC_CNT; nec.cap_cnt++)
 80002aa:	4b4e      	ldr	r3, [pc, #312]	; (80003e4 <irNecData+0x150>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80002b2:	e086      	b.n	80003c2 <irNecData+0x12e>
			{
				if (nec.edge_rising[nec.cap_cnt] < nec.edge_falling[nec.cap_cnt])
 80002b4:	4b4b      	ldr	r3, [pc, #300]	; (80003e4 <irNecData+0x150>)
 80002b6:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002ba:	4a4a      	ldr	r2, [pc, #296]	; (80003e4 <irNecData+0x150>)
 80002bc:	3320      	adds	r3, #32
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	4413      	add	r3, r2
 80002c2:	88da      	ldrh	r2, [r3, #6]
 80002c4:	4b47      	ldr	r3, [pc, #284]	; (80003e4 <irNecData+0x150>)
 80002c6:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002ca:	4946      	ldr	r1, [pc, #280]	; (80003e4 <irNecData+0x150>)
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	440b      	add	r3, r1
 80002d0:	889b      	ldrh	r3, [r3, #4]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d21a      	bcs.n	800030c <irNecData+0x78>
				{
					nec.raw_capture[nec.cap_cnt] = nec.edge_falling[nec.cap_cnt] - nec.edge_rising[nec.cap_cnt];
 80002d6:	4b43      	ldr	r3, [pc, #268]	; (80003e4 <irNecData+0x150>)
 80002d8:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002dc:	4a41      	ldr	r2, [pc, #260]	; (80003e4 <irNecData+0x150>)
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	4413      	add	r3, r2
 80002e2:	889a      	ldrh	r2, [r3, #4]
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <irNecData+0x150>)
 80002e6:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80002ea:	493e      	ldr	r1, [pc, #248]	; (80003e4 <irNecData+0x150>)
 80002ec:	3320      	adds	r3, #32
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	440b      	add	r3, r1
 80002f2:	88db      	ldrh	r3, [r3, #6]
 80002f4:	493b      	ldr	r1, [pc, #236]	; (80003e4 <irNecData+0x150>)
 80002f6:	f891 10ea 	ldrb.w	r1, [r1, #234]	; 0xea
 80002fa:	4608      	mov	r0, r1
 80002fc:	1ad3      	subs	r3, r2, r3
 80002fe:	b299      	uxth	r1, r3
 8000300:	4a38      	ldr	r2, [pc, #224]	; (80003e4 <irNecData+0x150>)
 8000302:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8000306:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800030a:	e019      	b.n	8000340 <irNecData+0xac>
				}
				else
				{
					nec.raw_capture[nec.cap_cnt] = nec.edge_rising[nec.cap_cnt] - nec.edge_falling[nec.cap_cnt];
 800030c:	4b35      	ldr	r3, [pc, #212]	; (80003e4 <irNecData+0x150>)
 800030e:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8000312:	4a34      	ldr	r2, [pc, #208]	; (80003e4 <irNecData+0x150>)
 8000314:	3320      	adds	r3, #32
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	4413      	add	r3, r2
 800031a:	88da      	ldrh	r2, [r3, #6]
 800031c:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <irNecData+0x150>)
 800031e:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8000322:	4930      	ldr	r1, [pc, #192]	; (80003e4 <irNecData+0x150>)
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	440b      	add	r3, r1
 8000328:	889b      	ldrh	r3, [r3, #4]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <irNecData+0x150>)
 800032c:	f891 10ea 	ldrb.w	r1, [r1, #234]	; 0xea
 8000330:	4608      	mov	r0, r1
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	b299      	uxth	r1, r3
 8000336:	4a2b      	ldr	r2, [pc, #172]	; (80003e4 <irNecData+0x150>)
 8000338:	f100 0344 	add.w	r3, r0, #68	; 0x44
 800033c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}

				if (nec.raw_capture[nec.cap_cnt] > 1600 && nec.raw_capture[nec.cap_cnt] < 1700)
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <irNecData+0x150>)
 8000342:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8000346:	4a27      	ldr	r2, [pc, #156]	; (80003e4 <irNecData+0x150>)
 8000348:	3344      	adds	r3, #68	; 0x44
 800034a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800034e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000352:	d911      	bls.n	8000378 <irNecData+0xe4>
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <irNecData+0x150>)
 8000356:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 800035a:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <irNecData+0x150>)
 800035c:	3344      	adds	r3, #68	; 0x44
 800035e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000362:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8000366:	4293      	cmp	r3, r2
 8000368:	d806      	bhi.n	8000378 <irNecData+0xe4>
				{
					nec.data[i] = 1;
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <irNecData+0x150>)
 800036e:	4413      	add	r3, r2
 8000370:	2201      	movs	r2, #1
 8000372:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8000376:	e019      	b.n	80003ac <irNecData+0x118>
				}
				else if (nec.raw_capture[nec.cap_cnt] > 500 && nec.raw_capture[nec.cap_cnt] < 600)
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <irNecData+0x150>)
 800037a:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 800037e:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <irNecData+0x150>)
 8000380:	3344      	adds	r3, #68	; 0x44
 8000382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000386:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800038a:	d90f      	bls.n	80003ac <irNecData+0x118>
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <irNecData+0x150>)
 800038e:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8000392:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <irNecData+0x150>)
 8000394:	3344      	adds	r3, #68	; 0x44
 8000396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800039a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800039e:	d205      	bcs.n	80003ac <irNecData+0x118>
				{
					nec.data[i] = 0;
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <irNecData+0x150>)
 80003a4:	4413      	add	r3, r2
 80003a6:	2200      	movs	r2, #0
 80003a8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
				}
				i++;
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	3301      	adds	r3, #1
 80003b0:	71fb      	strb	r3, [r7, #7]
			for (nec.cap_cnt=0; nec.cap_cnt < MAX_NEC_CNT; nec.cap_cnt++)
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <irNecData+0x150>)
 80003b4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80003b8:	3301      	adds	r3, #1
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <irNecData+0x150>)
 80003be:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <irNecData+0x150>)
 80003c4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80003c8:	2b20      	cmp	r3, #32
 80003ca:	f67f af73 	bls.w	80002b4 <irNecData+0x20>
			}
			nec.taskFlag = false;
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <irNecData+0x150>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
		}
	return true;
 80003d6:	2301      	movs	r3, #1
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20000084 	.word	0x20000084

080003e8 <irNecDecode>:
bool irNecDecode()
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
	volatile int8_t i = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71bb      	strb	r3, [r7, #6]
	volatile int8_t j = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	717b      	strb	r3, [r7, #5]
	bool isEnd = false;
 80003f6:	2300      	movs	r3, #0
 80003f8:	71fb      	strb	r3, [r7, #7]
	while(!isEnd)
 80003fa:	e05e      	b.n	80004ba <irNecDecode+0xd2>
	{

		for (j=0; j<4; j++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	717b      	strb	r3, [r7, #5]
 8000400:	e057      	b.n	80004b2 <irNecDecode+0xca>
		{
			if (nec.decoded[0] == ~(nec.decoded[1]) && nec.decoded[2] == ~(nec.decoded[3]))
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <irNecDecode+0xe8>)
 8000404:	f993 30eb 	ldrsb.w	r3, [r3, #235]	; 0xeb
 8000408:	461a      	mov	r2, r3
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <irNecDecode+0xe8>)
 800040c:	f993 30ec 	ldrsb.w	r3, [r3, #236]	; 0xec
 8000410:	43db      	mvns	r3, r3
 8000412:	429a      	cmp	r2, r3
 8000414:	d10d      	bne.n	8000432 <irNecDecode+0x4a>
 8000416:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <irNecDecode+0xe8>)
 8000418:	f993 30ed 	ldrsb.w	r3, [r3, #237]	; 0xed
 800041c:	461a      	mov	r2, r3
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <irNecDecode+0xe8>)
 8000420:	f993 30ee 	ldrsb.w	r3, [r3, #238]	; 0xee
 8000424:	43db      	mvns	r3, r3
 8000426:	429a      	cmp	r2, r3
 8000428:	d103      	bne.n	8000432 <irNecDecode+0x4a>
			{
				isEnd = true;
 800042a:	2301      	movs	r3, #1
 800042c:	71fb      	strb	r3, [r7, #7]
				return true;
 800042e:	2301      	movs	r3, #1
 8000430:	e049      	b.n	80004c6 <irNecDecode+0xde>


			}
			for (i=8*j; i<(8*j+8); i++)
 8000432:	797b      	ldrb	r3, [r7, #5]
 8000434:	b25b      	sxtb	r3, r3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	b25b      	sxtb	r3, r3
 800043e:	71bb      	strb	r3, [r7, #6]
 8000440:	e027      	b.n	8000492 <irNecDecode+0xaa>
			{
//				nec.decoded[j] = (i%8+1)<< nec.data[i];
				nec.decoded[j] += (nec.data[i] << (8*j+7-i));
 8000442:	79bb      	ldrb	r3, [r7, #6]
 8000444:	b25b      	sxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <irNecDecode+0xe8>)
 800044a:	4413      	add	r3, r2
 800044c:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8000450:	461a      	mov	r2, r3
 8000452:	797b      	ldrb	r3, [r7, #5]
 8000454:	b25b      	sxtb	r3, r3
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	3307      	adds	r3, #7
 800045a:	79b9      	ldrb	r1, [r7, #6]
 800045c:	b249      	sxtb	r1, r1
 800045e:	1a5b      	subs	r3, r3, r1
 8000460:	fa02 f003 	lsl.w	r0, r2, r3
 8000464:	797b      	ldrb	r3, [r7, #5]
 8000466:	b259      	sxtb	r1, r3
 8000468:	460a      	mov	r2, r1
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <irNecDecode+0xe8>)
 800046c:	4413      	add	r3, r2
 800046e:	f993 30eb 	ldrsb.w	r3, [r3, #235]	; 0xeb
 8000472:	b2da      	uxtb	r2, r3
 8000474:	b2c3      	uxtb	r3, r0
 8000476:	4413      	add	r3, r2
 8000478:	b2db      	uxtb	r3, r3
 800047a:	b25a      	sxtb	r2, r3
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <irNecDecode+0xe8>)
 800047e:	440b      	add	r3, r1
 8000480:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
			for (i=8*j; i<(8*j+8); i++)
 8000484:	79bb      	ldrb	r3, [r7, #6]
 8000486:	b25b      	sxtb	r3, r3
 8000488:	b2db      	uxtb	r3, r3
 800048a:	3301      	adds	r3, #1
 800048c:	b2db      	uxtb	r3, r3
 800048e:	b25b      	sxtb	r3, r3
 8000490:	71bb      	strb	r3, [r7, #6]
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	b25b      	sxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	797b      	ldrb	r3, [r7, #5]
 800049a:	b25b      	sxtb	r3, r3
 800049c:	3301      	adds	r3, #1
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	429a      	cmp	r2, r3
 80004a2:	dbce      	blt.n	8000442 <irNecDecode+0x5a>
		for (j=0; j<4; j++)
 80004a4:	797b      	ldrb	r3, [r7, #5]
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	3301      	adds	r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	717b      	strb	r3, [r7, #5]
 80004b2:	797b      	ldrb	r3, [r7, #5]
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	dda3      	ble.n	8000402 <irNecDecode+0x1a>
	while(!isEnd)
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	f083 0301 	eor.w	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d19a      	bne.n	80003fc <irNecDecode+0x14>
			}

		}
	}

}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	20000084 	.word	0x20000084

080004d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1900);
 80004dc:	1d39      	adds	r1, r7, #4
 80004de:	f240 736c 	movw	r3, #1900	; 0x76c
 80004e2:	2201      	movs	r2, #1
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <__io_putchar+0x20>)
 80004e6:	f002 fdc3 	bl	8003070 <HAL_UART_Transmit>
	return ch;
 80004ea:	687b      	ldr	r3, [r7, #4]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000248 	.word	0x20000248

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fc10 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f84e 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f968 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f938 	bl	800077c <MX_DMA_Init>
  MX_TIM2_Init();
 800050c:	f000 f88e 	bl	800062c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f90a 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  irNecInit();
 8000514:	f7ff fe1a 	bl	800014c <irNecInit>
  while(!nec.taskFlag);
 8000518:	bf00      	nop
 800051a:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <main+0x90>)
 800051c:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 8000520:	f083 0301 	eor.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f7      	bne.n	800051a <main+0x22>
  irNecTask();
 800052a:	f7ff fea5 	bl	8000278 <irNecTask>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("IR DECODED!!\r\n");
 800052e:	4817      	ldr	r0, [pc, #92]	; (800058c <main+0x94>)
 8000530:	f003 f846 	bl	80035c0 <puts>
	  printf("NEC.decoded[0] : %x\r\n", (uint8_t)nec.decoded[0]);
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0x90>)
 8000536:	f993 30eb 	ldrsb.w	r3, [r3, #235]	; 0xeb
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	4814      	ldr	r0, [pc, #80]	; (8000590 <main+0x98>)
 8000540:	f002 ffd8 	bl	80034f4 <iprintf>
	  printf("NEC.decoded[1] : %x\r\n", (uint8_t)nec.decoded[1]);
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <main+0x90>)
 8000546:	f993 30ec 	ldrsb.w	r3, [r3, #236]	; 0xec
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	4811      	ldr	r0, [pc, #68]	; (8000594 <main+0x9c>)
 8000550:	f002 ffd0 	bl	80034f4 <iprintf>
	  printf("NEC.decoded[2] : %x\r\n", (uint8_t)nec.decoded[2]);
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <main+0x90>)
 8000556:	f993 30ed 	ldrsb.w	r3, [r3, #237]	; 0xed
 800055a:	b2db      	uxtb	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	480e      	ldr	r0, [pc, #56]	; (8000598 <main+0xa0>)
 8000560:	f002 ffc8 	bl	80034f4 <iprintf>
	  printf("NEC.decoded[3] : %x\r\n", (uint8_t)nec.decoded[3]);
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <main+0x90>)
 8000566:	f993 30ee 	ldrsb.w	r3, [r3, #238]	; 0xee
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4619      	mov	r1, r3
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <main+0xa4>)
 8000570:	f002 ffc0 	bl	80034f4 <iprintf>
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <main+0x90>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
	  memset(nec.decoded, 0, sizeof(nec.decoded[0]));

	  HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fc30 	bl	8000de4 <HAL_Delay>
  {
 8000584:	e7d3      	b.n	800052e <main+0x36>
 8000586:	bf00      	nop
 8000588:	20000084 	.word	0x20000084
 800058c:	080042bc 	.word	0x080042bc
 8000590:	080042cc 	.word	0x080042cc
 8000594:	080042e4 	.word	0x080042e4
 8000598:	080042fc 	.word	0x080042fc
 800059c:	08004314 	.word	0x08004314

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	; 0x40
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2228      	movs	r2, #40	; 0x28
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f8e6 	bl	8003780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f927 	bl	800183c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005f4:	f000 f93c 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fb94 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800061e:	f000 f927 	bl	8000870 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3740      	adds	r7, #64	; 0x40
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <MX_TIM2_Init+0xf8>)
 8000658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <MX_TIM2_Init+0xf8>)
 8000660:	222f      	movs	r2, #47	; 0x2f
 8000662:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <MX_TIM2_Init+0xf8>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <MX_TIM2_Init+0xf8>)
 800066c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000670:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <MX_TIM2_Init+0xf8>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <MX_TIM2_Init+0xf8>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067e:	4829      	ldr	r0, [pc, #164]	; (8000724 <MX_TIM2_Init+0xf8>)
 8000680:	f001 fcec 	bl	800205c <HAL_TIM_Base_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800068a:	f000 f8f1 	bl	8000870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4619      	mov	r1, r3
 800069a:	4822      	ldr	r0, [pc, #136]	; (8000724 <MX_TIM2_Init+0xf8>)
 800069c:	f002 f86c 	bl	8002778 <HAL_TIM_ConfigClockSource>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006a6:	f000 f8e3 	bl	8000870 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006aa:	481e      	ldr	r0, [pc, #120]	; (8000724 <MX_TIM2_Init+0xf8>)
 80006ac:	f001 fd25 	bl	80020fa <HAL_TIM_IC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006b6:	f000 f8db 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	4816      	ldr	r0, [pc, #88]	; (8000724 <MX_TIM2_Init+0xf8>)
 80006ca:	f002 fc29 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80006d4:	f000 f8cc 	bl	8000870 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006d8:	2302      	movs	r3, #2
 80006da:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <MX_TIM2_Init+0xf8>)
 80006f0:	f001 ffa6 	bl	8002640 <HAL_TIM_IC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80006fa:	f000 f8b9 	bl	8000870 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000702:	2302      	movs	r3, #2
 8000704:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2204      	movs	r2, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM2_Init+0xf8>)
 800070e:	f001 ff97 	bl	8002640 <HAL_TIM_IC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000718:	f000 f8aa 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	; 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000178 	.word	0x20000178

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f002 fc36 	bl	8002fd0 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f881 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000248 	.word	0x20000248
 8000778:	40004400 	.word	0x40004400

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_DMA_Init+0x58>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_DMA_Init+0x58>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_DMA_Init+0x58>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 fc1b 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007a4:	200f      	movs	r0, #15
 80007a6:	f000 fc34 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2010      	movs	r0, #16
 80007b0:	f000 fc13 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007b4:	2010      	movs	r0, #16
 80007b6:	f000 fc2c 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2011      	movs	r0, #17
 80007c0:	f000 fc0b 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007c4:	2011      	movs	r0, #17
 80007c6:	f000 fc24 	bl	8001012 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_GPIO_Init+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <MX_GPIO_Init+0x90>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_GPIO_Init+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0310 	and.w	r3, r3, #16
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_GPIO_Init+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_GPIO_Init+0x90>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_GPIO_Init+0x90>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_GPIO_Init+0x90>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <MX_GPIO_Init+0x90>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_GPIO_Init+0x90>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_GPIO_Init+0x94>)
 800083c:	f000 ffe6 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2302      	movs	r3, #2
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0x94>)
 800085a:	f000 fe5b 	bl	8001514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	40011000 	.word	0x40011000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_MspInit+0x5c>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <HAL_MspInit+0x5c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_MspInit+0x5c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x5c>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_MspInit+0x5c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	61d3      	str	r3, [r2, #28]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x5c>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_MspInit+0x60>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_MspInit+0x60>)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010000 	.word	0x40010000

080008e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008fe:	d179      	bne.n	80009f4 <HAL_TIM_Base_MspInit+0x114>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000900:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <HAL_TIM_Base_MspInit+0x11c>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	4a3d      	ldr	r2, [pc, #244]	; (80009fc <HAL_TIM_Base_MspInit+0x11c>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	61d3      	str	r3, [r2, #28]
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <HAL_TIM_Base_MspInit+0x11c>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <HAL_TIM_Base_MspInit+0x11c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a37      	ldr	r2, [pc, #220]	; (80009fc <HAL_TIM_Base_MspInit+0x11c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <HAL_TIM_Base_MspInit+0x11c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	482f      	ldr	r0, [pc, #188]	; (8000a00 <HAL_TIM_Base_MspInit+0x120>)
 8000944:	f000 fde6 	bl	8001514 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000948:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 800094a:	4a2f      	ldr	r2, [pc, #188]	; (8000a08 <HAL_TIM_Base_MspInit+0x128>)
 800094c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 8000962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000966:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 800096a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800097c:	4821      	ldr	r0, [pc, #132]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 800097e:	f000 fb63 	bl	8001048 <HAL_DMA_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_TIM_Base_MspInit+0xac>
    {
      Error_Handler();
 8000988:	f7ff ff72 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <HAL_TIM_Base_MspInit+0x124>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 800099a:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <HAL_TIM_Base_MspInit+0x130>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009be:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80009cc:	480f      	ldr	r0, [pc, #60]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009ce:	f000 fb3b 	bl	8001048 <HAL_DMA_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_TIM_Base_MspInit+0xfc>
    {
      Error_Handler();
 80009d8:	f7ff ff4a 	bl	8000870 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_TIM_Base_MspInit+0x12c>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010800 	.word	0x40010800
 8000a04:	200001c0 	.word	0x200001c0
 8000a08:	40020058 	.word	0x40020058
 8000a0c:	20000204 	.word	0x20000204
 8000a10:	40020080 	.word	0x40020080

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <HAL_UART_MspInit+0xd4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d155      	bne.n	8000ae0 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_UART_MspInit+0xd8>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <HAL_UART_MspInit+0xd8>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	61d3      	str	r3, [r2, #28]
 8000a40:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <HAL_UART_MspInit+0xd8>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <HAL_UART_MspInit+0xd8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_UART_MspInit+0xd8>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <HAL_UART_MspInit+0xd8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a64:	2304      	movs	r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	481e      	ldr	r0, [pc, #120]	; (8000af0 <HAL_UART_MspInit+0xdc>)
 8000a78:	f000 fd4c 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4818      	ldr	r0, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0xdc>)
 8000a90:	f000 fd40 	bl	8001514 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0xe4>)
 8000a98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000ac6:	f000 fabf 	bl	8001048 <HAL_DMA_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000ad0:	f7ff fece 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000ad8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ada:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_UART_MspInit+0xe0>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010800 	.word	0x40010800
 8000af4:	20000290 	.word	0x20000290
 8000af8:	4002006c 	.word	0x4002006c

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b42:	f000 f933 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <DMA1_Channel5_IRQHandler+0x10>)
 8000b52:	f000 fbab 	bl	80012ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001c0 	.word	0x200001c0

08000b60 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <DMA1_Channel6_IRQHandler+0x10>)
 8000b66:	f000 fba1 	bl	80012ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000290 	.word	0x20000290

08000b74 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <DMA1_Channel7_IRQHandler+0x10>)
 8000b7a:	f000 fb97 	bl	80012ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000204 	.word	0x20000204

08000b88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
  }

  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e009      	b.n	8000be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc79 	bl	80004d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf1      	blt.n	8000bd4 <_write+0x12>
  }
  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c20:	605a      	str	r2, [r3, #4]
  return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <_isatty>:

int _isatty(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f002 fdc6 	bl	800381c <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20002800 	.word	0x20002800
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	200002d4 	.word	0x200002d4
 8000cc4:	20000428 	.word	0x20000428

08000cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff fff8 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cda:	490c      	ldr	r1, [pc, #48]	; (8000d0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cf0:	4c09      	ldr	r4, [pc, #36]	; (8000d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 fd93 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fbf9 	bl	80004f8 <main>
  bx lr
 8000d06:	4770      	bx	lr
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d10:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 8000d14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d18:	20000428 	.word	0x20000428

08000d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_2_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x28>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x28>)
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f947 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	200f      	movs	r0, #15
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fd9e 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f95f 	bl	800102e <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f927 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x20>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a03      	ldr	r2, [pc, #12]	; (8000dcc <HAL_IncTick+0x20>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	200002d8 	.word	0x200002d8

08000dd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <HAL_GetTick+0x10>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	200002d8 	.word	0x200002d8

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff0 	bl	8000dd0 <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffe0 	bl	8000dd0 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4906      	ldr	r1, [pc, #24]	; (8000ec4 <__NVIC_EnableIRQ+0x34>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff90 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff2d 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff42 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff90 	bl	8000f1c <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5f 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff35 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e043      	b.n	80010e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <HAL_DMA_Init+0xa8>)
 8001066:	4413      	add	r3, r2
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <HAL_DMA_Init+0xac>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	009a      	lsls	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_DMA_Init+0xb0>)
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001092:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	bffdfff8 	.word	0xbffdfff8
 80010f4:	cccccccd 	.word	0xcccccccd
 80010f8:	40020000 	.word	0x40020000

080010fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_DMA_Start_IT+0x20>
 8001118:	2302      	movs	r3, #2
 800111a:	e04b      	b.n	80011b4 <HAL_DMA_Start_IT+0xb8>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d13a      	bne.n	80011a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2202      	movs	r2, #2
 8001134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2200      	movs	r2, #0
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f000 f9af 	bl	80014b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 020e 	orr.w	r2, r2, #14
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e00f      	b.n	8001194 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0204 	bic.w	r2, r2, #4
 8001182:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 020a 	orr.w	r2, r2, #10
 8001192:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e005      	b.n	80011b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011ae:	2302      	movs	r3, #2
 80011b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d005      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2204      	movs	r2, #4
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e051      	b.n	8001284 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 020e 	bic.w	r2, r2, #14
 80011ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a22      	ldr	r2, [pc, #136]	; (8001290 <HAL_DMA_Abort_IT+0xd4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d029      	beq.n	800125e <HAL_DMA_Abort_IT+0xa2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a21      	ldr	r2, [pc, #132]	; (8001294 <HAL_DMA_Abort_IT+0xd8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d022      	beq.n	800125a <HAL_DMA_Abort_IT+0x9e>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_DMA_Abort_IT+0xdc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01a      	beq.n	8001254 <HAL_DMA_Abort_IT+0x98>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a1e      	ldr	r2, [pc, #120]	; (800129c <HAL_DMA_Abort_IT+0xe0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d012      	beq.n	800124e <HAL_DMA_Abort_IT+0x92>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_DMA_Abort_IT+0xe4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00a      	beq.n	8001248 <HAL_DMA_Abort_IT+0x8c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_DMA_Abort_IT+0xe8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d102      	bne.n	8001242 <HAL_DMA_Abort_IT+0x86>
 800123c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001240:	e00e      	b.n	8001260 <HAL_DMA_Abort_IT+0xa4>
 8001242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001246:	e00b      	b.n	8001260 <HAL_DMA_Abort_IT+0xa4>
 8001248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124c:	e008      	b.n	8001260 <HAL_DMA_Abort_IT+0xa4>
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	e005      	b.n	8001260 <HAL_DMA_Abort_IT+0xa4>
 8001254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001258:	e002      	b.n	8001260 <HAL_DMA_Abort_IT+0xa4>
 800125a:	2310      	movs	r3, #16
 800125c:	e000      	b.n	8001260 <HAL_DMA_Abort_IT+0xa4>
 800125e:	2301      	movs	r3, #1
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_DMA_Abort_IT+0xec>)
 8001262:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
    } 
  }
  return status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020008 	.word	0x40020008
 8001294:	4002001c 	.word	0x4002001c
 8001298:	40020030 	.word	0x40020030
 800129c:	40020044 	.word	0x40020044
 80012a0:	40020058 	.word	0x40020058
 80012a4:	4002006c 	.word	0x4002006c
 80012a8:	40020000 	.word	0x40020000

080012ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2204      	movs	r2, #4
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d04f      	beq.n	8001374 <HAL_DMA_IRQHandler+0xc8>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d04a      	beq.n	8001374 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0204 	bic.w	r2, r2, #4
 80012fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a66      	ldr	r2, [pc, #408]	; (800149c <HAL_DMA_IRQHandler+0x1f0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d029      	beq.n	800135a <HAL_DMA_IRQHandler+0xae>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_DMA_IRQHandler+0x1f4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d022      	beq.n	8001356 <HAL_DMA_IRQHandler+0xaa>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <HAL_DMA_IRQHandler+0x1f8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01a      	beq.n	8001350 <HAL_DMA_IRQHandler+0xa4>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a62      	ldr	r2, [pc, #392]	; (80014a8 <HAL_DMA_IRQHandler+0x1fc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d012      	beq.n	800134a <HAL_DMA_IRQHandler+0x9e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a60      	ldr	r2, [pc, #384]	; (80014ac <HAL_DMA_IRQHandler+0x200>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x98>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a5f      	ldr	r2, [pc, #380]	; (80014b0 <HAL_DMA_IRQHandler+0x204>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d102      	bne.n	800133e <HAL_DMA_IRQHandler+0x92>
 8001338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133c:	e00e      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 800133e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001342:	e00b      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 8001344:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001348:	e008      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 800134a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134e:	e005      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 8001350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001354:	e002      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 8001356:	2340      	movs	r3, #64	; 0x40
 8001358:	e000      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 800135a:	2304      	movs	r3, #4
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_DMA_IRQHandler+0x208>)
 800135e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8094 	beq.w	8001492 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001372:	e08e      	b.n	8001492 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	2202      	movs	r2, #2
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d056      	beq.n	8001432 <HAL_DMA_IRQHandler+0x186>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d051      	beq.n	8001432 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10b      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 020a 	bic.w	r2, r2, #10
 80013aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a38      	ldr	r2, [pc, #224]	; (800149c <HAL_DMA_IRQHandler+0x1f0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d029      	beq.n	8001412 <HAL_DMA_IRQHandler+0x166>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a37      	ldr	r2, [pc, #220]	; (80014a0 <HAL_DMA_IRQHandler+0x1f4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d022      	beq.n	800140e <HAL_DMA_IRQHandler+0x162>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <HAL_DMA_IRQHandler+0x1f8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01a      	beq.n	8001408 <HAL_DMA_IRQHandler+0x15c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <HAL_DMA_IRQHandler+0x1fc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d012      	beq.n	8001402 <HAL_DMA_IRQHandler+0x156>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a32      	ldr	r2, [pc, #200]	; (80014ac <HAL_DMA_IRQHandler+0x200>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x150>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a31      	ldr	r2, [pc, #196]	; (80014b0 <HAL_DMA_IRQHandler+0x204>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d102      	bne.n	80013f6 <HAL_DMA_IRQHandler+0x14a>
 80013f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f4:	e00e      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 80013f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013fa:	e00b      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 80013fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001400:	e008      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	e005      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 8001408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140c:	e002      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 800140e:	2320      	movs	r3, #32
 8001410:	e000      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 8001412:	2302      	movs	r3, #2
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <HAL_DMA_IRQHandler+0x208>)
 8001416:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d034      	beq.n	8001492 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001430:	e02f      	b.n	8001492 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2208      	movs	r2, #8
 8001438:	409a      	lsls	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d028      	beq.n	8001494 <HAL_DMA_IRQHandler+0x1e8>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 020e 	bic.w	r2, r2, #14
 800145a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	2101      	movs	r1, #1
 8001466:	fa01 f202 	lsl.w	r2, r1, r2
 800146a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4798      	blx	r3
    }
  }
  return;
 8001492:	bf00      	nop
 8001494:	bf00      	nop
}
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020008 	.word	0x40020008
 80014a0:	4002001c 	.word	0x4002001c
 80014a4:	40020030 	.word	0x40020030
 80014a8:	40020044 	.word	0x40020044
 80014ac:	40020058 	.word	0x40020058
 80014b0:	4002006c 	.word	0x4002006c
 80014b4:	40020000 	.word	0x40020000

080014b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d108      	bne.n	80014f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014f6:	e007      	b.n	8001508 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b08b      	sub	sp, #44	; 0x2c
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e161      	b.n	80017ec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001528:	2201      	movs	r2, #1
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8150 	bne.w	80017e6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a97      	ldr	r2, [pc, #604]	; (80017a8 <HAL_GPIO_Init+0x294>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d05e      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001550:	4a95      	ldr	r2, [pc, #596]	; (80017a8 <HAL_GPIO_Init+0x294>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d875      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001556:	4a95      	ldr	r2, [pc, #596]	; (80017ac <HAL_GPIO_Init+0x298>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d058      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 800155c:	4a93      	ldr	r2, [pc, #588]	; (80017ac <HAL_GPIO_Init+0x298>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d86f      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001562:	4a93      	ldr	r2, [pc, #588]	; (80017b0 <HAL_GPIO_Init+0x29c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d052      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001568:	4a91      	ldr	r2, [pc, #580]	; (80017b0 <HAL_GPIO_Init+0x29c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d869      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800156e:	4a91      	ldr	r2, [pc, #580]	; (80017b4 <HAL_GPIO_Init+0x2a0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04c      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001574:	4a8f      	ldr	r2, [pc, #572]	; (80017b4 <HAL_GPIO_Init+0x2a0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d863      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800157a:	4a8f      	ldr	r2, [pc, #572]	; (80017b8 <HAL_GPIO_Init+0x2a4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d046      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001580:	4a8d      	ldr	r2, [pc, #564]	; (80017b8 <HAL_GPIO_Init+0x2a4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d85d      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001586:	2b12      	cmp	r3, #18
 8001588:	d82a      	bhi.n	80015e0 <HAL_GPIO_Init+0xcc>
 800158a:	2b12      	cmp	r3, #18
 800158c:	d859      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <HAL_GPIO_Init+0x80>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	0800160f 	.word	0x0800160f
 8001598:	080015e9 	.word	0x080015e9
 800159c:	080015fb 	.word	0x080015fb
 80015a0:	0800163d 	.word	0x0800163d
 80015a4:	08001643 	.word	0x08001643
 80015a8:	08001643 	.word	0x08001643
 80015ac:	08001643 	.word	0x08001643
 80015b0:	08001643 	.word	0x08001643
 80015b4:	08001643 	.word	0x08001643
 80015b8:	08001643 	.word	0x08001643
 80015bc:	08001643 	.word	0x08001643
 80015c0:	08001643 	.word	0x08001643
 80015c4:	08001643 	.word	0x08001643
 80015c8:	08001643 	.word	0x08001643
 80015cc:	08001643 	.word	0x08001643
 80015d0:	08001643 	.word	0x08001643
 80015d4:	08001643 	.word	0x08001643
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	08001605 	.word	0x08001605
 80015e0:	4a76      	ldr	r2, [pc, #472]	; (80017bc <HAL_GPIO_Init+0x2a8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015e6:	e02c      	b.n	8001642 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e029      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e024      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	3308      	adds	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e01f      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e01a      	b.n	8001644 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001616:	2304      	movs	r3, #4
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e013      	b.n	8001644 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
          break;
 800162e:	e009      	b.n	8001644 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	615a      	str	r2, [r3, #20]
          break;
 800163a:	e003      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x130>
          break;
 8001642:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d801      	bhi.n	800164e <HAL_GPIO_Init+0x13a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	e001      	b.n	8001652 <HAL_GPIO_Init+0x13e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3304      	adds	r3, #4
 8001652:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d802      	bhi.n	8001660 <HAL_GPIO_Init+0x14c>
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x152>
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	3b08      	subs	r3, #8
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	210f      	movs	r1, #15
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	6a39      	ldr	r1, [r7, #32]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a9 	beq.w	80017e6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001694:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ac:	4a45      	ldr	r2, [pc, #276]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3d      	ldr	r2, [pc, #244]	; (80017c8 <HAL_GPIO_Init+0x2b4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_Init+0x1e0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <HAL_GPIO_Init+0x2b8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x1dc>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <HAL_GPIO_Init+0x2bc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_Init+0x1d8>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x1e2>
 80016ec:	2303      	movs	r3, #3
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x1e2>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x1e2>
 80016f4:	2300      	movs	r3, #0
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001706:	492f      	ldr	r1, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	492b      	ldr	r1, [pc, #172]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001738:	4013      	ands	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4921      	ldr	r1, [pc, #132]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	491d      	ldr	r1, [pc, #116]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001760:	4013      	ands	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4917      	ldr	r1, [pc, #92]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4913      	ldr	r1, [pc, #76]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01f      	beq.n	80017d8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	490d      	ldr	r1, [pc, #52]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e01f      	b.n	80017e6 <HAL_GPIO_Init+0x2d2>
 80017a6:	bf00      	nop
 80017a8:	10320000 	.word	0x10320000
 80017ac:	10310000 	.word	0x10310000
 80017b0:	10220000 	.word	0x10220000
 80017b4:	10210000 	.word	0x10210000
 80017b8:	10120000 	.word	0x10120000
 80017bc:	10110000 	.word	0x10110000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_GPIO_Init+0x2f4>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4909      	ldr	r1, [pc, #36]	; (8001808 <HAL_GPIO_Init+0x2f4>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	3301      	adds	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f47f ae96 	bne.w	8001528 <HAL_GPIO_Init+0x14>
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	372c      	adds	r7, #44	; 0x2c
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001828:	e003      	b.n	8001832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	611a      	str	r2, [r3, #16]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e272      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8087 	beq.w	800196a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800185c:	4b92      	ldr	r3, [pc, #584]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b04      	cmp	r3, #4
 8001866:	d00c      	beq.n	8001882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001868:	4b8f      	ldr	r3, [pc, #572]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d112      	bne.n	800189a <HAL_RCC_OscConfig+0x5e>
 8001874:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d10b      	bne.n	800189a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	4b89      	ldr	r3, [pc, #548]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d06c      	beq.n	8001968 <HAL_RCC_OscConfig+0x12c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d168      	bne.n	8001968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e24c      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x76>
 80018a4:	4b80      	ldr	r3, [pc, #512]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a7f      	ldr	r2, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e02e      	b.n	8001910 <HAL_RCC_OscConfig+0xd4>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x98>
 80018ba:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a77      	ldr	r2, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xd4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0xbc>
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a71      	ldr	r2, [pc, #452]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xd4>
 80018f8:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6a      	ldr	r2, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a67      	ldr	r2, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fa5a 	bl	8000dd0 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fa56 	bl	8000dd0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e200      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xe4>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fa46 	bl	8000dd0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fa42 	bl	8000dd0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1ec      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x10c>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d063      	beq.n	8001a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001976:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001982:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x18c>
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x176>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1c0      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4939      	ldr	r1, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e03a      	b.n	8001a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <HAL_RCC_OscConfig+0x270>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff f9fb 	bl	8000dd0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f9f7 	bl	8000dd0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1a1      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4927      	ldr	r1, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_RCC_OscConfig+0x270>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f9da 	bl	8000dd0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff f9d6 	bl	8000dd0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e180      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d03a      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d019      	beq.n	8001a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff f9ba 	bl	8000dd0 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f9b6 	bl	8000dd0 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e160      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f000 face 	bl	8002020 <RCC_Delay>
 8001a84:	e01c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f9a0 	bl	8000dd0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff f99c 	bl	8000dd0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d908      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e146      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	42420000 	.word	0x42420000
 8001ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e9      	bne.n	8001a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80a6 	beq.w	8001c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10d      	bne.n	8001afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a87      	ldr	r2, [pc, #540]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <HAL_RCC_OscConfig+0x4c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	4b7f      	ldr	r3, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x4c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7e      	ldr	r2, [pc, #504]	; (8001d04 <HAL_RCC_OscConfig+0x4c8>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f95d 	bl	8000dd0 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff f959 	bl	8000dd0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b64      	cmp	r3, #100	; 0x64
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e103      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <HAL_RCC_OscConfig+0x4c8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x312>
 8001b40:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e02d      	b.n	8001baa <HAL_RCC_OscConfig+0x36e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x334>
 8001b56:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a69      	ldr	r2, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a66      	ldr	r2, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	e01c      	b.n	8001baa <HAL_RCC_OscConfig+0x36e>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x356>
 8001b78:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a60      	ldr	r2, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a5d      	ldr	r2, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	e00b      	b.n	8001baa <HAL_RCC_OscConfig+0x36e>
 8001b92:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d015      	beq.n	8001bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f90d 	bl	8000dd0 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff f909 	bl	8000dd0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0b1      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ee      	beq.n	8001bba <HAL_RCC_OscConfig+0x37e>
 8001bdc:	e014      	b.n	8001c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7ff f8f7 	bl	8000dd0 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff f8f3 	bl	8000dd0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e09b      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d061      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d146      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_RCC_OscConfig+0x4cc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f8c7 	bl	8000dd0 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff f8c3 	bl	8000dd0 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e06d      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d108      	bne.n	8001c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4921      	ldr	r1, [pc, #132]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a19      	ldr	r1, [r3, #32]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	430b      	orrs	r3, r1
 8001c92:	491b      	ldr	r1, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_OscConfig+0x4cc>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f897 	bl	8000dd0 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff f893 	bl	8000dd0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e03d      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x46a>
 8001cc4:	e035      	b.n	8001d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCC_OscConfig+0x4cc>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f880 	bl	8000dd0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff f87c 	bl	8000dd0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e026      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x498>
 8001cf2:	e01e      	b.n	8001d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e019      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
 8001d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_OscConfig+0x500>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0d0      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0207 	bic.w	r2, r3, #7
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d040      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e073      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4936      	ldr	r1, [pc, #216]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7fe ffce 	bl	8000dd0 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7fe ffca 	bl	8000dd0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e053      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d210      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ece:	f000 f821 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	5ccb      	ldrb	r3, [r1, r3]
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff2c 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	0800432c 	.word	0x0800432c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x30>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x36>
 8001f42:	e027      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f46:	613b      	str	r3, [r7, #16]
      break;
 8001f48:	e027      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0c9b      	lsrs	r3, r3, #18
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0c5b      	lsrs	r3, r3, #17
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f76:	fb03 f202 	mul.w	r2, r3, r2
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e004      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f96:	613b      	str	r3, [r7, #16]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	693b      	ldr	r3, [r7, #16]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	007a1200 	.word	0x007a1200
 8001fb0:	08004344 	.word	0x08004344
 8001fb4:	08004354 	.word	0x08004354
 8001fb8:	003d0900 	.word	0x003d0900

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff2 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	0800433c 	.word	0x0800433c

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	0adb      	lsrs	r3, r3, #11
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	0800433c 	.word	0x0800433c

08002020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <RCC_Delay+0x34>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <RCC_Delay+0x38>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800203c:	bf00      	nop
  }
  while (Delay --);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <RCC_Delay+0x1c>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000000 	.word	0x20000000
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e041      	b.n	80020f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fc2c 	bl	80008e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3304      	adds	r3, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f000 fd26 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e041      	b.n	8002190 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f839 	bl	8002198 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f000 fcd7 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_IC_Start_DMA+0x22>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e013      	b.n	80021f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d104      	bne.n	80021de <HAL_TIM_IC_Start_DMA+0x32>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e00b      	b.n	80021f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d104      	bne.n	80021ee <HAL_TIM_IC_Start_DMA+0x42>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e003      	b.n	80021f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <HAL_TIM_IC_Start_DMA+0x5c>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e013      	b.n	8002230 <HAL_TIM_IC_Start_DMA+0x84>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b04      	cmp	r3, #4
 800220c:	d104      	bne.n	8002218 <HAL_TIM_IC_Start_DMA+0x6c>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e00b      	b.n	8002230 <HAL_TIM_IC_Start_DMA+0x84>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b08      	cmp	r3, #8
 800221c:	d104      	bne.n	8002228 <HAL_TIM_IC_Start_DMA+0x7c>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e003      	b.n	8002230 <HAL_TIM_IC_Start_DMA+0x84>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800222e:	b2db      	uxtb	r3, r3
 8002230:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d002      	beq.n	800223e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8002238:	7d7b      	ldrb	r3, [r7, #21]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d101      	bne.n	8002242 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	e12d      	b.n	800249e <HAL_TIM_IC_Start_DMA+0x2f2>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002242:	7dbb      	ldrb	r3, [r7, #22]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d143      	bne.n	80022d0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8002248:	7d7b      	ldrb	r3, [r7, #21]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d140      	bne.n	80022d0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_TIM_IC_Start_DMA+0xae>
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e11f      	b.n	800249e <HAL_TIM_IC_Start_DMA+0x2f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <HAL_TIM_IC_Start_DMA+0xc2>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800226c:	e013      	b.n	8002296 <HAL_TIM_IC_Start_DMA+0xea>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d104      	bne.n	800227e <HAL_TIM_IC_Start_DMA+0xd2>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227c:	e00b      	b.n	8002296 <HAL_TIM_IC_Start_DMA+0xea>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d104      	bne.n	800228e <HAL_TIM_IC_Start_DMA+0xe2>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	e003      	b.n	8002296 <HAL_TIM_IC_Start_DMA+0xea>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <HAL_TIM_IC_Start_DMA+0xfa>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 80022a4:	e016      	b.n	80022d4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d104      	bne.n	80022b6 <HAL_TIM_IC_Start_DMA+0x10a>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) || (Length == 0U))
 80022b4:	e00e      	b.n	80022d4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d104      	bne.n	80022c6 <HAL_TIM_IC_Start_DMA+0x11a>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 80022c4:	e006      	b.n	80022d4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 80022ce:	e001      	b.n	80022d4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0e4      	b.n	800249e <HAL_TIM_IC_Start_DMA+0x2f2>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2201      	movs	r2, #1
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fdfa 	bl	8002ed6 <TIM_CCxChannelCmd>

  switch (Channel)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	f200 80ad 	bhi.w	8002444 <HAL_TIM_IC_Start_DMA+0x298>
 80022ea:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <HAL_TIM_IC_Start_DMA+0x144>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	08002325 	.word	0x08002325
 80022f4:	08002445 	.word	0x08002445
 80022f8:	08002445 	.word	0x08002445
 80022fc:	08002445 	.word	0x08002445
 8002300:	0800236d 	.word	0x0800236d
 8002304:	08002445 	.word	0x08002445
 8002308:	08002445 	.word	0x08002445
 800230c:	08002445 	.word	0x08002445
 8002310:	080023b5 	.word	0x080023b5
 8002314:	08002445 	.word	0x08002445
 8002318:	08002445 	.word	0x08002445
 800231c:	08002445 	.word	0x08002445
 8002320:	080023fd 	.word	0x080023fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_TIM_IC_Start_DMA+0x2fc>)
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	4a5e      	ldr	r2, [pc, #376]	; (80024ac <HAL_TIM_IC_Start_DMA+0x300>)
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	4a5d      	ldr	r2, [pc, #372]	; (80024b0 <HAL_TIM_IC_Start_DMA+0x304>)
 800233a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3334      	adds	r3, #52	; 0x34
 8002346:	4619      	mov	r1, r3
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	f7fe fed6 	bl	80010fc <HAL_DMA_Start_IT>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0a1      	b.n	800249e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002368:	60da      	str	r2, [r3, #12]
      break;
 800236a:	e06e      	b.n	800244a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	4a4d      	ldr	r2, [pc, #308]	; (80024a8 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <HAL_TIM_IC_Start_DMA+0x300>)
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	4a4b      	ldr	r2, [pc, #300]	; (80024b0 <HAL_TIM_IC_Start_DMA+0x304>)
 8002382:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3338      	adds	r3, #56	; 0x38
 800238e:	4619      	mov	r1, r3
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	f7fe feb2 	bl	80010fc <HAL_DMA_Start_IT>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07d      	b.n	800249e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023b0:	60da      	str	r2, [r3, #12]
      break;
 80023b2:	e04a      	b.n	800244a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	4a3b      	ldr	r2, [pc, #236]	; (80024a8 <HAL_TIM_IC_Start_DMA+0x2fc>)
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	4a3a      	ldr	r2, [pc, #232]	; (80024ac <HAL_TIM_IC_Start_DMA+0x300>)
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	4a39      	ldr	r2, [pc, #228]	; (80024b0 <HAL_TIM_IC_Start_DMA+0x304>)
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	333c      	adds	r3, #60	; 0x3c
 80023d6:	4619      	mov	r1, r3
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	f7fe fe8e 	bl	80010fc <HAL_DMA_Start_IT>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e059      	b.n	800249e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f8:	60da      	str	r2, [r3, #12]
      break;
 80023fa:	e026      	b.n	800244a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <HAL_TIM_IC_Start_DMA+0x300>)
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_TIM_IC_Start_DMA+0x304>)
 8002412:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3340      	adds	r3, #64	; 0x40
 800241e:	4619      	mov	r1, r3
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	f7fe fe6a 	bl	80010fc <HAL_DMA_Start_IT>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e035      	b.n	800249e <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002440:	60da      	str	r2, [r3, #12]
      break;
 8002442:	e002      	b.n	800244a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	75fb      	strb	r3, [r7, #23]
      break;
 8002448:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_TIM_IC_Start_DMA+0x308>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_TIM_IC_Start_DMA+0x2bc>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d004      	beq.n	8002468 <HAL_TIM_IC_Start_DMA+0x2bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <HAL_TIM_IC_Start_DMA+0x30c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d111      	bne.n	800248c <HAL_TIM_IC_Start_DMA+0x2e0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b06      	cmp	r3, #6
 8002478:	d010      	beq.n	800249c <HAL_TIM_IC_Start_DMA+0x2f0>
    {
      __HAL_TIM_ENABLE(htim);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248a:	e007      	b.n	800249c <HAL_TIM_IC_Start_DMA+0x2f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800249c:	7dfb      	ldrb	r3, [r7, #23]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	080029bd 	.word	0x080029bd
 80024ac:	08002a85 	.word	0x08002a85
 80024b0:	0800292b 	.word	0x0800292b
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400

080024bc <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fcff 	bl	8002ed6 <TIM_CCxChannelCmd>

  switch (Channel)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d854      	bhi.n	8002588 <HAL_TIM_IC_Stop_DMA+0xcc>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <HAL_TIM_IC_Stop_DMA+0x28>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	08002519 	.word	0x08002519
 80024e8:	08002589 	.word	0x08002589
 80024ec:	08002589 	.word	0x08002589
 80024f0:	08002589 	.word	0x08002589
 80024f4:	08002535 	.word	0x08002535
 80024f8:	08002589 	.word	0x08002589
 80024fc:	08002589 	.word	0x08002589
 8002500:	08002589 	.word	0x08002589
 8002504:	08002551 	.word	0x08002551
 8002508:	08002589 	.word	0x08002589
 800250c:	08002589 	.word	0x08002589
 8002510:	08002589 	.word	0x08002589
 8002514:	0800256d 	.word	0x0800256d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002526:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fe45 	bl	80011bc <HAL_DMA_Abort_IT>
      break;
 8002532:	e02c      	b.n	800258e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fe37 	bl	80011bc <HAL_DMA_Abort_IT>
      break;
 800254e:	e01e      	b.n	800258e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fe29 	bl	80011bc <HAL_DMA_Abort_IT>
      break;
 800256a:	e010      	b.n	800258e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800257a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fe1b 	bl	80011bc <HAL_DMA_Abort_IT>
      break;
 8002586:	e002      	b.n	800258e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	bf00      	nop
  }

  if (status == HAL_OK)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d14f      	bne.n	8002634 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	f241 1311 	movw	r3, #4369	; 0x1111
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <HAL_TIM_IC_Stop_DMA+0x108>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	f240 4344 	movw	r3, #1092	; 0x444
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IC_Stop_DMA+0x108>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d104      	bne.n	80025d4 <HAL_TIM_IC_Stop_DMA+0x118>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d2:	e013      	b.n	80025fc <HAL_TIM_IC_Stop_DMA+0x140>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d104      	bne.n	80025e4 <HAL_TIM_IC_Stop_DMA+0x128>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e2:	e00b      	b.n	80025fc <HAL_TIM_IC_Stop_DMA+0x140>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d104      	bne.n	80025f4 <HAL_TIM_IC_Stop_DMA+0x138>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f2:	e003      	b.n	80025fc <HAL_TIM_IC_Stop_DMA+0x140>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <HAL_TIM_IC_Stop_DMA+0x150>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800260a:	e013      	b.n	8002634 <HAL_TIM_IC_Stop_DMA+0x178>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d104      	bne.n	800261c <HAL_TIM_IC_Stop_DMA+0x160>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800261a:	e00b      	b.n	8002634 <HAL_TIM_IC_Stop_DMA+0x178>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d104      	bne.n	800262c <HAL_TIM_IC_Stop_DMA+0x170>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800262a:	e003      	b.n	8002634 <HAL_TIM_IC_Stop_DMA+0x178>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop

08002640 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_TIM_IC_ConfigChannel+0x1e>
 800265a:	2302      	movs	r3, #2
 800265c:	e088      	b.n	8002770 <HAL_TIM_IC_ConfigChannel+0x130>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800267c:	f000 fa8e 	bl	8002b9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020c 	bic.w	r2, r2, #12
 800268e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6999      	ldr	r1, [r3, #24]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	619a      	str	r2, [r3, #24]
 80026a2:	e060      	b.n	8002766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d11c      	bne.n	80026e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026ba:	f000 faf1 	bl	8002ca0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6999      	ldr	r1, [r3, #24]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	619a      	str	r2, [r3, #24]
 80026e2:	e040      	b.n	8002766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d11b      	bne.n	8002722 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80026fa:	f000 fb3c 	bl	8002d76 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020c 	bic.w	r2, r2, #12
 800270c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69d9      	ldr	r1, [r3, #28]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	61da      	str	r2, [r3, #28]
 8002720:	e021      	b.n	8002766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d11c      	bne.n	8002762 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002738:	f000 fb58 	bl	8002dec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800274a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69d9      	ldr	r1, [r3, #28]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	021a      	lsls	r2, r3, #8
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	61da      	str	r2, [r3, #28]
 8002760:	e001      	b.n	8002766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800276e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_TIM_ConfigClockSource+0x1c>
 8002790:	2302      	movs	r3, #2
 8002792:	e0b4      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x186>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027cc:	d03e      	beq.n	800284c <HAL_TIM_ConfigClockSource+0xd4>
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	f200 8087 	bhi.w	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027da:	f000 8086 	beq.w	80028ea <HAL_TIM_ConfigClockSource+0x172>
 80027de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e2:	d87f      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b70      	cmp	r3, #112	; 0x70
 80027e6:	d01a      	beq.n	800281e <HAL_TIM_ConfigClockSource+0xa6>
 80027e8:	2b70      	cmp	r3, #112	; 0x70
 80027ea:	d87b      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b60      	cmp	r3, #96	; 0x60
 80027ee:	d050      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x11a>
 80027f0:	2b60      	cmp	r3, #96	; 0x60
 80027f2:	d877      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b50      	cmp	r3, #80	; 0x50
 80027f6:	d03c      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0xfa>
 80027f8:	2b50      	cmp	r3, #80	; 0x50
 80027fa:	d873      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d058      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d86f      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b30      	cmp	r3, #48	; 0x30
 8002806:	d064      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002808:	2b30      	cmp	r3, #48	; 0x30
 800280a:	d86b      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 800280c:	2b20      	cmp	r3, #32
 800280e:	d060      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002810:	2b20      	cmp	r3, #32
 8002812:	d867      	bhi.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d05c      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002818:	2b10      	cmp	r3, #16
 800281a:	d05a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x15a>
 800281c:	e062      	b.n	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800282e:	f000 fb33 	bl	8002e98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	609a      	str	r2, [r3, #8]
      break;
 800284a:	e04f      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800285c:	f000 fb1c 	bl	8002e98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286e:	609a      	str	r2, [r3, #8]
      break;
 8002870:	e03c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	461a      	mov	r2, r3
 8002880:	f000 f9e0 	bl	8002c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2150      	movs	r1, #80	; 0x50
 800288a:	4618      	mov	r0, r3
 800288c:	f000 faea 	bl	8002e64 <TIM_ITRx_SetConfig>
      break;
 8002890:	e02c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 fa3a 	bl	8002d18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2160      	movs	r1, #96	; 0x60
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fada 	bl	8002e64 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e01c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	461a      	mov	r2, r3
 80028c0:	f000 f9c0 	bl	8002c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 faca 	bl	8002e64 <TIM_ITRx_SetConfig>
      break;
 80028d0:	e00c      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f000 fac1 	bl	8002e64 <TIM_ITRx_SetConfig>
      break;
 80028e2:	e003      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e000      	b.n	80028ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d107      	bne.n	8002952 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	e02a      	b.n	80029a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2202      	movs	r2, #2
 8002960:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800296a:	e01d      	b.n	80029a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	d107      	bne.n	8002986 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2204      	movs	r2, #4
 800297a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002984:	e010      	b.n	80029a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2208      	movs	r2, #8
 8002994:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800299e:	e003      	b.n	80029a8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ffb5 	bl	8002918 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d10f      	bne.n	80029f4 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d146      	bne.n	8002a70 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f2:	e03d      	b.n	8002a70 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d10f      	bne.n	8002a1e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2202      	movs	r2, #2
 8002a02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d131      	bne.n	8002a70 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a1c:	e028      	b.n	8002a70 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10f      	bne.n	8002a48 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11c      	bne.n	8002a70 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a46:	e013      	b.n	8002a70 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d10e      	bne.n	8002a70 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7fd fbaf 	bl	80001d4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d103      	bne.n	8002aa4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	771a      	strb	r2, [r3, #28]
 8002aa2:	e019      	b.n	8002ad8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d103      	bne.n	8002ab6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	771a      	strb	r2, [r3, #28]
 8002ab4:	e010      	b.n	8002ad8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d103      	bne.n	8002ac8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	771a      	strb	r2, [r3, #28]
 8002ac6:	e007      	b.n	8002ad8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d102      	bne.n	8002ad8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff ff14 	bl	8002906 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <TIM_Base_SetConfig+0xa8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0x28>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x28>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <TIM_Base_SetConfig+0xac>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <TIM_Base_SetConfig+0xa8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0x52>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0x52>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <TIM_Base_SetConfig+0xac>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <TIM_Base_SetConfig+0xa8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d103      	bne.n	8002b84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40000400 	.word	0x40000400

08002b9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 0201 	bic.w	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <TIM_TI1_SetConfig+0xa0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <TIM_TI1_SetConfig+0x3e>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d003      	beq.n	8002bda <TIM_TI1_SetConfig+0x3e>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <TIM_TI1_SetConfig+0xa4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <TIM_TI1_SetConfig+0x42>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <TIM_TI1_SetConfig+0x44>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e003      	b.n	8002bfe <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f023 030a 	bic.w	r3, r3, #10
 8002c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 030a 	and.w	r3, r3, #10
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40000400 	.word	0x40000400

08002c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f023 0201 	bic.w	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 030a 	bic.w	r3, r3, #10
 8002c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 0210 	bic.w	r2, r3, #16
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	031b      	lsls	r3, r3, #12
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0210 	bic.w	r2, r3, #16
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	031b      	lsls	r3, r3, #12
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	621a      	str	r2, [r3, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b087      	sub	sp, #28
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	031b      	lsls	r3, r3, #12
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e3e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	031b      	lsls	r3, r3, #12
 8002e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	621a      	str	r2, [r3, #32]
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f043 0307 	orr.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	609a      	str	r2, [r3, #8]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	021a      	lsls	r2, r3, #8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b087      	sub	sp, #28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2201      	movs	r2, #1
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	401a      	ands	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	621a      	str	r2, [r3, #32]
}
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e041      	b.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d004      	beq.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10c      	bne.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400

08002fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e042      	b.n	8003068 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fd0c 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f91d 	bl	8003254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	d16d      	bne.n	800316c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_UART_Transmit+0x2c>
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e066      	b.n	800316e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2221      	movs	r2, #33	; 0x21
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ae:	f7fd fe8f 	bl	8000dd0 <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c8:	d108      	bne.n	80030dc <HAL_UART_Transmit+0x6c>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d104      	bne.n	80030dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e003      	b.n	80030e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030e4:	e02a      	b.n	800313c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f840 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e036      	b.n	800316e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	3302      	adds	r3, #2
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	e007      	b.n	800312e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1cf      	bne.n	80030e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	2140      	movs	r1, #64	; 0x40
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f810 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e006      	b.n	800316e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b090      	sub	sp, #64	; 0x40
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003186:	e050      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d04c      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003196:	f7fd fe1b 	bl	8000dd0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d241      	bcs.n	800322a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c6:	637a      	str	r2, [r7, #52]	; 0x34
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e5      	bne.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3314      	adds	r3, #20
 80031e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fa:	623a      	str	r2, [r7, #32]
 80031fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	69f9      	ldr	r1, [r7, #28]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	61bb      	str	r3, [r7, #24]
   return(result);
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e5      	bne.n	80031da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e00f      	b.n	800324a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	429a      	cmp	r2, r3
 8003246:	d09f      	beq.n	8003188 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3740      	adds	r7, #64	; 0x40
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800328e:	f023 030c 	bic.w	r3, r3, #12
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	430b      	orrs	r3, r1
 800329a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <UART_SetConfig+0x114>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7fe fe9c 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	e002      	b.n	80032ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7fe fe84 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 80032c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009a      	lsls	r2, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	4a22      	ldr	r2, [pc, #136]	; (800336c <UART_SetConfig+0x118>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	0119      	lsls	r1, r3, #4
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009a      	lsls	r2, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <UART_SetConfig+0x118>)
 8003302:	fba3 0302 	umull	r0, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2064      	movs	r0, #100	; 0x64
 800330a:	fb00 f303 	mul.w	r3, r0, r3
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	3332      	adds	r3, #50	; 0x32
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <UART_SetConfig+0x118>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003320:	4419      	add	r1, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009a      	lsls	r2, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	fbb2 f2f3 	udiv	r2, r2, r3
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <UART_SetConfig+0x118>)
 800333a:	fba3 0302 	umull	r0, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2064      	movs	r0, #100	; 0x64
 8003342:	fb00 f303 	mul.w	r3, r0, r3
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	3332      	adds	r3, #50	; 0x32
 800334c:	4a07      	ldr	r2, [pc, #28]	; (800336c <UART_SetConfig+0x118>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	440a      	add	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40013800 	.word	0x40013800
 800336c:	51eb851f 	.word	0x51eb851f

08003370 <std>:
 8003370:	2300      	movs	r3, #0
 8003372:	b510      	push	{r4, lr}
 8003374:	4604      	mov	r4, r0
 8003376:	e9c0 3300 	strd	r3, r3, [r0]
 800337a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800337e:	6083      	str	r3, [r0, #8]
 8003380:	8181      	strh	r1, [r0, #12]
 8003382:	6643      	str	r3, [r0, #100]	; 0x64
 8003384:	81c2      	strh	r2, [r0, #14]
 8003386:	6183      	str	r3, [r0, #24]
 8003388:	4619      	mov	r1, r3
 800338a:	2208      	movs	r2, #8
 800338c:	305c      	adds	r0, #92	; 0x5c
 800338e:	f000 f9f7 	bl	8003780 <memset>
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <std+0x58>)
 8003394:	6224      	str	r4, [r4, #32]
 8003396:	6263      	str	r3, [r4, #36]	; 0x24
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <std+0x5c>)
 800339a:	62a3      	str	r3, [r4, #40]	; 0x28
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <std+0x60>)
 800339e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <std+0x64>)
 80033a2:	6323      	str	r3, [r4, #48]	; 0x30
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <std+0x68>)
 80033a6:	429c      	cmp	r4, r3
 80033a8:	d006      	beq.n	80033b8 <std+0x48>
 80033aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80033ae:	4294      	cmp	r4, r2
 80033b0:	d002      	beq.n	80033b8 <std+0x48>
 80033b2:	33d0      	adds	r3, #208	; 0xd0
 80033b4:	429c      	cmp	r4, r3
 80033b6:	d105      	bne.n	80033c4 <std+0x54>
 80033b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f000 ba56 	b.w	8003870 <__retarget_lock_init_recursive>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	bf00      	nop
 80033c8:	080035d1 	.word	0x080035d1
 80033cc:	080035f3 	.word	0x080035f3
 80033d0:	0800362b 	.word	0x0800362b
 80033d4:	0800364f 	.word	0x0800364f
 80033d8:	200002dc 	.word	0x200002dc

080033dc <stdio_exit_handler>:
 80033dc:	4a02      	ldr	r2, [pc, #8]	; (80033e8 <stdio_exit_handler+0xc>)
 80033de:	4903      	ldr	r1, [pc, #12]	; (80033ec <stdio_exit_handler+0x10>)
 80033e0:	4803      	ldr	r0, [pc, #12]	; (80033f0 <stdio_exit_handler+0x14>)
 80033e2:	f000 b869 	b.w	80034b8 <_fwalk_sglue>
 80033e6:	bf00      	nop
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	08004111 	.word	0x08004111
 80033f0:	20000018 	.word	0x20000018

080033f4 <cleanup_stdio>:
 80033f4:	6841      	ldr	r1, [r0, #4]
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <cleanup_stdio+0x34>)
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4299      	cmp	r1, r3
 80033fc:	4604      	mov	r4, r0
 80033fe:	d001      	beq.n	8003404 <cleanup_stdio+0x10>
 8003400:	f000 fe86 	bl	8004110 <_fflush_r>
 8003404:	68a1      	ldr	r1, [r4, #8]
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <cleanup_stdio+0x38>)
 8003408:	4299      	cmp	r1, r3
 800340a:	d002      	beq.n	8003412 <cleanup_stdio+0x1e>
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fe7f 	bl	8004110 <_fflush_r>
 8003412:	68e1      	ldr	r1, [r4, #12]
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <cleanup_stdio+0x3c>)
 8003416:	4299      	cmp	r1, r3
 8003418:	d004      	beq.n	8003424 <cleanup_stdio+0x30>
 800341a:	4620      	mov	r0, r4
 800341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003420:	f000 be76 	b.w	8004110 <_fflush_r>
 8003424:	bd10      	pop	{r4, pc}
 8003426:	bf00      	nop
 8003428:	200002dc 	.word	0x200002dc
 800342c:	20000344 	.word	0x20000344
 8003430:	200003ac 	.word	0x200003ac

08003434 <global_stdio_init.part.0>:
 8003434:	b510      	push	{r4, lr}
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <global_stdio_init.part.0+0x30>)
 8003438:	4c0b      	ldr	r4, [pc, #44]	; (8003468 <global_stdio_init.part.0+0x34>)
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <global_stdio_init.part.0+0x38>)
 800343c:	4620      	mov	r0, r4
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	2104      	movs	r1, #4
 8003442:	2200      	movs	r2, #0
 8003444:	f7ff ff94 	bl	8003370 <std>
 8003448:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800344c:	2201      	movs	r2, #1
 800344e:	2109      	movs	r1, #9
 8003450:	f7ff ff8e 	bl	8003370 <std>
 8003454:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003458:	2202      	movs	r2, #2
 800345a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800345e:	2112      	movs	r1, #18
 8003460:	f7ff bf86 	b.w	8003370 <std>
 8003464:	20000414 	.word	0x20000414
 8003468:	200002dc 	.word	0x200002dc
 800346c:	080033dd 	.word	0x080033dd

08003470 <__sfp_lock_acquire>:
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <__sfp_lock_acquire+0x8>)
 8003472:	f000 b9fe 	b.w	8003872 <__retarget_lock_acquire_recursive>
 8003476:	bf00      	nop
 8003478:	2000041d 	.word	0x2000041d

0800347c <__sfp_lock_release>:
 800347c:	4801      	ldr	r0, [pc, #4]	; (8003484 <__sfp_lock_release+0x8>)
 800347e:	f000 b9f9 	b.w	8003874 <__retarget_lock_release_recursive>
 8003482:	bf00      	nop
 8003484:	2000041d 	.word	0x2000041d

08003488 <__sinit>:
 8003488:	b510      	push	{r4, lr}
 800348a:	4604      	mov	r4, r0
 800348c:	f7ff fff0 	bl	8003470 <__sfp_lock_acquire>
 8003490:	6a23      	ldr	r3, [r4, #32]
 8003492:	b11b      	cbz	r3, 800349c <__sinit+0x14>
 8003494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003498:	f7ff bff0 	b.w	800347c <__sfp_lock_release>
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__sinit+0x28>)
 800349e:	6223      	str	r3, [r4, #32]
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <__sinit+0x2c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f5      	bne.n	8003494 <__sinit+0xc>
 80034a8:	f7ff ffc4 	bl	8003434 <global_stdio_init.part.0>
 80034ac:	e7f2      	b.n	8003494 <__sinit+0xc>
 80034ae:	bf00      	nop
 80034b0:	080033f5 	.word	0x080033f5
 80034b4:	20000414 	.word	0x20000414

080034b8 <_fwalk_sglue>:
 80034b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034bc:	4607      	mov	r7, r0
 80034be:	4688      	mov	r8, r1
 80034c0:	4614      	mov	r4, r2
 80034c2:	2600      	movs	r6, #0
 80034c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034c8:	f1b9 0901 	subs.w	r9, r9, #1
 80034cc:	d505      	bpl.n	80034da <_fwalk_sglue+0x22>
 80034ce:	6824      	ldr	r4, [r4, #0]
 80034d0:	2c00      	cmp	r4, #0
 80034d2:	d1f7      	bne.n	80034c4 <_fwalk_sglue+0xc>
 80034d4:	4630      	mov	r0, r6
 80034d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034da:	89ab      	ldrh	r3, [r5, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d907      	bls.n	80034f0 <_fwalk_sglue+0x38>
 80034e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034e4:	3301      	adds	r3, #1
 80034e6:	d003      	beq.n	80034f0 <_fwalk_sglue+0x38>
 80034e8:	4629      	mov	r1, r5
 80034ea:	4638      	mov	r0, r7
 80034ec:	47c0      	blx	r8
 80034ee:	4306      	orrs	r6, r0
 80034f0:	3568      	adds	r5, #104	; 0x68
 80034f2:	e7e9      	b.n	80034c8 <_fwalk_sglue+0x10>

080034f4 <iprintf>:
 80034f4:	b40f      	push	{r0, r1, r2, r3}
 80034f6:	b507      	push	{r0, r1, r2, lr}
 80034f8:	4906      	ldr	r1, [pc, #24]	; (8003514 <iprintf+0x20>)
 80034fa:	ab04      	add	r3, sp, #16
 80034fc:	6808      	ldr	r0, [r1, #0]
 80034fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003502:	6881      	ldr	r1, [r0, #8]
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	f000 fad3 	bl	8003ab0 <_vfiprintf_r>
 800350a:	b003      	add	sp, #12
 800350c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003510:	b004      	add	sp, #16
 8003512:	4770      	bx	lr
 8003514:	20000064 	.word	0x20000064

08003518 <_puts_r>:
 8003518:	6a03      	ldr	r3, [r0, #32]
 800351a:	b570      	push	{r4, r5, r6, lr}
 800351c:	4605      	mov	r5, r0
 800351e:	460e      	mov	r6, r1
 8003520:	6884      	ldr	r4, [r0, #8]
 8003522:	b90b      	cbnz	r3, 8003528 <_puts_r+0x10>
 8003524:	f7ff ffb0 	bl	8003488 <__sinit>
 8003528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800352a:	07db      	lsls	r3, r3, #31
 800352c:	d405      	bmi.n	800353a <_puts_r+0x22>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	0598      	lsls	r0, r3, #22
 8003532:	d402      	bmi.n	800353a <_puts_r+0x22>
 8003534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003536:	f000 f99c 	bl	8003872 <__retarget_lock_acquire_recursive>
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	0719      	lsls	r1, r3, #28
 800353e:	d513      	bpl.n	8003568 <_puts_r+0x50>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	b18b      	cbz	r3, 8003568 <_puts_r+0x50>
 8003544:	3e01      	subs	r6, #1
 8003546:	68a3      	ldr	r3, [r4, #8]
 8003548:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800354c:	3b01      	subs	r3, #1
 800354e:	60a3      	str	r3, [r4, #8]
 8003550:	b9e9      	cbnz	r1, 800358e <_puts_r+0x76>
 8003552:	2b00      	cmp	r3, #0
 8003554:	da2e      	bge.n	80035b4 <_puts_r+0x9c>
 8003556:	4622      	mov	r2, r4
 8003558:	210a      	movs	r1, #10
 800355a:	4628      	mov	r0, r5
 800355c:	f000 f87b 	bl	8003656 <__swbuf_r>
 8003560:	3001      	adds	r0, #1
 8003562:	d007      	beq.n	8003574 <_puts_r+0x5c>
 8003564:	250a      	movs	r5, #10
 8003566:	e007      	b.n	8003578 <_puts_r+0x60>
 8003568:	4621      	mov	r1, r4
 800356a:	4628      	mov	r0, r5
 800356c:	f000 f8b0 	bl	80036d0 <__swsetup_r>
 8003570:	2800      	cmp	r0, #0
 8003572:	d0e7      	beq.n	8003544 <_puts_r+0x2c>
 8003574:	f04f 35ff 	mov.w	r5, #4294967295
 8003578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357a:	07da      	lsls	r2, r3, #31
 800357c:	d405      	bmi.n	800358a <_puts_r+0x72>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	059b      	lsls	r3, r3, #22
 8003582:	d402      	bmi.n	800358a <_puts_r+0x72>
 8003584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003586:	f000 f975 	bl	8003874 <__retarget_lock_release_recursive>
 800358a:	4628      	mov	r0, r5
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	2b00      	cmp	r3, #0
 8003590:	da04      	bge.n	800359c <_puts_r+0x84>
 8003592:	69a2      	ldr	r2, [r4, #24]
 8003594:	429a      	cmp	r2, r3
 8003596:	dc06      	bgt.n	80035a6 <_puts_r+0x8e>
 8003598:	290a      	cmp	r1, #10
 800359a:	d004      	beq.n	80035a6 <_puts_r+0x8e>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	6022      	str	r2, [r4, #0]
 80035a2:	7019      	strb	r1, [r3, #0]
 80035a4:	e7cf      	b.n	8003546 <_puts_r+0x2e>
 80035a6:	4622      	mov	r2, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	f000 f854 	bl	8003656 <__swbuf_r>
 80035ae:	3001      	adds	r0, #1
 80035b0:	d1c9      	bne.n	8003546 <_puts_r+0x2e>
 80035b2:	e7df      	b.n	8003574 <_puts_r+0x5c>
 80035b4:	250a      	movs	r5, #10
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	6022      	str	r2, [r4, #0]
 80035bc:	701d      	strb	r5, [r3, #0]
 80035be:	e7db      	b.n	8003578 <_puts_r+0x60>

080035c0 <puts>:
 80035c0:	4b02      	ldr	r3, [pc, #8]	; (80035cc <puts+0xc>)
 80035c2:	4601      	mov	r1, r0
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	f7ff bfa7 	b.w	8003518 <_puts_r>
 80035ca:	bf00      	nop
 80035cc:	20000064 	.word	0x20000064

080035d0 <__sread>:
 80035d0:	b510      	push	{r4, lr}
 80035d2:	460c      	mov	r4, r1
 80035d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d8:	f000 f8fc 	bl	80037d4 <_read_r>
 80035dc:	2800      	cmp	r0, #0
 80035de:	bfab      	itete	ge
 80035e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035e2:	89a3      	ldrhlt	r3, [r4, #12]
 80035e4:	181b      	addge	r3, r3, r0
 80035e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035ea:	bfac      	ite	ge
 80035ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80035ee:	81a3      	strhlt	r3, [r4, #12]
 80035f0:	bd10      	pop	{r4, pc}

080035f2 <__swrite>:
 80035f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f6:	461f      	mov	r7, r3
 80035f8:	898b      	ldrh	r3, [r1, #12]
 80035fa:	4605      	mov	r5, r0
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	460c      	mov	r4, r1
 8003600:	4616      	mov	r6, r2
 8003602:	d505      	bpl.n	8003610 <__swrite+0x1e>
 8003604:	2302      	movs	r3, #2
 8003606:	2200      	movs	r2, #0
 8003608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800360c:	f000 f8d0 	bl	80037b0 <_lseek_r>
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	4632      	mov	r2, r6
 8003614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003618:	81a3      	strh	r3, [r4, #12]
 800361a:	4628      	mov	r0, r5
 800361c:	463b      	mov	r3, r7
 800361e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003626:	f000 b8e7 	b.w	80037f8 <_write_r>

0800362a <__sseek>:
 800362a:	b510      	push	{r4, lr}
 800362c:	460c      	mov	r4, r1
 800362e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003632:	f000 f8bd 	bl	80037b0 <_lseek_r>
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	bf15      	itete	ne
 800363c:	6560      	strne	r0, [r4, #84]	; 0x54
 800363e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003646:	81a3      	strheq	r3, [r4, #12]
 8003648:	bf18      	it	ne
 800364a:	81a3      	strhne	r3, [r4, #12]
 800364c:	bd10      	pop	{r4, pc}

0800364e <__sclose>:
 800364e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003652:	f000 b89d 	b.w	8003790 <_close_r>

08003656 <__swbuf_r>:
 8003656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003658:	460e      	mov	r6, r1
 800365a:	4614      	mov	r4, r2
 800365c:	4605      	mov	r5, r0
 800365e:	b118      	cbz	r0, 8003668 <__swbuf_r+0x12>
 8003660:	6a03      	ldr	r3, [r0, #32]
 8003662:	b90b      	cbnz	r3, 8003668 <__swbuf_r+0x12>
 8003664:	f7ff ff10 	bl	8003488 <__sinit>
 8003668:	69a3      	ldr	r3, [r4, #24]
 800366a:	60a3      	str	r3, [r4, #8]
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	071a      	lsls	r2, r3, #28
 8003670:	d525      	bpl.n	80036be <__swbuf_r+0x68>
 8003672:	6923      	ldr	r3, [r4, #16]
 8003674:	b31b      	cbz	r3, 80036be <__swbuf_r+0x68>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	6922      	ldr	r2, [r4, #16]
 800367a:	b2f6      	uxtb	r6, r6
 800367c:	1a98      	subs	r0, r3, r2
 800367e:	6963      	ldr	r3, [r4, #20]
 8003680:	4637      	mov	r7, r6
 8003682:	4283      	cmp	r3, r0
 8003684:	dc04      	bgt.n	8003690 <__swbuf_r+0x3a>
 8003686:	4621      	mov	r1, r4
 8003688:	4628      	mov	r0, r5
 800368a:	f000 fd41 	bl	8004110 <_fflush_r>
 800368e:	b9e0      	cbnz	r0, 80036ca <__swbuf_r+0x74>
 8003690:	68a3      	ldr	r3, [r4, #8]
 8003692:	3b01      	subs	r3, #1
 8003694:	60a3      	str	r3, [r4, #8]
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	6022      	str	r2, [r4, #0]
 800369c:	701e      	strb	r6, [r3, #0]
 800369e:	6962      	ldr	r2, [r4, #20]
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d004      	beq.n	80036b0 <__swbuf_r+0x5a>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	07db      	lsls	r3, r3, #31
 80036aa:	d506      	bpl.n	80036ba <__swbuf_r+0x64>
 80036ac:	2e0a      	cmp	r6, #10
 80036ae:	d104      	bne.n	80036ba <__swbuf_r+0x64>
 80036b0:	4621      	mov	r1, r4
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 fd2c 	bl	8004110 <_fflush_r>
 80036b8:	b938      	cbnz	r0, 80036ca <__swbuf_r+0x74>
 80036ba:	4638      	mov	r0, r7
 80036bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036be:	4621      	mov	r1, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	f000 f805 	bl	80036d0 <__swsetup_r>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d0d5      	beq.n	8003676 <__swbuf_r+0x20>
 80036ca:	f04f 37ff 	mov.w	r7, #4294967295
 80036ce:	e7f4      	b.n	80036ba <__swbuf_r+0x64>

080036d0 <__swsetup_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <__swsetup_r+0xac>)
 80036d4:	4605      	mov	r5, r0
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	460c      	mov	r4, r1
 80036da:	b118      	cbz	r0, 80036e4 <__swsetup_r+0x14>
 80036dc:	6a03      	ldr	r3, [r0, #32]
 80036de:	b90b      	cbnz	r3, 80036e4 <__swsetup_r+0x14>
 80036e0:	f7ff fed2 	bl	8003488 <__sinit>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036ea:	0718      	lsls	r0, r3, #28
 80036ec:	d422      	bmi.n	8003734 <__swsetup_r+0x64>
 80036ee:	06d9      	lsls	r1, r3, #27
 80036f0:	d407      	bmi.n	8003702 <__swsetup_r+0x32>
 80036f2:	2309      	movs	r3, #9
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036fa:	f04f 30ff 	mov.w	r0, #4294967295
 80036fe:	81a3      	strh	r3, [r4, #12]
 8003700:	e034      	b.n	800376c <__swsetup_r+0x9c>
 8003702:	0758      	lsls	r0, r3, #29
 8003704:	d512      	bpl.n	800372c <__swsetup_r+0x5c>
 8003706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003708:	b141      	cbz	r1, 800371c <__swsetup_r+0x4c>
 800370a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800370e:	4299      	cmp	r1, r3
 8003710:	d002      	beq.n	8003718 <__swsetup_r+0x48>
 8003712:	4628      	mov	r0, r5
 8003714:	f000 f8b0 	bl	8003878 <_free_r>
 8003718:	2300      	movs	r3, #0
 800371a:	6363      	str	r3, [r4, #52]	; 0x34
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	2300      	movs	r3, #0
 8003726:	6063      	str	r3, [r4, #4]
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	6923      	ldr	r3, [r4, #16]
 8003736:	b94b      	cbnz	r3, 800374c <__swsetup_r+0x7c>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800373e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003742:	d003      	beq.n	800374c <__swsetup_r+0x7c>
 8003744:	4621      	mov	r1, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f000 fd2f 	bl	80041aa <__smakebuf_r>
 800374c:	89a0      	ldrh	r0, [r4, #12]
 800374e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003752:	f010 0301 	ands.w	r3, r0, #1
 8003756:	d00a      	beq.n	800376e <__swsetup_r+0x9e>
 8003758:	2300      	movs	r3, #0
 800375a:	60a3      	str	r3, [r4, #8]
 800375c:	6963      	ldr	r3, [r4, #20]
 800375e:	425b      	negs	r3, r3
 8003760:	61a3      	str	r3, [r4, #24]
 8003762:	6923      	ldr	r3, [r4, #16]
 8003764:	b943      	cbnz	r3, 8003778 <__swsetup_r+0xa8>
 8003766:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800376a:	d1c4      	bne.n	80036f6 <__swsetup_r+0x26>
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	0781      	lsls	r1, r0, #30
 8003770:	bf58      	it	pl
 8003772:	6963      	ldrpl	r3, [r4, #20]
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	e7f4      	b.n	8003762 <__swsetup_r+0x92>
 8003778:	2000      	movs	r0, #0
 800377a:	e7f7      	b.n	800376c <__swsetup_r+0x9c>
 800377c:	20000064 	.word	0x20000064

08003780 <memset>:
 8003780:	4603      	mov	r3, r0
 8003782:	4402      	add	r2, r0
 8003784:	4293      	cmp	r3, r2
 8003786:	d100      	bne.n	800378a <memset+0xa>
 8003788:	4770      	bx	lr
 800378a:	f803 1b01 	strb.w	r1, [r3], #1
 800378e:	e7f9      	b.n	8003784 <memset+0x4>

08003790 <_close_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	2300      	movs	r3, #0
 8003794:	4d05      	ldr	r5, [pc, #20]	; (80037ac <_close_r+0x1c>)
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd fa2d 	bl	8000bfa <_close>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_close_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_close_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	20000418 	.word	0x20000418

080037b0 <_lseek_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	2200      	movs	r2, #0
 80037ba:	4d05      	ldr	r5, [pc, #20]	; (80037d0 <_lseek_r+0x20>)
 80037bc:	602a      	str	r2, [r5, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f7fd fa3f 	bl	8000c42 <_lseek>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_lseek_r+0x1e>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_lseek_r+0x1e>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	20000418 	.word	0x20000418

080037d4 <_read_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	4d05      	ldr	r5, [pc, #20]	; (80037f4 <_read_r+0x20>)
 80037e0:	602a      	str	r2, [r5, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f7fd f9d0 	bl	8000b88 <_read>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_read_r+0x1e>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_read_r+0x1e>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	20000418 	.word	0x20000418

080037f8 <_write_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	2200      	movs	r2, #0
 8003802:	4d05      	ldr	r5, [pc, #20]	; (8003818 <_write_r+0x20>)
 8003804:	602a      	str	r2, [r5, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f7fd f9db 	bl	8000bc2 <_write>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_write_r+0x1e>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	b103      	cbz	r3, 8003816 <_write_r+0x1e>
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	20000418 	.word	0x20000418

0800381c <__errno>:
 800381c:	4b01      	ldr	r3, [pc, #4]	; (8003824 <__errno+0x8>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000064 	.word	0x20000064

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	; (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	f000 fd34 	bl	80042a4 <_init>
 800383c:	2600      	movs	r6, #0
 800383e:	4d0a      	ldr	r5, [pc, #40]	; (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	0800438c 	.word	0x0800438c
 8003864:	0800438c 	.word	0x0800438c
 8003868:	0800438c 	.word	0x0800438c
 800386c:	08004390 	.word	0x08004390

08003870 <__retarget_lock_init_recursive>:
 8003870:	4770      	bx	lr

08003872 <__retarget_lock_acquire_recursive>:
 8003872:	4770      	bx	lr

08003874 <__retarget_lock_release_recursive>:
 8003874:	4770      	bx	lr
	...

08003878 <_free_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	2900      	cmp	r1, #0
 800387e:	d040      	beq.n	8003902 <_free_r+0x8a>
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f0c      	subs	r4, r1, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	18e4      	addlt	r4, r4, r3
 800388c:	f000 f8dc 	bl	8003a48 <__malloc_lock>
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <_free_r+0x8c>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	b933      	cbnz	r3, 80038a4 <_free_r+0x2c>
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6014      	str	r4, [r2, #0]
 800389a:	4628      	mov	r0, r5
 800389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a0:	f000 b8d8 	b.w	8003a54 <__malloc_unlock>
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d908      	bls.n	80038ba <_free_r+0x42>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf01      	itttt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	e7ed      	b.n	8003896 <_free_r+0x1e>
 80038ba:	461a      	mov	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b10b      	cbz	r3, 80038c4 <_free_r+0x4c>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d9fa      	bls.n	80038ba <_free_r+0x42>
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	1850      	adds	r0, r2, r1
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d10b      	bne.n	80038e4 <_free_r+0x6c>
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	4401      	add	r1, r0
 80038d0:	1850      	adds	r0, r2, r1
 80038d2:	4283      	cmp	r3, r0
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	d1e0      	bne.n	800389a <_free_r+0x22>
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4408      	add	r0, r1
 80038de:	6010      	str	r0, [r2, #0]
 80038e0:	6053      	str	r3, [r2, #4]
 80038e2:	e7da      	b.n	800389a <_free_r+0x22>
 80038e4:	d902      	bls.n	80038ec <_free_r+0x74>
 80038e6:	230c      	movs	r3, #12
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	e7d6      	b.n	800389a <_free_r+0x22>
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	1821      	adds	r1, r4, r0
 80038f0:	428b      	cmp	r3, r1
 80038f2:	bf01      	itttt	eq
 80038f4:	6819      	ldreq	r1, [r3, #0]
 80038f6:	685b      	ldreq	r3, [r3, #4]
 80038f8:	1809      	addeq	r1, r1, r0
 80038fa:	6021      	streq	r1, [r4, #0]
 80038fc:	6063      	str	r3, [r4, #4]
 80038fe:	6054      	str	r4, [r2, #4]
 8003900:	e7cb      	b.n	800389a <_free_r+0x22>
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	20000420 	.word	0x20000420

08003908 <sbrk_aligned>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4e0e      	ldr	r6, [pc, #56]	; (8003944 <sbrk_aligned+0x3c>)
 800390c:	460c      	mov	r4, r1
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	4605      	mov	r5, r0
 8003912:	b911      	cbnz	r1, 800391a <sbrk_aligned+0x12>
 8003914:	f000 fca8 	bl	8004268 <_sbrk_r>
 8003918:	6030      	str	r0, [r6, #0]
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f000 fca3 	bl	8004268 <_sbrk_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d00a      	beq.n	800393c <sbrk_aligned+0x34>
 8003926:	1cc4      	adds	r4, r0, #3
 8003928:	f024 0403 	bic.w	r4, r4, #3
 800392c:	42a0      	cmp	r0, r4
 800392e:	d007      	beq.n	8003940 <sbrk_aligned+0x38>
 8003930:	1a21      	subs	r1, r4, r0
 8003932:	4628      	mov	r0, r5
 8003934:	f000 fc98 	bl	8004268 <_sbrk_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d101      	bne.n	8003940 <sbrk_aligned+0x38>
 800393c:	f04f 34ff 	mov.w	r4, #4294967295
 8003940:	4620      	mov	r0, r4
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	20000424 	.word	0x20000424

08003948 <_malloc_r>:
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394c:	1ccd      	adds	r5, r1, #3
 800394e:	f025 0503 	bic.w	r5, r5, #3
 8003952:	3508      	adds	r5, #8
 8003954:	2d0c      	cmp	r5, #12
 8003956:	bf38      	it	cc
 8003958:	250c      	movcc	r5, #12
 800395a:	2d00      	cmp	r5, #0
 800395c:	4607      	mov	r7, r0
 800395e:	db01      	blt.n	8003964 <_malloc_r+0x1c>
 8003960:	42a9      	cmp	r1, r5
 8003962:	d905      	bls.n	8003970 <_malloc_r+0x28>
 8003964:	230c      	movs	r3, #12
 8003966:	2600      	movs	r6, #0
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4630      	mov	r0, r6
 800396c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003970:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a44 <_malloc_r+0xfc>
 8003974:	f000 f868 	bl	8003a48 <__malloc_lock>
 8003978:	f8d8 3000 	ldr.w	r3, [r8]
 800397c:	461c      	mov	r4, r3
 800397e:	bb5c      	cbnz	r4, 80039d8 <_malloc_r+0x90>
 8003980:	4629      	mov	r1, r5
 8003982:	4638      	mov	r0, r7
 8003984:	f7ff ffc0 	bl	8003908 <sbrk_aligned>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	4604      	mov	r4, r0
 800398c:	d155      	bne.n	8003a3a <_malloc_r+0xf2>
 800398e:	f8d8 4000 	ldr.w	r4, [r8]
 8003992:	4626      	mov	r6, r4
 8003994:	2e00      	cmp	r6, #0
 8003996:	d145      	bne.n	8003a24 <_malloc_r+0xdc>
 8003998:	2c00      	cmp	r4, #0
 800399a:	d048      	beq.n	8003a2e <_malloc_r+0xe6>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	4631      	mov	r1, r6
 80039a0:	4638      	mov	r0, r7
 80039a2:	eb04 0903 	add.w	r9, r4, r3
 80039a6:	f000 fc5f 	bl	8004268 <_sbrk_r>
 80039aa:	4581      	cmp	r9, r0
 80039ac:	d13f      	bne.n	8003a2e <_malloc_r+0xe6>
 80039ae:	6821      	ldr	r1, [r4, #0]
 80039b0:	4638      	mov	r0, r7
 80039b2:	1a6d      	subs	r5, r5, r1
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7ff ffa7 	bl	8003908 <sbrk_aligned>
 80039ba:	3001      	adds	r0, #1
 80039bc:	d037      	beq.n	8003a2e <_malloc_r+0xe6>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	442b      	add	r3, r5
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	f8d8 3000 	ldr.w	r3, [r8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d038      	beq.n	8003a3e <_malloc_r+0xf6>
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	42a2      	cmp	r2, r4
 80039d0:	d12b      	bne.n	8003a2a <_malloc_r+0xe2>
 80039d2:	2200      	movs	r2, #0
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e00f      	b.n	80039f8 <_malloc_r+0xb0>
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	1b52      	subs	r2, r2, r5
 80039dc:	d41f      	bmi.n	8003a1e <_malloc_r+0xd6>
 80039de:	2a0b      	cmp	r2, #11
 80039e0:	d917      	bls.n	8003a12 <_malloc_r+0xca>
 80039e2:	1961      	adds	r1, r4, r5
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	6025      	str	r5, [r4, #0]
 80039e8:	bf18      	it	ne
 80039ea:	6059      	strne	r1, [r3, #4]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	bf08      	it	eq
 80039f0:	f8c8 1000 	streq.w	r1, [r8]
 80039f4:	5162      	str	r2, [r4, r5]
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	4638      	mov	r0, r7
 80039fa:	f104 060b 	add.w	r6, r4, #11
 80039fe:	f000 f829 	bl	8003a54 <__malloc_unlock>
 8003a02:	f026 0607 	bic.w	r6, r6, #7
 8003a06:	1d23      	adds	r3, r4, #4
 8003a08:	1af2      	subs	r2, r6, r3
 8003a0a:	d0ae      	beq.n	800396a <_malloc_r+0x22>
 8003a0c:	1b9b      	subs	r3, r3, r6
 8003a0e:	50a3      	str	r3, [r4, r2]
 8003a10:	e7ab      	b.n	800396a <_malloc_r+0x22>
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	6862      	ldr	r2, [r4, #4]
 8003a16:	d1dd      	bne.n	80039d4 <_malloc_r+0x8c>
 8003a18:	f8c8 2000 	str.w	r2, [r8]
 8003a1c:	e7ec      	b.n	80039f8 <_malloc_r+0xb0>
 8003a1e:	4623      	mov	r3, r4
 8003a20:	6864      	ldr	r4, [r4, #4]
 8003a22:	e7ac      	b.n	800397e <_malloc_r+0x36>
 8003a24:	4634      	mov	r4, r6
 8003a26:	6876      	ldr	r6, [r6, #4]
 8003a28:	e7b4      	b.n	8003994 <_malloc_r+0x4c>
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	e7cc      	b.n	80039c8 <_malloc_r+0x80>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	4638      	mov	r0, r7
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	f000 f80e 	bl	8003a54 <__malloc_unlock>
 8003a38:	e797      	b.n	800396a <_malloc_r+0x22>
 8003a3a:	6025      	str	r5, [r4, #0]
 8003a3c:	e7dc      	b.n	80039f8 <_malloc_r+0xb0>
 8003a3e:	605b      	str	r3, [r3, #4]
 8003a40:	deff      	udf	#255	; 0xff
 8003a42:	bf00      	nop
 8003a44:	20000420 	.word	0x20000420

08003a48 <__malloc_lock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__malloc_lock+0x8>)
 8003a4a:	f7ff bf12 	b.w	8003872 <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	2000041c 	.word	0x2000041c

08003a54 <__malloc_unlock>:
 8003a54:	4801      	ldr	r0, [pc, #4]	; (8003a5c <__malloc_unlock+0x8>)
 8003a56:	f7ff bf0d 	b.w	8003874 <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	2000041c 	.word	0x2000041c

08003a60 <__sfputc_r>:
 8003a60:	6893      	ldr	r3, [r2, #8]
 8003a62:	b410      	push	{r4}
 8003a64:	3b01      	subs	r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	da07      	bge.n	8003a7c <__sfputc_r+0x1c>
 8003a6c:	6994      	ldr	r4, [r2, #24]
 8003a6e:	42a3      	cmp	r3, r4
 8003a70:	db01      	blt.n	8003a76 <__sfputc_r+0x16>
 8003a72:	290a      	cmp	r1, #10
 8003a74:	d102      	bne.n	8003a7c <__sfputc_r+0x1c>
 8003a76:	bc10      	pop	{r4}
 8003a78:	f7ff bded 	b.w	8003656 <__swbuf_r>
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	1c58      	adds	r0, r3, #1
 8003a80:	6010      	str	r0, [r2, #0]
 8003a82:	7019      	strb	r1, [r3, #0]
 8003a84:	4608      	mov	r0, r1
 8003a86:	bc10      	pop	{r4}
 8003a88:	4770      	bx	lr

08003a8a <__sfputs_r>:
 8003a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	460f      	mov	r7, r1
 8003a90:	4614      	mov	r4, r2
 8003a92:	18d5      	adds	r5, r2, r3
 8003a94:	42ac      	cmp	r4, r5
 8003a96:	d101      	bne.n	8003a9c <__sfputs_r+0x12>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	e007      	b.n	8003aac <__sfputs_r+0x22>
 8003a9c:	463a      	mov	r2, r7
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa4:	f7ff ffdc 	bl	8003a60 <__sfputc_r>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d1f3      	bne.n	8003a94 <__sfputs_r+0xa>
 8003aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ab0 <_vfiprintf_r>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	4614      	mov	r4, r2
 8003ab8:	4698      	mov	r8, r3
 8003aba:	4606      	mov	r6, r0
 8003abc:	b09d      	sub	sp, #116	; 0x74
 8003abe:	b118      	cbz	r0, 8003ac8 <_vfiprintf_r+0x18>
 8003ac0:	6a03      	ldr	r3, [r0, #32]
 8003ac2:	b90b      	cbnz	r3, 8003ac8 <_vfiprintf_r+0x18>
 8003ac4:	f7ff fce0 	bl	8003488 <__sinit>
 8003ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aca:	07d9      	lsls	r1, r3, #31
 8003acc:	d405      	bmi.n	8003ada <_vfiprintf_r+0x2a>
 8003ace:	89ab      	ldrh	r3, [r5, #12]
 8003ad0:	059a      	lsls	r2, r3, #22
 8003ad2:	d402      	bmi.n	8003ada <_vfiprintf_r+0x2a>
 8003ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ad6:	f7ff fecc 	bl	8003872 <__retarget_lock_acquire_recursive>
 8003ada:	89ab      	ldrh	r3, [r5, #12]
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	d501      	bpl.n	8003ae4 <_vfiprintf_r+0x34>
 8003ae0:	692b      	ldr	r3, [r5, #16]
 8003ae2:	b99b      	cbnz	r3, 8003b0c <_vfiprintf_r+0x5c>
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f7ff fdf2 	bl	80036d0 <__swsetup_r>
 8003aec:	b170      	cbz	r0, 8003b0c <_vfiprintf_r+0x5c>
 8003aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003af0:	07dc      	lsls	r4, r3, #31
 8003af2:	d504      	bpl.n	8003afe <_vfiprintf_r+0x4e>
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	b01d      	add	sp, #116	; 0x74
 8003afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afe:	89ab      	ldrh	r3, [r5, #12]
 8003b00:	0598      	lsls	r0, r3, #22
 8003b02:	d4f7      	bmi.n	8003af4 <_vfiprintf_r+0x44>
 8003b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b06:	f7ff feb5 	bl	8003874 <__retarget_lock_release_recursive>
 8003b0a:	e7f3      	b.n	8003af4 <_vfiprintf_r+0x44>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b10:	2320      	movs	r3, #32
 8003b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b16:	2330      	movs	r3, #48	; 0x30
 8003b18:	f04f 0901 	mov.w	r9, #1
 8003b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b20:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003cd0 <_vfiprintf_r+0x220>
 8003b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b28:	4623      	mov	r3, r4
 8003b2a:	469a      	mov	sl, r3
 8003b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b30:	b10a      	cbz	r2, 8003b36 <_vfiprintf_r+0x86>
 8003b32:	2a25      	cmp	r2, #37	; 0x25
 8003b34:	d1f9      	bne.n	8003b2a <_vfiprintf_r+0x7a>
 8003b36:	ebba 0b04 	subs.w	fp, sl, r4
 8003b3a:	d00b      	beq.n	8003b54 <_vfiprintf_r+0xa4>
 8003b3c:	465b      	mov	r3, fp
 8003b3e:	4622      	mov	r2, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	4630      	mov	r0, r6
 8003b44:	f7ff ffa1 	bl	8003a8a <__sfputs_r>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	f000 80a9 	beq.w	8003ca0 <_vfiprintf_r+0x1f0>
 8003b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b50:	445a      	add	r2, fp
 8003b52:	9209      	str	r2, [sp, #36]	; 0x24
 8003b54:	f89a 3000 	ldrb.w	r3, [sl]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a1 	beq.w	8003ca0 <_vfiprintf_r+0x1f0>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b68:	f10a 0a01 	add.w	sl, sl, #1
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	9307      	str	r3, [sp, #28]
 8003b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b74:	931a      	str	r3, [sp, #104]	; 0x68
 8003b76:	4654      	mov	r4, sl
 8003b78:	2205      	movs	r2, #5
 8003b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7e:	4854      	ldr	r0, [pc, #336]	; (8003cd0 <_vfiprintf_r+0x220>)
 8003b80:	f000 fb82 	bl	8004288 <memchr>
 8003b84:	9a04      	ldr	r2, [sp, #16]
 8003b86:	b9d8      	cbnz	r0, 8003bc0 <_vfiprintf_r+0x110>
 8003b88:	06d1      	lsls	r1, r2, #27
 8003b8a:	bf44      	itt	mi
 8003b8c:	2320      	movmi	r3, #32
 8003b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b92:	0713      	lsls	r3, r2, #28
 8003b94:	bf44      	itt	mi
 8003b96:	232b      	movmi	r3, #43	; 0x2b
 8003b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba2:	d015      	beq.n	8003bd0 <_vfiprintf_r+0x120>
 8003ba4:	4654      	mov	r4, sl
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f04f 0c0a 	mov.w	ip, #10
 8003bac:	9a07      	ldr	r2, [sp, #28]
 8003bae:	4621      	mov	r1, r4
 8003bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb4:	3b30      	subs	r3, #48	; 0x30
 8003bb6:	2b09      	cmp	r3, #9
 8003bb8:	d94d      	bls.n	8003c56 <_vfiprintf_r+0x1a6>
 8003bba:	b1b0      	cbz	r0, 8003bea <_vfiprintf_r+0x13a>
 8003bbc:	9207      	str	r2, [sp, #28]
 8003bbe:	e014      	b.n	8003bea <_vfiprintf_r+0x13a>
 8003bc0:	eba0 0308 	sub.w	r3, r0, r8
 8003bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	46a2      	mov	sl, r4
 8003bcc:	9304      	str	r3, [sp, #16]
 8003bce:	e7d2      	b.n	8003b76 <_vfiprintf_r+0xc6>
 8003bd0:	9b03      	ldr	r3, [sp, #12]
 8003bd2:	1d19      	adds	r1, r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	9103      	str	r1, [sp, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bfbb      	ittet	lt
 8003bdc:	425b      	neglt	r3, r3
 8003bde:	f042 0202 	orrlt.w	r2, r2, #2
 8003be2:	9307      	strge	r3, [sp, #28]
 8003be4:	9307      	strlt	r3, [sp, #28]
 8003be6:	bfb8      	it	lt
 8003be8:	9204      	strlt	r2, [sp, #16]
 8003bea:	7823      	ldrb	r3, [r4, #0]
 8003bec:	2b2e      	cmp	r3, #46	; 0x2e
 8003bee:	d10c      	bne.n	8003c0a <_vfiprintf_r+0x15a>
 8003bf0:	7863      	ldrb	r3, [r4, #1]
 8003bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf4:	d134      	bne.n	8003c60 <_vfiprintf_r+0x1b0>
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	3402      	adds	r4, #2
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	9203      	str	r2, [sp, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bfb8      	it	lt
 8003c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c08:	9305      	str	r3, [sp, #20]
 8003c0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cd4 <_vfiprintf_r+0x224>
 8003c0e:	2203      	movs	r2, #3
 8003c10:	4650      	mov	r0, sl
 8003c12:	7821      	ldrb	r1, [r4, #0]
 8003c14:	f000 fb38 	bl	8004288 <memchr>
 8003c18:	b138      	cbz	r0, 8003c2a <_vfiprintf_r+0x17a>
 8003c1a:	2240      	movs	r2, #64	; 0x40
 8003c1c:	9b04      	ldr	r3, [sp, #16]
 8003c1e:	eba0 000a 	sub.w	r0, r0, sl
 8003c22:	4082      	lsls	r2, r0
 8003c24:	4313      	orrs	r3, r2
 8003c26:	3401      	adds	r4, #1
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2e:	2206      	movs	r2, #6
 8003c30:	4829      	ldr	r0, [pc, #164]	; (8003cd8 <_vfiprintf_r+0x228>)
 8003c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c36:	f000 fb27 	bl	8004288 <memchr>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d03f      	beq.n	8003cbe <_vfiprintf_r+0x20e>
 8003c3e:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <_vfiprintf_r+0x22c>)
 8003c40:	bb1b      	cbnz	r3, 8003c8a <_vfiprintf_r+0x1da>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	3307      	adds	r3, #7
 8003c46:	f023 0307 	bic.w	r3, r3, #7
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	9303      	str	r3, [sp, #12]
 8003c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c50:	443b      	add	r3, r7
 8003c52:	9309      	str	r3, [sp, #36]	; 0x24
 8003c54:	e768      	b.n	8003b28 <_vfiprintf_r+0x78>
 8003c56:	460c      	mov	r4, r1
 8003c58:	2001      	movs	r0, #1
 8003c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c5e:	e7a6      	b.n	8003bae <_vfiprintf_r+0xfe>
 8003c60:	2300      	movs	r3, #0
 8003c62:	f04f 0c0a 	mov.w	ip, #10
 8003c66:	4619      	mov	r1, r3
 8003c68:	3401      	adds	r4, #1
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c72:	3a30      	subs	r2, #48	; 0x30
 8003c74:	2a09      	cmp	r2, #9
 8003c76:	d903      	bls.n	8003c80 <_vfiprintf_r+0x1d0>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0c6      	beq.n	8003c0a <_vfiprintf_r+0x15a>
 8003c7c:	9105      	str	r1, [sp, #20]
 8003c7e:	e7c4      	b.n	8003c0a <_vfiprintf_r+0x15a>
 8003c80:	4604      	mov	r4, r0
 8003c82:	2301      	movs	r3, #1
 8003c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c88:	e7f0      	b.n	8003c6c <_vfiprintf_r+0x1bc>
 8003c8a:	ab03      	add	r3, sp, #12
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	462a      	mov	r2, r5
 8003c90:	4630      	mov	r0, r6
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <_vfiprintf_r+0x230>)
 8003c94:	a904      	add	r1, sp, #16
 8003c96:	f3af 8000 	nop.w
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	1c78      	adds	r0, r7, #1
 8003c9e:	d1d6      	bne.n	8003c4e <_vfiprintf_r+0x19e>
 8003ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ca2:	07d9      	lsls	r1, r3, #31
 8003ca4:	d405      	bmi.n	8003cb2 <_vfiprintf_r+0x202>
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	059a      	lsls	r2, r3, #22
 8003caa:	d402      	bmi.n	8003cb2 <_vfiprintf_r+0x202>
 8003cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cae:	f7ff fde1 	bl	8003874 <__retarget_lock_release_recursive>
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	065b      	lsls	r3, r3, #25
 8003cb6:	f53f af1d 	bmi.w	8003af4 <_vfiprintf_r+0x44>
 8003cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cbc:	e71c      	b.n	8003af8 <_vfiprintf_r+0x48>
 8003cbe:	ab03      	add	r3, sp, #12
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <_vfiprintf_r+0x230>)
 8003cc8:	a904      	add	r1, sp, #16
 8003cca:	f000 f87d 	bl	8003dc8 <_printf_i>
 8003cce:	e7e4      	b.n	8003c9a <_vfiprintf_r+0x1ea>
 8003cd0:	08004356 	.word	0x08004356
 8003cd4:	0800435c 	.word	0x0800435c
 8003cd8:	08004360 	.word	0x08004360
 8003cdc:	00000000 	.word	0x00000000
 8003ce0:	08003a8b 	.word	0x08003a8b

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4616      	mov	r6, r2
 8003cea:	4699      	mov	r9, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	bfb8      	it	lt
 8003cf6:	4613      	movlt	r3, r2
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cfe:	460c      	mov	r4, r1
 8003d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d04:	b10a      	cbz	r2, 8003d0a <_printf_common+0x26>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0699      	lsls	r1, r3, #26
 8003d0e:	bf42      	ittt	mi
 8003d10:	6833      	ldrmi	r3, [r6, #0]
 8003d12:	3302      	addmi	r3, #2
 8003d14:	6033      	strmi	r3, [r6, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	f015 0506 	ands.w	r5, r5, #6
 8003d1c:	d106      	bne.n	8003d2c <_printf_common+0x48>
 8003d1e:	f104 0a19 	add.w	sl, r4, #25
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	6832      	ldr	r2, [r6, #0]
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	42ab      	cmp	r3, r5
 8003d2a:	dc2b      	bgt.n	8003d84 <_printf_common+0xa0>
 8003d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d30:	1e13      	subs	r3, r2, #0
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	bf18      	it	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	0692      	lsls	r2, r2, #26
 8003d3a:	d430      	bmi.n	8003d9e <_printf_common+0xba>
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d44:	47c0      	blx	r8
 8003d46:	3001      	adds	r0, #1
 8003d48:	d023      	beq.n	8003d92 <_printf_common+0xae>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	f003 0306 	and.w	r3, r3, #6
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf14      	ite	ne
 8003d56:	2500      	movne	r5, #0
 8003d58:	6833      	ldreq	r3, [r6, #0]
 8003d5a:	f04f 0600 	mov.w	r6, #0
 8003d5e:	bf08      	it	eq
 8003d60:	68e5      	ldreq	r5, [r4, #12]
 8003d62:	f104 041a 	add.w	r4, r4, #26
 8003d66:	bf08      	it	eq
 8003d68:	1aed      	subeq	r5, r5, r3
 8003d6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d6e:	bf08      	it	eq
 8003d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bfc4      	itt	gt
 8003d78:	1a9b      	subgt	r3, r3, r2
 8003d7a:	18ed      	addgt	r5, r5, r3
 8003d7c:	42b5      	cmp	r5, r6
 8003d7e:	d11a      	bne.n	8003db6 <_printf_common+0xd2>
 8003d80:	2000      	movs	r0, #0
 8003d82:	e008      	b.n	8003d96 <_printf_common+0xb2>
 8003d84:	2301      	movs	r3, #1
 8003d86:	4652      	mov	r2, sl
 8003d88:	4649      	mov	r1, r9
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	47c0      	blx	r8
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d103      	bne.n	8003d9a <_printf_common+0xb6>
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295
 8003d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9a:	3501      	adds	r5, #1
 8003d9c:	e7c1      	b.n	8003d22 <_printf_common+0x3e>
 8003d9e:	2030      	movs	r0, #48	; 0x30
 8003da0:	18e1      	adds	r1, r4, r3
 8003da2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dac:	4422      	add	r2, r4
 8003dae:	3302      	adds	r3, #2
 8003db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003db4:	e7c2      	b.n	8003d3c <_printf_common+0x58>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4622      	mov	r2, r4
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	47c0      	blx	r8
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d0e6      	beq.n	8003d92 <_printf_common+0xae>
 8003dc4:	3601      	adds	r6, #1
 8003dc6:	e7d9      	b.n	8003d7c <_printf_common+0x98>

08003dc8 <_printf_i>:
 8003dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	7e0f      	ldrb	r7, [r1, #24]
 8003dce:	4691      	mov	r9, r2
 8003dd0:	2f78      	cmp	r7, #120	; 0x78
 8003dd2:	4680      	mov	r8, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	469a      	mov	sl, r3
 8003dd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dde:	d807      	bhi.n	8003df0 <_printf_i+0x28>
 8003de0:	2f62      	cmp	r7, #98	; 0x62
 8003de2:	d80a      	bhi.n	8003dfa <_printf_i+0x32>
 8003de4:	2f00      	cmp	r7, #0
 8003de6:	f000 80d5 	beq.w	8003f94 <_printf_i+0x1cc>
 8003dea:	2f58      	cmp	r7, #88	; 0x58
 8003dec:	f000 80c1 	beq.w	8003f72 <_printf_i+0x1aa>
 8003df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003df8:	e03a      	b.n	8003e70 <_printf_i+0xa8>
 8003dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dfe:	2b15      	cmp	r3, #21
 8003e00:	d8f6      	bhi.n	8003df0 <_printf_i+0x28>
 8003e02:	a101      	add	r1, pc, #4	; (adr r1, 8003e08 <_printf_i+0x40>)
 8003e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e75 	.word	0x08003e75
 8003e10:	08003df1 	.word	0x08003df1
 8003e14:	08003df1 	.word	0x08003df1
 8003e18:	08003df1 	.word	0x08003df1
 8003e1c:	08003df1 	.word	0x08003df1
 8003e20:	08003e75 	.word	0x08003e75
 8003e24:	08003df1 	.word	0x08003df1
 8003e28:	08003df1 	.word	0x08003df1
 8003e2c:	08003df1 	.word	0x08003df1
 8003e30:	08003df1 	.word	0x08003df1
 8003e34:	08003f7b 	.word	0x08003f7b
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003f35 	.word	0x08003f35
 8003e40:	08003df1 	.word	0x08003df1
 8003e44:	08003df1 	.word	0x08003df1
 8003e48:	08003f9d 	.word	0x08003f9d
 8003e4c:	08003df1 	.word	0x08003df1
 8003e50:	08003ea1 	.word	0x08003ea1
 8003e54:	08003df1 	.word	0x08003df1
 8003e58:	08003df1 	.word	0x08003df1
 8003e5c:	08003f3d 	.word	0x08003f3d
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	1d1a      	adds	r2, r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	602a      	str	r2, [r5, #0]
 8003e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0a0      	b.n	8003fb6 <_printf_i+0x1ee>
 8003e74:	6820      	ldr	r0, [r4, #0]
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	0607      	lsls	r7, r0, #24
 8003e7a:	f103 0104 	add.w	r1, r3, #4
 8003e7e:	6029      	str	r1, [r5, #0]
 8003e80:	d501      	bpl.n	8003e86 <_printf_i+0xbe>
 8003e82:	681e      	ldr	r6, [r3, #0]
 8003e84:	e003      	b.n	8003e8e <_printf_i+0xc6>
 8003e86:	0646      	lsls	r6, r0, #25
 8003e88:	d5fb      	bpl.n	8003e82 <_printf_i+0xba>
 8003e8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e8e:	2e00      	cmp	r6, #0
 8003e90:	da03      	bge.n	8003e9a <_printf_i+0xd2>
 8003e92:	232d      	movs	r3, #45	; 0x2d
 8003e94:	4276      	negs	r6, r6
 8003e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	4859      	ldr	r0, [pc, #356]	; (8004004 <_printf_i+0x23c>)
 8003e9e:	e012      	b.n	8003ec6 <_printf_i+0xfe>
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	6029      	str	r1, [r5, #0]
 8003ea8:	0605      	lsls	r5, r0, #24
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0xe8>
 8003eac:	681e      	ldr	r6, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <_printf_i+0xee>
 8003eb0:	0641      	lsls	r1, r0, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0xe4>
 8003eb4:	881e      	ldrh	r6, [r3, #0]
 8003eb6:	2f6f      	cmp	r7, #111	; 0x6f
 8003eb8:	bf0c      	ite	eq
 8003eba:	2308      	moveq	r3, #8
 8003ebc:	230a      	movne	r3, #10
 8003ebe:	4851      	ldr	r0, [pc, #324]	; (8004004 <_printf_i+0x23c>)
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ec6:	6865      	ldr	r5, [r4, #4]
 8003ec8:	2d00      	cmp	r5, #0
 8003eca:	bfa8      	it	ge
 8003ecc:	6821      	ldrge	r1, [r4, #0]
 8003ece:	60a5      	str	r5, [r4, #8]
 8003ed0:	bfa4      	itt	ge
 8003ed2:	f021 0104 	bicge.w	r1, r1, #4
 8003ed6:	6021      	strge	r1, [r4, #0]
 8003ed8:	b90e      	cbnz	r6, 8003ede <_printf_i+0x116>
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	d04b      	beq.n	8003f76 <_printf_i+0x1ae>
 8003ede:	4615      	mov	r5, r2
 8003ee0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ee4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ee8:	5dc7      	ldrb	r7, [r0, r7]
 8003eea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eee:	4637      	mov	r7, r6
 8003ef0:	42bb      	cmp	r3, r7
 8003ef2:	460e      	mov	r6, r1
 8003ef4:	d9f4      	bls.n	8003ee0 <_printf_i+0x118>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d10b      	bne.n	8003f12 <_printf_i+0x14a>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	07de      	lsls	r6, r3, #31
 8003efe:	d508      	bpl.n	8003f12 <_printf_i+0x14a>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	6861      	ldr	r1, [r4, #4]
 8003f04:	4299      	cmp	r1, r3
 8003f06:	bfde      	ittt	le
 8003f08:	2330      	movle	r3, #48	; 0x30
 8003f0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f12:	1b52      	subs	r2, r2, r5
 8003f14:	6122      	str	r2, [r4, #16]
 8003f16:	464b      	mov	r3, r9
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f8cd a000 	str.w	sl, [sp]
 8003f20:	aa03      	add	r2, sp, #12
 8003f22:	f7ff fedf 	bl	8003ce4 <_printf_common>
 8003f26:	3001      	adds	r0, #1
 8003f28:	d14a      	bne.n	8003fc0 <_printf_i+0x1f8>
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2e:	b004      	add	sp, #16
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	f043 0320 	orr.w	r3, r3, #32
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	2778      	movs	r7, #120	; 0x78
 8003f3e:	4832      	ldr	r0, [pc, #200]	; (8004008 <_printf_i+0x240>)
 8003f40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	6829      	ldr	r1, [r5, #0]
 8003f48:	061f      	lsls	r7, r3, #24
 8003f4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f4e:	d402      	bmi.n	8003f56 <_printf_i+0x18e>
 8003f50:	065f      	lsls	r7, r3, #25
 8003f52:	bf48      	it	mi
 8003f54:	b2b6      	uxthmi	r6, r6
 8003f56:	07df      	lsls	r7, r3, #31
 8003f58:	bf48      	it	mi
 8003f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f5e:	6029      	str	r1, [r5, #0]
 8003f60:	bf48      	it	mi
 8003f62:	6023      	strmi	r3, [r4, #0]
 8003f64:	b91e      	cbnz	r6, 8003f6e <_printf_i+0x1a6>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	f023 0320 	bic.w	r3, r3, #32
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	2310      	movs	r3, #16
 8003f70:	e7a6      	b.n	8003ec0 <_printf_i+0xf8>
 8003f72:	4824      	ldr	r0, [pc, #144]	; (8004004 <_printf_i+0x23c>)
 8003f74:	e7e4      	b.n	8003f40 <_printf_i+0x178>
 8003f76:	4615      	mov	r5, r2
 8003f78:	e7bd      	b.n	8003ef6 <_printf_i+0x12e>
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	6826      	ldr	r6, [r4, #0]
 8003f7e:	1d18      	adds	r0, r3, #4
 8003f80:	6961      	ldr	r1, [r4, #20]
 8003f82:	6028      	str	r0, [r5, #0]
 8003f84:	0635      	lsls	r5, r6, #24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	d501      	bpl.n	8003f8e <_printf_i+0x1c6>
 8003f8a:	6019      	str	r1, [r3, #0]
 8003f8c:	e002      	b.n	8003f94 <_printf_i+0x1cc>
 8003f8e:	0670      	lsls	r0, r6, #25
 8003f90:	d5fb      	bpl.n	8003f8a <_printf_i+0x1c2>
 8003f92:	8019      	strh	r1, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	4615      	mov	r5, r2
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	e7bc      	b.n	8003f16 <_printf_i+0x14e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	602a      	str	r2, [r5, #0]
 8003fa4:	681d      	ldr	r5, [r3, #0]
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f96d 	bl	8004288 <memchr>
 8003fae:	b108      	cbz	r0, 8003fb4 <_printf_i+0x1ec>
 8003fb0:	1b40      	subs	r0, r0, r5
 8003fb2:	6060      	str	r0, [r4, #4]
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fbe:	e7aa      	b.n	8003f16 <_printf_i+0x14e>
 8003fc0:	462a      	mov	r2, r5
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	47d0      	blx	sl
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0ad      	beq.n	8003f2a <_printf_i+0x162>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	079b      	lsls	r3, r3, #30
 8003fd2:	d413      	bmi.n	8003ffc <_printf_i+0x234>
 8003fd4:	68e0      	ldr	r0, [r4, #12]
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	4298      	cmp	r0, r3
 8003fda:	bfb8      	it	lt
 8003fdc:	4618      	movlt	r0, r3
 8003fde:	e7a6      	b.n	8003f2e <_printf_i+0x166>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	47d0      	blx	sl
 8003fea:	3001      	adds	r0, #1
 8003fec:	d09d      	beq.n	8003f2a <_printf_i+0x162>
 8003fee:	3501      	adds	r5, #1
 8003ff0:	68e3      	ldr	r3, [r4, #12]
 8003ff2:	9903      	ldr	r1, [sp, #12]
 8003ff4:	1a5b      	subs	r3, r3, r1
 8003ff6:	42ab      	cmp	r3, r5
 8003ff8:	dcf2      	bgt.n	8003fe0 <_printf_i+0x218>
 8003ffa:	e7eb      	b.n	8003fd4 <_printf_i+0x20c>
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	f104 0619 	add.w	r6, r4, #25
 8004002:	e7f5      	b.n	8003ff0 <_printf_i+0x228>
 8004004:	08004367 	.word	0x08004367
 8004008:	08004378 	.word	0x08004378

0800400c <__sflush_r>:
 800400c:	898a      	ldrh	r2, [r1, #12]
 800400e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004010:	4605      	mov	r5, r0
 8004012:	0710      	lsls	r0, r2, #28
 8004014:	460c      	mov	r4, r1
 8004016:	d457      	bmi.n	80040c8 <__sflush_r+0xbc>
 8004018:	684b      	ldr	r3, [r1, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	dc04      	bgt.n	8004028 <__sflush_r+0x1c>
 800401e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	dc01      	bgt.n	8004028 <__sflush_r+0x1c>
 8004024:	2000      	movs	r0, #0
 8004026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800402a:	2e00      	cmp	r6, #0
 800402c:	d0fa      	beq.n	8004024 <__sflush_r+0x18>
 800402e:	2300      	movs	r3, #0
 8004030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004034:	682f      	ldr	r7, [r5, #0]
 8004036:	6a21      	ldr	r1, [r4, #32]
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	d032      	beq.n	80040a2 <__sflush_r+0x96>
 800403c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	075a      	lsls	r2, r3, #29
 8004042:	d505      	bpl.n	8004050 <__sflush_r+0x44>
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	1ac0      	subs	r0, r0, r3
 8004048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800404a:	b10b      	cbz	r3, 8004050 <__sflush_r+0x44>
 800404c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800404e:	1ac0      	subs	r0, r0, r3
 8004050:	2300      	movs	r3, #0
 8004052:	4602      	mov	r2, r0
 8004054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004056:	4628      	mov	r0, r5
 8004058:	6a21      	ldr	r1, [r4, #32]
 800405a:	47b0      	blx	r6
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	d106      	bne.n	8004070 <__sflush_r+0x64>
 8004062:	6829      	ldr	r1, [r5, #0]
 8004064:	291d      	cmp	r1, #29
 8004066:	d82b      	bhi.n	80040c0 <__sflush_r+0xb4>
 8004068:	4a28      	ldr	r2, [pc, #160]	; (800410c <__sflush_r+0x100>)
 800406a:	410a      	asrs	r2, r1
 800406c:	07d6      	lsls	r6, r2, #31
 800406e:	d427      	bmi.n	80040c0 <__sflush_r+0xb4>
 8004070:	2200      	movs	r2, #0
 8004072:	6062      	str	r2, [r4, #4]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	04d9      	lsls	r1, r3, #19
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	d504      	bpl.n	8004086 <__sflush_r+0x7a>
 800407c:	1c42      	adds	r2, r0, #1
 800407e:	d101      	bne.n	8004084 <__sflush_r+0x78>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b903      	cbnz	r3, 8004086 <__sflush_r+0x7a>
 8004084:	6560      	str	r0, [r4, #84]	; 0x54
 8004086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004088:	602f      	str	r7, [r5, #0]
 800408a:	2900      	cmp	r1, #0
 800408c:	d0ca      	beq.n	8004024 <__sflush_r+0x18>
 800408e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004092:	4299      	cmp	r1, r3
 8004094:	d002      	beq.n	800409c <__sflush_r+0x90>
 8004096:	4628      	mov	r0, r5
 8004098:	f7ff fbee 	bl	8003878 <_free_r>
 800409c:	2000      	movs	r0, #0
 800409e:	6360      	str	r0, [r4, #52]	; 0x34
 80040a0:	e7c1      	b.n	8004026 <__sflush_r+0x1a>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b0      	blx	r6
 80040a8:	1c41      	adds	r1, r0, #1
 80040aa:	d1c8      	bne.n	800403e <__sflush_r+0x32>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0c5      	beq.n	800403e <__sflush_r+0x32>
 80040b2:	2b1d      	cmp	r3, #29
 80040b4:	d001      	beq.n	80040ba <__sflush_r+0xae>
 80040b6:	2b16      	cmp	r3, #22
 80040b8:	d101      	bne.n	80040be <__sflush_r+0xb2>
 80040ba:	602f      	str	r7, [r5, #0]
 80040bc:	e7b2      	b.n	8004024 <__sflush_r+0x18>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	e7ae      	b.n	8004026 <__sflush_r+0x1a>
 80040c8:	690f      	ldr	r7, [r1, #16]
 80040ca:	2f00      	cmp	r7, #0
 80040cc:	d0aa      	beq.n	8004024 <__sflush_r+0x18>
 80040ce:	0793      	lsls	r3, r2, #30
 80040d0:	bf18      	it	ne
 80040d2:	2300      	movne	r3, #0
 80040d4:	680e      	ldr	r6, [r1, #0]
 80040d6:	bf08      	it	eq
 80040d8:	694b      	ldreq	r3, [r1, #20]
 80040da:	1bf6      	subs	r6, r6, r7
 80040dc:	600f      	str	r7, [r1, #0]
 80040de:	608b      	str	r3, [r1, #8]
 80040e0:	2e00      	cmp	r6, #0
 80040e2:	dd9f      	ble.n	8004024 <__sflush_r+0x18>
 80040e4:	4633      	mov	r3, r6
 80040e6:	463a      	mov	r2, r7
 80040e8:	4628      	mov	r0, r5
 80040ea:	6a21      	ldr	r1, [r4, #32]
 80040ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80040f0:	47e0      	blx	ip
 80040f2:	2800      	cmp	r0, #0
 80040f4:	dc06      	bgt.n	8004104 <__sflush_r+0xf8>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	e790      	b.n	8004026 <__sflush_r+0x1a>
 8004104:	4407      	add	r7, r0
 8004106:	1a36      	subs	r6, r6, r0
 8004108:	e7ea      	b.n	80040e0 <__sflush_r+0xd4>
 800410a:	bf00      	nop
 800410c:	dfbffffe 	.word	0xdfbffffe

08004110 <_fflush_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	4605      	mov	r5, r0
 8004116:	460c      	mov	r4, r1
 8004118:	b913      	cbnz	r3, 8004120 <_fflush_r+0x10>
 800411a:	2500      	movs	r5, #0
 800411c:	4628      	mov	r0, r5
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	b118      	cbz	r0, 800412a <_fflush_r+0x1a>
 8004122:	6a03      	ldr	r3, [r0, #32]
 8004124:	b90b      	cbnz	r3, 800412a <_fflush_r+0x1a>
 8004126:	f7ff f9af 	bl	8003488 <__sinit>
 800412a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f3      	beq.n	800411a <_fflush_r+0xa>
 8004132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004134:	07d0      	lsls	r0, r2, #31
 8004136:	d404      	bmi.n	8004142 <_fflush_r+0x32>
 8004138:	0599      	lsls	r1, r3, #22
 800413a:	d402      	bmi.n	8004142 <_fflush_r+0x32>
 800413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413e:	f7ff fb98 	bl	8003872 <__retarget_lock_acquire_recursive>
 8004142:	4628      	mov	r0, r5
 8004144:	4621      	mov	r1, r4
 8004146:	f7ff ff61 	bl	800400c <__sflush_r>
 800414a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800414c:	4605      	mov	r5, r0
 800414e:	07da      	lsls	r2, r3, #31
 8004150:	d4e4      	bmi.n	800411c <_fflush_r+0xc>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	059b      	lsls	r3, r3, #22
 8004156:	d4e1      	bmi.n	800411c <_fflush_r+0xc>
 8004158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800415a:	f7ff fb8b 	bl	8003874 <__retarget_lock_release_recursive>
 800415e:	e7dd      	b.n	800411c <_fflush_r+0xc>

08004160 <__swhatbuf_r>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	460c      	mov	r4, r1
 8004164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004168:	4615      	mov	r5, r2
 800416a:	2900      	cmp	r1, #0
 800416c:	461e      	mov	r6, r3
 800416e:	b096      	sub	sp, #88	; 0x58
 8004170:	da0c      	bge.n	800418c <__swhatbuf_r+0x2c>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	2100      	movs	r1, #0
 8004176:	f013 0f80 	tst.w	r3, #128	; 0x80
 800417a:	bf0c      	ite	eq
 800417c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004180:	2340      	movne	r3, #64	; 0x40
 8004182:	2000      	movs	r0, #0
 8004184:	6031      	str	r1, [r6, #0]
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	b016      	add	sp, #88	; 0x58
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	466a      	mov	r2, sp
 800418e:	f000 f849 	bl	8004224 <_fstat_r>
 8004192:	2800      	cmp	r0, #0
 8004194:	dbed      	blt.n	8004172 <__swhatbuf_r+0x12>
 8004196:	9901      	ldr	r1, [sp, #4]
 8004198:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800419c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80041a0:	4259      	negs	r1, r3
 80041a2:	4159      	adcs	r1, r3
 80041a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a8:	e7eb      	b.n	8004182 <__swhatbuf_r+0x22>

080041aa <__smakebuf_r>:
 80041aa:	898b      	ldrh	r3, [r1, #12]
 80041ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041ae:	079d      	lsls	r5, r3, #30
 80041b0:	4606      	mov	r6, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	d507      	bpl.n	80041c6 <__smakebuf_r+0x1c>
 80041b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	2301      	movs	r3, #1
 80041c0:	6163      	str	r3, [r4, #20]
 80041c2:	b002      	add	sp, #8
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
 80041c6:	466a      	mov	r2, sp
 80041c8:	ab01      	add	r3, sp, #4
 80041ca:	f7ff ffc9 	bl	8004160 <__swhatbuf_r>
 80041ce:	9900      	ldr	r1, [sp, #0]
 80041d0:	4605      	mov	r5, r0
 80041d2:	4630      	mov	r0, r6
 80041d4:	f7ff fbb8 	bl	8003948 <_malloc_r>
 80041d8:	b948      	cbnz	r0, 80041ee <__smakebuf_r+0x44>
 80041da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041de:	059a      	lsls	r2, r3, #22
 80041e0:	d4ef      	bmi.n	80041c2 <__smakebuf_r+0x18>
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	f043 0302 	orr.w	r3, r3, #2
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	e7e3      	b.n	80041b6 <__smakebuf_r+0xc>
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	6020      	str	r0, [r4, #0]
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	9b00      	ldr	r3, [sp, #0]
 80041fa:	6120      	str	r0, [r4, #16]
 80041fc:	6163      	str	r3, [r4, #20]
 80041fe:	9b01      	ldr	r3, [sp, #4]
 8004200:	b15b      	cbz	r3, 800421a <__smakebuf_r+0x70>
 8004202:	4630      	mov	r0, r6
 8004204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004208:	f000 f81e 	bl	8004248 <_isatty_r>
 800420c:	b128      	cbz	r0, 800421a <__smakebuf_r+0x70>
 800420e:	89a3      	ldrh	r3, [r4, #12]
 8004210:	f023 0303 	bic.w	r3, r3, #3
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	81a3      	strh	r3, [r4, #12]
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	431d      	orrs	r5, r3
 800421e:	81a5      	strh	r5, [r4, #12]
 8004220:	e7cf      	b.n	80041c2 <__smakebuf_r+0x18>
	...

08004224 <_fstat_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	2300      	movs	r3, #0
 8004228:	4d06      	ldr	r5, [pc, #24]	; (8004244 <_fstat_r+0x20>)
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	f7fc fced 	bl	8000c10 <_fstat>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d102      	bne.n	8004240 <_fstat_r+0x1c>
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	b103      	cbz	r3, 8004240 <_fstat_r+0x1c>
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	20000418 	.word	0x20000418

08004248 <_isatty_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	2300      	movs	r3, #0
 800424c:	4d05      	ldr	r5, [pc, #20]	; (8004264 <_isatty_r+0x1c>)
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fceb 	bl	8000c2e <_isatty>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_isatty_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_isatty_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	20000418 	.word	0x20000418

08004268 <_sbrk_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	2300      	movs	r3, #0
 800426c:	4d05      	ldr	r5, [pc, #20]	; (8004284 <_sbrk_r+0x1c>)
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	f7fc fcf2 	bl	8000c5c <_sbrk>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_sbrk_r+0x1a>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_sbrk_r+0x1a>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	20000418 	.word	0x20000418

08004288 <memchr>:
 8004288:	4603      	mov	r3, r0
 800428a:	b510      	push	{r4, lr}
 800428c:	b2c9      	uxtb	r1, r1
 800428e:	4402      	add	r2, r0
 8004290:	4293      	cmp	r3, r2
 8004292:	4618      	mov	r0, r3
 8004294:	d101      	bne.n	800429a <memchr+0x12>
 8004296:	2000      	movs	r0, #0
 8004298:	e003      	b.n	80042a2 <memchr+0x1a>
 800429a:	7804      	ldrb	r4, [r0, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	428c      	cmp	r4, r1
 80042a0:	d1f6      	bne.n	8004290 <memchr+0x8>
 80042a2:	bd10      	pop	{r4, pc}

080042a4 <_init>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr

080042b0 <_fini>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr
