
stm32-nec-fixed-ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004200  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004384  08004384  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004384  08004384  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000006c  080043f8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080043f8  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb68  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002035  00000000  00000000  0002cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  0002ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2b  00000000  00000000  0002f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184fc  00000000  00000000  000303ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed69  00000000  00000000  000488a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089e5c  00000000  00000000  00057610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d84  00000000  00000000  000e146c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e51f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080042f4 	.word	0x080042f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080042f4 	.word	0x080042f4

0800014c <__io_putchar>:
#include "ir_nec.h"

static TIM_HandleTypeDef *used_timer = &htim2;

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f003 f809 	bl	8003174 <HAL_UART_Transmit>
  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000254 	.word	0x20000254

08000170 <irInit>:
	.state = NEC_INIT
};


void irInit(IR_Format set_state)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	switch(set_state)
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b02      	cmp	r3, #2
 800017e:	d02e      	beq.n	80001de <irInit+0x6e>
 8000180:	2b02      	cmp	r3, #2
 8000182:	dc2d      	bgt.n	80001e0 <irInit+0x70>
 8000184:	2b00      	cmp	r3, #0
 8000186:	d002      	beq.n	800018e <irInit+0x1e>
 8000188:	2b01      	cmp	r3, #1
 800018a:	d013      	beq.n	80001b4 <irInit+0x44>
//			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, (uint32_t*)nec.repeatCheckL, 2);
//			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, (uint32_t*)nec.repeatCheckH, 2);

			break;
	}
}
 800018c:	e028      	b.n	80001e0 <irInit+0x70>
			uint32_t* p_check_header_low = (uint32_t*)&nec.startL;
 800018e:	4b16      	ldr	r3, [pc, #88]	; (80001e8 <irInit+0x78>)
 8000190:	60fb      	str	r3, [r7, #12]
			uint32_t* p_check_header_high = (uint32_t*)&nec.startH;
 8000192:	4b16      	ldr	r3, [pc, #88]	; (80001ec <irInit+0x7c>)
 8000194:	60bb      	str	r3, [r7, #8]
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, p_check_header_high, 1);
 8000196:	4b16      	ldr	r3, [pc, #88]	; (80001f0 <irInit+0x80>)
 8000198:	6818      	ldr	r0, [r3, #0]
 800019a:	2301      	movs	r3, #1
 800019c:	68ba      	ldr	r2, [r7, #8]
 800019e:	2100      	movs	r1, #0
 80001a0:	f002 f886 	bl	80022b0 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, p_check_header_low, 1);
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <irInit+0x80>)
 80001a6:	6818      	ldr	r0, [r3, #0]
 80001a8:	2301      	movs	r3, #1
 80001aa:	68fa      	ldr	r2, [r7, #12]
 80001ac:	2104      	movs	r1, #4
 80001ae:	f002 f87f 	bl	80022b0 <HAL_TIM_IC_Start_DMA>
		break;
 80001b2:	e015      	b.n	80001e0 <irInit+0x70>
			hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <irInit+0x84>)
 80001b6:	2220      	movs	r2, #32
 80001b8:	619a      	str	r2, [r3, #24]
			hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80001ba:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <irInit+0x88>)
 80001bc:	2220      	movs	r2, #32
 80001be:	619a      	str	r2, [r3, #24]
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, (uint32_t*)nec.edge_falling, MAX_NEC_PACKET_CNT);
 80001c0:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <irInit+0x80>)
 80001c2:	6818      	ldr	r0, [r3, #0]
 80001c4:	2321      	movs	r3, #33	; 0x21
 80001c6:	4a0d      	ldr	r2, [pc, #52]	; (80001fc <irInit+0x8c>)
 80001c8:	2100      	movs	r1, #0
 80001ca:	f002 f871 	bl	80022b0 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, (uint32_t*)nec.edge_rising, MAX_NEC_PACKET_CNT);
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <irInit+0x80>)
 80001d0:	6818      	ldr	r0, [r3, #0]
 80001d2:	2321      	movs	r3, #33	; 0x21
 80001d4:	4a0a      	ldr	r2, [pc, #40]	; (8000200 <irInit+0x90>)
 80001d6:	2104      	movs	r1, #4
 80001d8:	f002 f86a 	bl	80022b0 <HAL_TIM_IC_Start_DMA>
		break;
 80001dc:	e000      	b.n	80001e0 <irInit+0x70>
			break;
 80001de:	bf00      	nop
}
 80001e0:	bf00      	nop
 80001e2:	3710      	adds	r7, #16
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	2000008a 	.word	0x2000008a
 80001f0:	20000000 	.word	0x20000000
 80001f4:	200001cc 	.word	0x200001cc
 80001f8:	20000210 	.word	0x20000210
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	200000ce 	.word	0x200000ce

08000204 <irReset>:


void irReset()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Stop_DMA(used_timer, TIM_CHANNEL_1);
 8000208:	4b29      	ldr	r3, [pc, #164]	; (80002b0 <irReset+0xac>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 f9d6 	bl	80025c0 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(used_timer, TIM_CHANNEL_2);
 8000214:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <irReset+0xac>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2104      	movs	r1, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f9d0 	bl	80025c0 <HAL_TIM_IC_Stop_DMA>
	nec.state = NEC_INIT;
 8000220:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <irReset+0xb0>)
 8000222:	2200      	movs	r2, #0
 8000224:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
	nec.taskFlag = false;
 8000228:	4b22      	ldr	r3, [pc, #136]	; (80002b4 <irReset+0xb0>)
 800022a:	2200      	movs	r2, #0
 800022c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	nec.cap_cnt = 0;
 8000230:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <irReset+0xb0>)
 8000232:	2200      	movs	r2, #0
 8000234:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	nec.startL = 0;
 8000238:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <irReset+0xb0>)
 800023a:	2200      	movs	r2, #0
 800023c:	801a      	strh	r2, [r3, #0]
	nec.startH = 0;
 800023e:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <irReset+0xb0>)
 8000240:	2200      	movs	r2, #0
 8000242:	805a      	strh	r2, [r3, #2]
	nec.isInit = false;
 8000244:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <irReset+0xb0>)
 8000246:	2200      	movs	r2, #0
 8000248:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	memset(nec.repeatCheckH, 0, sizeof(uint16_t) * 2);
 800024c:	2204      	movs	r2, #4
 800024e:	2100      	movs	r1, #0
 8000250:	4819      	ldr	r0, [pc, #100]	; (80002b8 <irReset+0xb4>)
 8000252:	f003 fa26 	bl	80036a2 <memset>
	memset(nec.repeatCheckL, 0, sizeof(uint16_t) * 2);
 8000256:	2204      	movs	r2, #4
 8000258:	2100      	movs	r1, #0
 800025a:	4818      	ldr	r0, [pc, #96]	; (80002bc <irReset+0xb8>)
 800025c:	f003 fa21 	bl	80036a2 <memset>
	memset(nec.edge_rising, 0, sizeof(uint16_t) * MAX_NEC_PACKET_CNT);
 8000260:	2242      	movs	r2, #66	; 0x42
 8000262:	2100      	movs	r1, #0
 8000264:	4816      	ldr	r0, [pc, #88]	; (80002c0 <irReset+0xbc>)
 8000266:	f003 fa1c 	bl	80036a2 <memset>
	memset(nec.edge_falling, 0, sizeof(uint16_t) * MAX_NEC_PACKET_CNT);
 800026a:	2242      	movs	r2, #66	; 0x42
 800026c:	2100      	movs	r1, #0
 800026e:	4815      	ldr	r0, [pc, #84]	; (80002c4 <irReset+0xc0>)
 8000270:	f003 fa17 	bl	80036a2 <memset>
	memset(nec.raw_capture, 0, sizeof(uint16_t) * MAX_NEC_PACKET_CNT);
 8000274:	2242      	movs	r2, #66	; 0x42
 8000276:	2100      	movs	r1, #0
 8000278:	4813      	ldr	r0, [pc, #76]	; (80002c8 <irReset+0xc4>)
 800027a:	f003 fa12 	bl	80036a2 <memset>
	memset(nec.data, 0, MAX_NEC_PACKET_CNT-1);
 800027e:	2220      	movs	r2, #32
 8000280:	2100      	movs	r1, #0
 8000282:	4812      	ldr	r0, [pc, #72]	; (80002cc <irReset+0xc8>)
 8000284:	f003 fa0d 	bl	80036a2 <memset>
	memset(nec.decoded, 0, 4);
 8000288:	2204      	movs	r2, #4
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <irReset+0xcc>)
 800028e:	f003 fa08 	bl	80036a2 <memset>
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <irReset+0xd0>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <irReset+0xd4>)
 800029a:	2200      	movs	r2, #0
 800029c:	619a      	str	r2, [r3, #24]

	irInit(NEC_INIT);
 800029e:	2000      	movs	r0, #0
 80002a0:	f7ff ff66 	bl	8000170 <irInit>
	nec.isInit = true;
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <irReset+0xb0>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000088 	.word	0x20000088
 80002b8:	2000017c 	.word	0x2000017c
 80002bc:	20000178 	.word	0x20000178
 80002c0:	200000ce 	.word	0x200000ce
 80002c4:	2000008c 	.word	0x2000008c
 80002c8:	20000110 	.word	0x20000110
 80002cc:	20000152 	.word	0x20000152
 80002d0:	20000172 	.word	0x20000172
 80002d4:	200001cc 	.word	0x200001cc
 80002d8:	20000210 	.word	0x20000210

080002dc <irStart>:

void irStart()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if (used_timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <irStart+0x94>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	7f1b      	ldrb	r3, [r3, #28]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d136      	bne.n	8000358 <irStart+0x7c>
	{
		if (nec.startL)
 80002ea:	4b22      	ldr	r3, [pc, #136]	; (8000374 <irStart+0x98>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d01f      	beq.n	8000332 <irStart+0x56>
		{
			if (nec.startH > 4300 && nec.startH < 4700 && nec.startL > 8800 && nec.startL < 9200)
 80002f2:	4b20      	ldr	r3, [pc, #128]	; (8000374 <irStart+0x98>)
 80002f4:	885b      	ldrh	r3, [r3, #2]
 80002f6:	f241 02cc 	movw	r2, #4300	; 0x10cc
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d927      	bls.n	800034e <irStart+0x72>
 80002fe:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <irStart+0x98>)
 8000300:	885b      	ldrh	r3, [r3, #2]
 8000302:	f241 225b 	movw	r2, #4699	; 0x125b
 8000306:	4293      	cmp	r3, r2
 8000308:	d821      	bhi.n	800034e <irStart+0x72>
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <irStart+0x98>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	f242 2260 	movw	r2, #8800	; 0x2260
 8000312:	4293      	cmp	r3, r2
 8000314:	d91b      	bls.n	800034e <irStart+0x72>
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <irStart+0x98>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	f242 32ef 	movw	r2, #9199	; 0x23ef
 800031e:	4293      	cmp	r3, r2
 8000320:	d815      	bhi.n	800034e <irStart+0x72>
			{
				nec.state = NEC_FORMAT;
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <irStart+0x98>)
 8000324:	2201      	movs	r2, #1
 8000326:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
				irInit(NEC_FORMAT);
 800032a:	2001      	movs	r0, #1
 800032c:	f7ff ff20 	bl	8000170 <irInit>
 8000330:	e00d      	b.n	800034e <irStart+0x72>
			}
		}
		else
		{
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_1, (uint32_t*)&nec.startH, 1);
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <irStart+0x94>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	2301      	movs	r3, #1
 8000338:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <irStart+0x9c>)
 800033a:	2100      	movs	r1, #0
 800033c:	f001 ffb8 	bl	80022b0 <HAL_TIM_IC_Start_DMA>
			HAL_TIM_IC_Start_DMA(used_timer, TIM_CHANNEL_2, (uint32_t*)&nec.startL, 1);
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <irStart+0x94>)
 8000342:	6818      	ldr	r0, [r3, #0]
 8000344:	2301      	movs	r3, #1
 8000346:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <irStart+0x98>)
 8000348:	2104      	movs	r1, #4
 800034a:	f001 ffb1 	bl	80022b0 <HAL_TIM_IC_Start_DMA>
		}
		TIM2->CNT = 0;
 800034e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	; 0x24
	{
		TIM2->CNT = 0;
	}


}
 8000356:	e008      	b.n	800036a <irStart+0x8e>
	else if (used_timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <irStart+0x94>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	7f1b      	ldrb	r3, [r3, #28]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d103      	bne.n	800036a <irStart+0x8e>
		TIM2->CNT = 0;
 8000362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	; 0x24
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000000 	.word	0x20000000
 8000374:	20000088 	.word	0x20000088
 8000378:	2000008a 	.word	0x2000008a

0800037c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a0b      	ldr	r2, [pc, #44]	; (80003b4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d10f      	bne.n	80003ac <HAL_TIM_IC_CaptureCallback+0x30>
	{
		switch (nec.state)
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800038e:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8000392:	2b00      	cmp	r3, #0
 8000394:	d002      	beq.n	800039c <HAL_TIM_IC_CaptureCallback+0x20>
 8000396:	2b01      	cmp	r3, #1
 8000398:	d003      	beq.n	80003a2 <HAL_TIM_IC_CaptureCallback+0x26>
			case NEC_FORMAT :
				nec.taskFlag = true;
			break;
		}
	}
}
 800039a:	e007      	b.n	80003ac <HAL_TIM_IC_CaptureCallback+0x30>
				irStart();
 800039c:	f7ff ff9e 	bl	80002dc <irStart>
			break;
 80003a0:	e004      	b.n	80003ac <HAL_TIM_IC_CaptureCallback+0x30>
				nec.taskFlag = true;
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			break;
 80003aa:	bf00      	nop
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000184 	.word	0x20000184
 80003b8:	20000088 	.word	0x20000088

080003bc <irGetData>:
void irGetData()
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
	volatile uint8_t i = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	71fb      	strb	r3, [r7, #7]

	for (nec.cap_cnt=0; nec.cap_cnt < MAX_NEC_PACKET_CNT; nec.cap_cnt++)
 80003c6:	4b60      	ldr	r3, [pc, #384]	; (8000548 <irGetData+0x18c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80003ce:	e0ad      	b.n	800052c <irGetData+0x170>
	{
		if (nec.edge_rising[nec.cap_cnt] < nec.edge_falling[nec.cap_cnt])
 80003d0:	4b5d      	ldr	r3, [pc, #372]	; (8000548 <irGetData+0x18c>)
 80003d2:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4a5b      	ldr	r2, [pc, #364]	; (8000548 <irGetData+0x18c>)
 80003da:	3320      	adds	r3, #32
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	4413      	add	r3, r2
 80003e0:	88da      	ldrh	r2, [r3, #6]
 80003e2:	4b59      	ldr	r3, [pc, #356]	; (8000548 <irGetData+0x18c>)
 80003e4:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4957      	ldr	r1, [pc, #348]	; (8000548 <irGetData+0x18c>)
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	440b      	add	r3, r1
 80003f0:	889b      	ldrh	r3, [r3, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d21d      	bcs.n	8000432 <irGetData+0x76>
		{
			nec.raw_capture[nec.cap_cnt] = nec.edge_falling[nec.cap_cnt] - nec.edge_rising[nec.cap_cnt];
 80003f6:	4b54      	ldr	r3, [pc, #336]	; (8000548 <irGetData+0x18c>)
 80003f8:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	4a52      	ldr	r2, [pc, #328]	; (8000548 <irGetData+0x18c>)
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	4413      	add	r3, r2
 8000404:	889a      	ldrh	r2, [r3, #4]
 8000406:	4b50      	ldr	r3, [pc, #320]	; (8000548 <irGetData+0x18c>)
 8000408:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800040c:	b2db      	uxtb	r3, r3
 800040e:	494e      	ldr	r1, [pc, #312]	; (8000548 <irGetData+0x18c>)
 8000410:	3320      	adds	r3, #32
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	440b      	add	r3, r1
 8000416:	88db      	ldrh	r3, [r3, #6]
 8000418:	494b      	ldr	r1, [pc, #300]	; (8000548 <irGetData+0x18c>)
 800041a:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
 800041e:	b2c9      	uxtb	r1, r1
 8000420:	4608      	mov	r0, r1
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	b299      	uxth	r1, r3
 8000426:	4a48      	ldr	r2, [pc, #288]	; (8000548 <irGetData+0x18c>)
 8000428:	f100 0344 	add.w	r3, r0, #68	; 0x44
 800042c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000430:	e02f      	b.n	8000492 <irGetData+0xd6>
		}
		else if (nec.edge_rising[nec.cap_cnt] > nec.edge_falling[nec.cap_cnt])
 8000432:	4b45      	ldr	r3, [pc, #276]	; (8000548 <irGetData+0x18c>)
 8000434:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4a43      	ldr	r2, [pc, #268]	; (8000548 <irGetData+0x18c>)
 800043c:	3320      	adds	r3, #32
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	88da      	ldrh	r2, [r3, #6]
 8000444:	4b40      	ldr	r3, [pc, #256]	; (8000548 <irGetData+0x18c>)
 8000446:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800044a:	b2db      	uxtb	r3, r3
 800044c:	493e      	ldr	r1, [pc, #248]	; (8000548 <irGetData+0x18c>)
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	440b      	add	r3, r1
 8000452:	889b      	ldrh	r3, [r3, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	d91c      	bls.n	8000492 <irGetData+0xd6>
		{
			nec.raw_capture[nec.cap_cnt] = nec.edge_rising[nec.cap_cnt] - nec.edge_falling[nec.cap_cnt];
 8000458:	4b3b      	ldr	r3, [pc, #236]	; (8000548 <irGetData+0x18c>)
 800045a:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4a39      	ldr	r2, [pc, #228]	; (8000548 <irGetData+0x18c>)
 8000462:	3320      	adds	r3, #32
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	4413      	add	r3, r2
 8000468:	88da      	ldrh	r2, [r3, #6]
 800046a:	4b37      	ldr	r3, [pc, #220]	; (8000548 <irGetData+0x18c>)
 800046c:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4935      	ldr	r1, [pc, #212]	; (8000548 <irGetData+0x18c>)
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	440b      	add	r3, r1
 8000478:	889b      	ldrh	r3, [r3, #4]
 800047a:	4933      	ldr	r1, [pc, #204]	; (8000548 <irGetData+0x18c>)
 800047c:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
 8000480:	b2c9      	uxtb	r1, r1
 8000482:	4608      	mov	r0, r1
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	b299      	uxth	r1, r3
 8000488:	4a2f      	ldr	r2, [pc, #188]	; (8000548 <irGetData+0x18c>)
 800048a:	f100 0344 	add.w	r3, r0, #68	; 0x44
 800048e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (nec.raw_capture[nec.cap_cnt] > 1550 && nec.raw_capture[nec.cap_cnt] < 1750)
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <irGetData+0x18c>)
 8000494:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4a2b      	ldr	r2, [pc, #172]	; (8000548 <irGetData+0x18c>)
 800049c:	3344      	adds	r3, #68	; 0x44
 800049e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a2:	f240 620e 	movw	r2, #1550	; 0x60e
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d914      	bls.n	80004d4 <irGetData+0x118>
 80004aa:	4b27      	ldr	r3, [pc, #156]	; (8000548 <irGetData+0x18c>)
 80004ac:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4a25      	ldr	r2, [pc, #148]	; (8000548 <irGetData+0x18c>)
 80004b4:	3344      	adds	r3, #68	; 0x44
 80004b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ba:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80004be:	4293      	cmp	r3, r2
 80004c0:	d808      	bhi.n	80004d4 <irGetData+0x118>
		{
			nec.data[i] = 1;
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <irGetData+0x18c>)
 80004ca:	4413      	add	r3, r2
 80004cc:	2201      	movs	r2, #1
 80004ce:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 80004d2:	e01d      	b.n	8000510 <irGetData+0x154>
		}
		else if (nec.raw_capture[nec.cap_cnt] > 500 && nec.raw_capture[nec.cap_cnt] < 600)
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <irGetData+0x18c>)
 80004d6:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <irGetData+0x18c>)
 80004de:	3344      	adds	r3, #68	; 0x44
 80004e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004e8:	d912      	bls.n	8000510 <irGetData+0x154>
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <irGetData+0x18c>)
 80004ec:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4a15      	ldr	r2, [pc, #84]	; (8000548 <irGetData+0x18c>)
 80004f4:	3344      	adds	r3, #68	; 0x44
 80004f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80004fe:	d207      	bcs.n	8000510 <irGetData+0x154>
		{
			nec.data[i] = 0;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	461a      	mov	r2, r3
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <irGetData+0x18c>)
 8000508:	4413      	add	r3, r2
 800050a:	2200      	movs	r2, #0
 800050c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		}
		i++;
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	3301      	adds	r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	71fb      	strb	r3, [r7, #7]
	for (nec.cap_cnt=0; nec.cap_cnt < MAX_NEC_PACKET_CNT; nec.cap_cnt++)
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <irGetData+0x18c>)
 800051c:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000520:	b2db      	uxtb	r3, r3
 8000522:	3301      	adds	r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <irGetData+0x18c>)
 8000528:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <irGetData+0x18c>)
 800052e:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b20      	cmp	r3, #32
 8000536:	f67f af4b 	bls.w	80003d0 <irGetData+0x14>
	}

}
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000088 	.word	0x20000088

0800054c <irDataDecode>:


void irDataDecode()
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	volatile int8_t i = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71bb      	strb	r3, [r7, #6]
	volatile int8_t j = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	717b      	strb	r3, [r7, #5]

	bool decodeEnd = false;
 800055a:	2300      	movs	r3, #0
 800055c:	71fb      	strb	r3, [r7, #7]

	while(!decodeEnd)
 800055e:	e05d      	b.n	800061c <irDataDecode+0xd0>
	{
		if ((nec.decoded[0] == ~(nec.decoded[1])) && (nec.decoded[2] == ~(nec.decoded[3])))
 8000560:	4b34      	ldr	r3, [pc, #208]	; (8000634 <irDataDecode+0xe8>)
 8000562:	f993 30ea 	ldrsb.w	r3, [r3, #234]	; 0xea
 8000566:	461a      	mov	r2, r3
 8000568:	4b32      	ldr	r3, [pc, #200]	; (8000634 <irDataDecode+0xe8>)
 800056a:	f993 30eb 	ldrsb.w	r3, [r3, #235]	; 0xeb
 800056e:	43db      	mvns	r3, r3
 8000570:	429a      	cmp	r2, r3
 8000572:	d10c      	bne.n	800058e <irDataDecode+0x42>
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <irDataDecode+0xe8>)
 8000576:	f993 30ec 	ldrsb.w	r3, [r3, #236]	; 0xec
 800057a:	461a      	mov	r2, r3
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <irDataDecode+0xe8>)
 800057e:	f993 30ed 	ldrsb.w	r3, [r3, #237]	; 0xed
 8000582:	43db      	mvns	r3, r3
 8000584:	429a      	cmp	r2, r3
 8000586:	d102      	bne.n	800058e <irDataDecode+0x42>
		{
			decodeEnd = true;
 8000588:	2301      	movs	r3, #1
 800058a:	71fb      	strb	r3, [r7, #7]
			break;
 800058c:	e04d      	b.n	800062a <irDataDecode+0xde>
		}

		for (j=0; j<4; j++)
 800058e:	2300      	movs	r3, #0
 8000590:	717b      	strb	r3, [r7, #5]
 8000592:	e03f      	b.n	8000614 <irDataDecode+0xc8>
		{
			for (i=8*j; i<(8*j+8); i++)
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	b25b      	sxtb	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	71bb      	strb	r3, [r7, #6]
 80005a2:	e027      	b.n	80005f4 <irDataDecode+0xa8>
			{
				nec.decoded[j] += (nec.data[i] << (8*j+7-i));
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <irDataDecode+0xe8>)
 80005ac:	4413      	add	r3, r2
 80005ae:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80005b2:	461a      	mov	r2, r3
 80005b4:	797b      	ldrb	r3, [r7, #5]
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	3307      	adds	r3, #7
 80005bc:	79b9      	ldrb	r1, [r7, #6]
 80005be:	b249      	sxtb	r1, r1
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	fa02 f003 	lsl.w	r0, r2, r3
 80005c6:	797b      	ldrb	r3, [r7, #5]
 80005c8:	b259      	sxtb	r1, r3
 80005ca:	460a      	mov	r2, r1
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <irDataDecode+0xe8>)
 80005ce:	4413      	add	r3, r2
 80005d0:	f993 30ea 	ldrsb.w	r3, [r3, #234]	; 0xea
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	b2c3      	uxtb	r3, r0
 80005d8:	4413      	add	r3, r2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <irDataDecode+0xe8>)
 80005e0:	440b      	add	r3, r1
 80005e2:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
			for (i=8*j; i<(8*j+8); i++)
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	71bb      	strb	r3, [r7, #6]
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	3301      	adds	r3, #1
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	429a      	cmp	r2, r3
 8000604:	dbce      	blt.n	80005a4 <irDataDecode+0x58>
		for (j=0; j<4; j++)
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	b25b      	sxtb	r3, r3
 8000612:	717b      	strb	r3, [r7, #5]
 8000614:	797b      	ldrb	r3, [r7, #5]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	2b03      	cmp	r3, #3
 800061a:	ddbb      	ble.n	8000594 <irDataDecode+0x48>
	while(!decodeEnd)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f083 0301 	eor.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d19b      	bne.n	8000560 <irDataDecode+0x14>
			}
		}
	}
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	20000088 	.word	0x20000088

08000638 <irShowDecoded>:

void irShowDecoded()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	for (uint8_t txIdx=0; txIdx < 4; txIdx++)
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e00d      	b.n	8000660 <irShowDecoded+0x28>
	{
		printf("decoded[%d] : 0x%x\r\n", txIdx, (uint8_t)nec.decoded[txIdx]);
 8000644:	79f9      	ldrb	r1, [r7, #7]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <irShowDecoded+0x38>)
 800064a:	4413      	add	r3, r2
 800064c:	f993 30ea 	ldrsb.w	r3, [r3, #234]	; 0xea
 8000650:	b2db      	uxtb	r3, r3
 8000652:	461a      	mov	r2, r3
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <irShowDecoded+0x3c>)
 8000656:	f002 ffcf 	bl	80035f8 <iprintf>
	for (uint8_t txIdx=0; txIdx < 4; txIdx++)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	3301      	adds	r3, #1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d9ee      	bls.n	8000644 <irShowDecoded+0xc>
	}

}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000088 	.word	0x20000088
 8000674:	0800430c 	.word	0x0800430c

08000678 <irTask>:

void irTask()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	// Task Lock : only go into isInit == false

	if (nec.taskFlag && nec.isInit)
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <irTask+0x3c>)
 800067e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8000682:	2b00      	cmp	r3, #0
 8000684:	d011      	beq.n	80006aa <irTask+0x32>
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <irTask+0x3c>)
 8000688:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <irTask+0x32>
	{
		irGetData();
 8000690:	f7ff fe94 	bl	80003bc <irGetData>
		irDataDecode();
 8000694:	f7ff ff5a 	bl	800054c <irDataDecode>
//		irInit(NEC_REPEAT);
//		HAL_UART_Receive_DMA(&huart2, rxBuf, 1);
		irShowDecoded();
 8000698:	f7ff ffce 	bl	8000638 <irShowDecoded>
		nec.isInit = false;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <irTask+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
		irReset();
 80006a4:	f7ff fdae 	bl	8000204 <irReset>
 80006a8:	e002      	b.n	80006b0 <irTask+0x38>
	}
	else
	{
		irReset();
 80006aa:	f7ff fdab 	bl	8000204 <irReset>
	}
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000088 	.word	0x20000088

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fbd6 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f814 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f92e 	bl	8000924 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f000 f8fe 	bl	80008c8 <MX_DMA_Init>
  MX_TIM2_Init();
 80006cc:	f000 f854 	bl	8000778 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006d0:	f000 f8d0 	bl	8000874 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  irInit(NEC_INIT);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fd4b 	bl	8000170 <irInit>
  nec.isInit = true;
 80006da:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <main+0x30>)
 80006dc:	2201      	movs	r2, #1
 80006de:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	irTask();
 80006e2:	f7ff ffc9 	bl	8000678 <irTask>
 80006e6:	e7fc      	b.n	80006e2 <main+0x2a>
 80006e8:	20000088 	.word	0x20000088

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b090      	sub	sp, #64	; 0x40
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 ffd1 	bl	80036a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800072a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0318 	add.w	r3, r7, #24
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f903 	bl	8001940 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000740:	f000 f93c 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2101      	movs	r1, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fb70 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800076a:	f000 f927 	bl	80009bc <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3740      	adds	r7, #64	; 0x40
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007ac:	222f      	movs	r2, #47	; 0x2f
 80007ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ca:	4829      	ldr	r0, [pc, #164]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007cc:	f001 fcc8 	bl	8002160 <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007d6:	f000 f8f1 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	4619      	mov	r1, r3
 80007e6:	4822      	ldr	r0, [pc, #136]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007e8:	f002 f848 	bl	800287c <HAL_TIM_ConfigClockSource>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007f2:	f000 f8e3 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007f6:	481e      	ldr	r0, [pc, #120]	; (8000870 <MX_TIM2_Init+0xf8>)
 80007f8:	f001 fd01 	bl	80021fe <HAL_TIM_IC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000802:	f000 f8db 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <MX_TIM2_Init+0xf8>)
 8000816:	f002 fc05 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000820:	f000 f8cc 	bl	80009bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000824:	2302      	movs	r3, #2
 8000826:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_TIM2_Init+0xf8>)
 800083c:	f001 ff82 	bl	8002744 <HAL_TIM_IC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000846:	f000 f8b9 	bl	80009bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800084e:	2302      	movs	r3, #2
 8000850:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	2204      	movs	r2, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM2_Init+0xf8>)
 800085a:	f001 ff73 	bl	8002744 <HAL_TIM_IC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000864:	f000 f8aa 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000184 	.word	0x20000184

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART2_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008ac:	f002 fc12 	bl	80030d4 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f881 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000254 	.word	0x20000254
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_DMA_Init+0x58>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <MX_DMA_Init+0x58>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_DMA_Init+0x58>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	200f      	movs	r0, #15
 80008ec:	f000 fbf7 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008f0:	200f      	movs	r0, #15
 80008f2:	f000 fc10 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	2010      	movs	r0, #16
 80008fc:	f000 fbef 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000900:	2010      	movs	r0, #16
 8000902:	f000 fc08 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2011      	movs	r0, #17
 800090c:	f000 fbe7 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000910:	2011      	movs	r0, #17
 8000912:	f000 fc00 	bl	8001116 <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_GPIO_Init+0x90>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <MX_GPIO_Init+0x90>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_GPIO_Init+0x90>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_GPIO_Init+0x90>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <MX_GPIO_Init+0x90>)
 8000956:	f043 0320 	orr.w	r3, r3, #32
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_GPIO_Init+0x90>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0320 	and.w	r3, r3, #32
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_GPIO_Init+0x90>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <MX_GPIO_Init+0x90>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x90>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_GPIO_Init+0x94>)
 8000988:	f000 ffc2 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_GPIO_Init+0x94>)
 80009a6:	f000 fe37 	bl	8001618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40011000 	.word	0x40011000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_MspInit+0x5c>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <HAL_MspInit+0x5c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_MspInit+0x5c>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x5c>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_MspInit+0x5c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x5c>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_MspInit+0x60>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_MspInit+0x60>)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010000 	.word	0x40010000

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4a:	d179      	bne.n	8000b40 <HAL_TIM_Base_MspInit+0x114>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <HAL_TIM_Base_MspInit+0x11c>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	4a3d      	ldr	r2, [pc, #244]	; (8000b48 <HAL_TIM_Base_MspInit+0x11c>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	61d3      	str	r3, [r2, #28]
 8000a58:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <HAL_TIM_Base_MspInit+0x11c>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <HAL_TIM_Base_MspInit+0x11c>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a37      	ldr	r2, [pc, #220]	; (8000b48 <HAL_TIM_Base_MspInit+0x11c>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <HAL_TIM_Base_MspInit+0x11c>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	482f      	ldr	r0, [pc, #188]	; (8000b4c <HAL_TIM_Base_MspInit+0x120>)
 8000a90:	f000 fdc2 	bl	8001618 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000a94:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <HAL_TIM_Base_MspInit+0x128>)
 8000a98:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000ac8:	4821      	ldr	r0, [pc, #132]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000aca:	f000 fb3f 	bl	800114c <HAL_DMA_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_TIM_Base_MspInit+0xac>
    {
      Error_Handler();
 8000ad4:	f7ff ff72 	bl	80009bc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <HAL_TIM_Base_MspInit+0x124>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_TIM_Base_MspInit+0x130>)
 8000ae8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b1a:	f000 fb17 	bl	800114c <HAL_DMA_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_TIM_Base_MspInit+0xfc>
    {
      Error_Handler();
 8000b24:	f7ff ff4a 	bl	80009bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b38:	631a      	str	r2, [r3, #48]	; 0x30
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_TIM_Base_MspInit+0x12c>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	200001cc 	.word	0x200001cc
 8000b54:	40020058 	.word	0x40020058
 8000b58:	20000210 	.word	0x20000210
 8000b5c:	40020080 	.word	0x40020080

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a2e      	ldr	r2, [pc, #184]	; (8000c34 <HAL_UART_MspInit+0xd4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d155      	bne.n	8000c2c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_UART_MspInit+0xd8>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	4a2c      	ldr	r2, [pc, #176]	; (8000c38 <HAL_UART_MspInit+0xd8>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8a:	61d3      	str	r3, [r2, #28]
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_UART_MspInit+0xd8>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_UART_MspInit+0xd8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <HAL_UART_MspInit+0xd8>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <HAL_UART_MspInit+0xd8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481e      	ldr	r0, [pc, #120]	; (8000c3c <HAL_UART_MspInit+0xdc>)
 8000bc4:	f000 fd28 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4818      	ldr	r0, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0xdc>)
 8000bdc:	f000 fd1c 	bl	8001618 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_UART_MspInit+0xe4>)
 8000be4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000c06:	2220      	movs	r2, #32
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000c12:	f000 fa9b 	bl	800114c <HAL_DMA_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000c1c:	f7ff fece 	bl	80009bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c26:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_UART_MspInit+0xe0>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	2000029c 	.word	0x2000029c
 8000c44:	4002006c 	.word	0x4002006c

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f933 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <DMA1_Channel5_IRQHandler+0x10>)
 8000c9e:	f000 fb87 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001cc 	.word	0x200001cc

08000cac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <DMA1_Channel6_IRQHandler+0x10>)
 8000cb2:	f000 fb7d 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000029c 	.word	0x2000029c

08000cc0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA1_Channel7_IRQHandler+0x10>)
 8000cc6:	f000 fb73 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000210 	.word	0x20000210

08000cd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e00a      	b.n	8000cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce6:	f3af 8000 	nop.w
 8000cea:	4601      	mov	r1, r0
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60ba      	str	r2, [r7, #8]
 8000cf2:	b2ca      	uxtb	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf0      	blt.n	8000ce6 <_read+0x12>
  }

  return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e009      	b.n	8000d34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	60ba      	str	r2, [r7, #8]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa0f 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf1      	blt.n	8000d20 <_write+0x12>
  }
  return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_close>:

int _close(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f002 fcb2 	bl	8003740 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20002800 	.word	0x20002800
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200002e0 	.word	0x200002e0
 8000e10:	20000438 	.word	0x20000438

08000e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff fff8 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e26:	490c      	ldr	r1, [pc, #48]	; (8000e58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e28:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e3c:	4c09      	ldr	r4, [pc, #36]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f002 fc7f 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff fc33 	bl	80006b8 <main>
  bx lr
 8000e52:	4770      	bx	lr
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e5c:	0800438c 	.word	0x0800438c
  ldr r2, =_sbss
 8000e60:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e64:	20000434 	.word	0x20000434

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x28>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f923 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fd9e 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f93b 	bl	8001132 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f903 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x20>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_IncTick+0x20>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	200002e4 	.word	0x200002e4

08000f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	200002e4 	.word	0x200002e4

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4906      	ldr	r1, [pc, #24]	; (8000fc8 <__NVIC_EnableIRQ+0x34>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff90 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff2d 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff42 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff90 	bl	8001020 <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5f 	bl	8000fcc <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff35 	bl	8000f94 <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e043      	b.n	80011ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_DMA_Init+0xa8>)
 800116a:	4413      	add	r3, r2
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_DMA_Init+0xac>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	009a      	lsls	r2, r3, #2
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <HAL_DMA_Init+0xb0>)
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001196:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800119a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	bffdfff8 	.word	0xbffdfff8
 80011f8:	cccccccd 	.word	0xcccccccd
 80011fc:	40020000 	.word	0x40020000

08001200 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_DMA_Start_IT+0x20>
 800121c:	2302      	movs	r3, #2
 800121e:	e04b      	b.n	80012b8 <HAL_DMA_Start_IT+0xb8>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d13a      	bne.n	80012aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f000 f9af 	bl	80015bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	2b00      	cmp	r3, #0
 8001264:	d008      	beq.n	8001278 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 020e 	orr.w	r2, r2, #14
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e00f      	b.n	8001298 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0204 	bic.w	r2, r2, #4
 8001286:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 020a 	orr.w	r2, r2, #10
 8001296:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e005      	b.n	80012b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012b2:	2302      	movs	r3, #2
 80012b4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d005      	beq.n	80012e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2204      	movs	r2, #4
 80012dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e051      	b.n	8001388 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 020e 	bic.w	r2, r2, #14
 80012f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a22      	ldr	r2, [pc, #136]	; (8001394 <HAL_DMA_Abort_IT+0xd4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d029      	beq.n	8001362 <HAL_DMA_Abort_IT+0xa2>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_DMA_Abort_IT+0xd8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d022      	beq.n	800135e <HAL_DMA_Abort_IT+0x9e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_DMA_Abort_IT+0xdc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01a      	beq.n	8001358 <HAL_DMA_Abort_IT+0x98>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <HAL_DMA_Abort_IT+0xe0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d012      	beq.n	8001352 <HAL_DMA_Abort_IT+0x92>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <HAL_DMA_Abort_IT+0xe4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00a      	beq.n	800134c <HAL_DMA_Abort_IT+0x8c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_DMA_Abort_IT+0xe8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d102      	bne.n	8001346 <HAL_DMA_Abort_IT+0x86>
 8001340:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001344:	e00e      	b.n	8001364 <HAL_DMA_Abort_IT+0xa4>
 8001346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800134a:	e00b      	b.n	8001364 <HAL_DMA_Abort_IT+0xa4>
 800134c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001350:	e008      	b.n	8001364 <HAL_DMA_Abort_IT+0xa4>
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	e005      	b.n	8001364 <HAL_DMA_Abort_IT+0xa4>
 8001358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135c:	e002      	b.n	8001364 <HAL_DMA_Abort_IT+0xa4>
 800135e:	2310      	movs	r3, #16
 8001360:	e000      	b.n	8001364 <HAL_DMA_Abort_IT+0xa4>
 8001362:	2301      	movs	r3, #1
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_DMA_Abort_IT+0xec>)
 8001366:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
    } 
  }
  return status;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020008 	.word	0x40020008
 8001398:	4002001c 	.word	0x4002001c
 800139c:	40020030 	.word	0x40020030
 80013a0:	40020044 	.word	0x40020044
 80013a4:	40020058 	.word	0x40020058
 80013a8:	4002006c 	.word	0x4002006c
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2204      	movs	r2, #4
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d04f      	beq.n	8001478 <HAL_DMA_IRQHandler+0xc8>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d04a      	beq.n	8001478 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d107      	bne.n	8001400 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a66      	ldr	r2, [pc, #408]	; (80015a0 <HAL_DMA_IRQHandler+0x1f0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d029      	beq.n	800145e <HAL_DMA_IRQHandler+0xae>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <HAL_DMA_IRQHandler+0x1f4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d022      	beq.n	800145a <HAL_DMA_IRQHandler+0xaa>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_DMA_IRQHandler+0x1f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01a      	beq.n	8001454 <HAL_DMA_IRQHandler+0xa4>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a62      	ldr	r2, [pc, #392]	; (80015ac <HAL_DMA_IRQHandler+0x1fc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d012      	beq.n	800144e <HAL_DMA_IRQHandler+0x9e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a60      	ldr	r2, [pc, #384]	; (80015b0 <HAL_DMA_IRQHandler+0x200>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00a      	beq.n	8001448 <HAL_DMA_IRQHandler+0x98>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <HAL_DMA_IRQHandler+0x204>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d102      	bne.n	8001442 <HAL_DMA_IRQHandler+0x92>
 800143c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001440:	e00e      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 8001442:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001446:	e00b      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 8001448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800144c:	e008      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 800144e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001452:	e005      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 8001454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001458:	e002      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	e000      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 800145e:	2304      	movs	r3, #4
 8001460:	4a55      	ldr	r2, [pc, #340]	; (80015b8 <HAL_DMA_IRQHandler+0x208>)
 8001462:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8094 	beq.w	8001596 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001476:	e08e      	b.n	8001596 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	2202      	movs	r2, #2
 800147e:	409a      	lsls	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d056      	beq.n	8001536 <HAL_DMA_IRQHandler+0x186>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d051      	beq.n	8001536 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10b      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 020a 	bic.w	r2, r2, #10
 80014ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <HAL_DMA_IRQHandler+0x1f0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d029      	beq.n	8001516 <HAL_DMA_IRQHandler+0x166>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <HAL_DMA_IRQHandler+0x1f4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d022      	beq.n	8001512 <HAL_DMA_IRQHandler+0x162>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <HAL_DMA_IRQHandler+0x1f8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01a      	beq.n	800150c <HAL_DMA_IRQHandler+0x15c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a34      	ldr	r2, [pc, #208]	; (80015ac <HAL_DMA_IRQHandler+0x1fc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d012      	beq.n	8001506 <HAL_DMA_IRQHandler+0x156>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_DMA_IRQHandler+0x200>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00a      	beq.n	8001500 <HAL_DMA_IRQHandler+0x150>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_DMA_IRQHandler+0x204>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d102      	bne.n	80014fa <HAL_DMA_IRQHandler+0x14a>
 80014f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014f8:	e00e      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 80014fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014fe:	e00b      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001504:	e008      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	e005      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 800150c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001510:	e002      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001512:	2320      	movs	r3, #32
 8001514:	e000      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001516:	2302      	movs	r3, #2
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_DMA_IRQHandler+0x208>)
 800151a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	d034      	beq.n	8001596 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001534:	e02f      	b.n	8001596 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2208      	movs	r2, #8
 800153c:	409a      	lsls	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d028      	beq.n	8001598 <HAL_DMA_IRQHandler+0x1e8>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020e 	bic.w	r2, r2, #14
 800155e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	2101      	movs	r1, #1
 800156a:	fa01 f202 	lsl.w	r2, r1, r2
 800156e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
    }
  }
  return;
 8001596:	bf00      	nop
 8001598:	bf00      	nop
}
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40020008 	.word	0x40020008
 80015a4:	4002001c 	.word	0x4002001c
 80015a8:	40020030 	.word	0x40020030
 80015ac:	40020044 	.word	0x40020044
 80015b0:	40020058 	.word	0x40020058
 80015b4:	4002006c 	.word	0x4002006c
 80015b8:	40020000 	.word	0x40020000

080015bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d108      	bne.n	80015fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015fa:	e007      	b.n	800160c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	60da      	str	r2, [r3, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b08b      	sub	sp, #44	; 0x2c
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	e161      	b.n	80018f0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800162c:	2201      	movs	r2, #1
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8150 	bne.w	80018ea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a97      	ldr	r2, [pc, #604]	; (80018ac <HAL_GPIO_Init+0x294>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d05e      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001654:	4a95      	ldr	r2, [pc, #596]	; (80018ac <HAL_GPIO_Init+0x294>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d875      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 800165a:	4a95      	ldr	r2, [pc, #596]	; (80018b0 <HAL_GPIO_Init+0x298>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d058      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001660:	4a93      	ldr	r2, [pc, #588]	; (80018b0 <HAL_GPIO_Init+0x298>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d86f      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 8001666:	4a93      	ldr	r2, [pc, #588]	; (80018b4 <HAL_GPIO_Init+0x29c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d052      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 800166c:	4a91      	ldr	r2, [pc, #580]	; (80018b4 <HAL_GPIO_Init+0x29c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d869      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 8001672:	4a91      	ldr	r2, [pc, #580]	; (80018b8 <HAL_GPIO_Init+0x2a0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d04c      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001678:	4a8f      	ldr	r2, [pc, #572]	; (80018b8 <HAL_GPIO_Init+0x2a0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d863      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 800167e:	4a8f      	ldr	r2, [pc, #572]	; (80018bc <HAL_GPIO_Init+0x2a4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d046      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
 8001684:	4a8d      	ldr	r2, [pc, #564]	; (80018bc <HAL_GPIO_Init+0x2a4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d85d      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 800168a:	2b12      	cmp	r3, #18
 800168c:	d82a      	bhi.n	80016e4 <HAL_GPIO_Init+0xcc>
 800168e:	2b12      	cmp	r3, #18
 8001690:	d859      	bhi.n	8001746 <HAL_GPIO_Init+0x12e>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <HAL_GPIO_Init+0x80>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	08001713 	.word	0x08001713
 800169c:	080016ed 	.word	0x080016ed
 80016a0:	080016ff 	.word	0x080016ff
 80016a4:	08001741 	.word	0x08001741
 80016a8:	08001747 	.word	0x08001747
 80016ac:	08001747 	.word	0x08001747
 80016b0:	08001747 	.word	0x08001747
 80016b4:	08001747 	.word	0x08001747
 80016b8:	08001747 	.word	0x08001747
 80016bc:	08001747 	.word	0x08001747
 80016c0:	08001747 	.word	0x08001747
 80016c4:	08001747 	.word	0x08001747
 80016c8:	08001747 	.word	0x08001747
 80016cc:	08001747 	.word	0x08001747
 80016d0:	08001747 	.word	0x08001747
 80016d4:	08001747 	.word	0x08001747
 80016d8:	08001747 	.word	0x08001747
 80016dc:	080016f5 	.word	0x080016f5
 80016e0:	08001709 	.word	0x08001709
 80016e4:	4a76      	ldr	r2, [pc, #472]	; (80018c0 <HAL_GPIO_Init+0x2a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ea:	e02c      	b.n	8001746 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e029      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	3304      	adds	r3, #4
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e024      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	3308      	adds	r3, #8
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e01f      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	330c      	adds	r3, #12
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e01a      	b.n	8001748 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800171a:	2304      	movs	r3, #4
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e013      	b.n	8001748 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001728:	2308      	movs	r3, #8
 800172a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	611a      	str	r2, [r3, #16]
          break;
 8001732:	e009      	b.n	8001748 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001734:	2308      	movs	r3, #8
 8001736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	615a      	str	r2, [r3, #20]
          break;
 800173e:	e003      	b.n	8001748 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x130>
          break;
 8001746:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d801      	bhi.n	8001752 <HAL_GPIO_Init+0x13a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	e001      	b.n	8001756 <HAL_GPIO_Init+0x13e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3304      	adds	r3, #4
 8001756:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2bff      	cmp	r3, #255	; 0xff
 800175c:	d802      	bhi.n	8001764 <HAL_GPIO_Init+0x14c>
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x152>
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	3b08      	subs	r3, #8
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	210f      	movs	r1, #15
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	401a      	ands	r2, r3
 800177c:	6a39      	ldr	r1, [r7, #32]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	431a      	orrs	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a9 	beq.w	80018ea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <HAL_GPIO_Init+0x2ac>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_GPIO_Init+0x2ac>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_GPIO_Init+0x2ac>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017b0:	4a45      	ldr	r2, [pc, #276]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <HAL_GPIO_Init+0x2b4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00d      	beq.n	80017f8 <HAL_GPIO_Init+0x1e0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3c      	ldr	r2, [pc, #240]	; (80018d0 <HAL_GPIO_Init+0x2b8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <HAL_GPIO_Init+0x1dc>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <HAL_GPIO_Init+0x2bc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_GPIO_Init+0x1d8>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e004      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f0:	2303      	movs	r3, #3
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f8:	2300      	movs	r3, #0
 80017fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fc:	f002 0203 	and.w	r2, r2, #3
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	4093      	lsls	r3, r2
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800180a:	492f      	ldr	r1, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	492b      	ldr	r1, [pc, #172]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4927      	ldr	r1, [pc, #156]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 800183c:	4013      	ands	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	4921      	ldr	r1, [pc, #132]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	491d      	ldr	r1, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 8001864:	4013      	ands	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4917      	ldr	r1, [pc, #92]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	43db      	mvns	r3, r3
 800188a:	4913      	ldr	r1, [pc, #76]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 800188c:	4013      	ands	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01f      	beq.n	80018dc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	490d      	ldr	r1, [pc, #52]	; (80018d8 <HAL_GPIO_Init+0x2c0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
 80018a8:	e01f      	b.n	80018ea <HAL_GPIO_Init+0x2d2>
 80018aa:	bf00      	nop
 80018ac:	10320000 	.word	0x10320000
 80018b0:	10310000 	.word	0x10310000
 80018b4:	10220000 	.word	0x10220000
 80018b8:	10210000 	.word	0x10210000
 80018bc:	10120000 	.word	0x10120000
 80018c0:	10110000 	.word	0x10110000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40010800 	.word	0x40010800
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_GPIO_Init+0x2f4>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4909      	ldr	r1, [pc, #36]	; (800190c <HAL_GPIO_Init+0x2f4>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	3301      	adds	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f ae96 	bne.w	800162c <HAL_GPIO_Init+0x14>
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	372c      	adds	r7, #44	; 0x2c
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	611a      	str	r2, [r3, #16]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e272      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8087 	beq.w	8001a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b04      	cmp	r3, #4
 800196a:	d00c      	beq.n	8001986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196c:	4b8f      	ldr	r3, [pc, #572]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d112      	bne.n	800199e <HAL_RCC_OscConfig+0x5e>
 8001978:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d10b      	bne.n	800199e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d06c      	beq.n	8001a6c <HAL_RCC_OscConfig+0x12c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d168      	bne.n	8001a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e24c      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x76>
 80019a8:	4b80      	ldr	r3, [pc, #512]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a7f      	ldr	r2, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e02e      	b.n	8001a14 <HAL_RCC_OscConfig+0xd4>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x98>
 80019be:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b78      	ldr	r3, [pc, #480]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a77      	ldr	r2, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e01d      	b.n	8001a14 <HAL_RCC_OscConfig+0xd4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0xbc>
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a71      	ldr	r2, [pc, #452]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e00b      	b.n	8001a14 <HAL_RCC_OscConfig+0xd4>
 80019fc:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a67      	ldr	r2, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fa7e 	bl	8000f1c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fa7a 	bl	8000f1c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e200      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0xe4>
 8001a42:	e014      	b.n	8001a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fa6a 	bl	8000f1c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fa66 	bl	8000f1c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1ec      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x10c>
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d063      	beq.n	8001b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7a:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a86:	4b49      	ldr	r3, [pc, #292]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d11c      	bne.n	8001acc <HAL_RCC_OscConfig+0x18c>
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d116      	bne.n	8001acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x176>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e1c0      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4939      	ldr	r1, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	e03a      	b.n	8001b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fa1f 	bl	8000f1c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fa1b 	bl	8000f1c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1a1      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4927      	ldr	r1, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_RCC_OscConfig+0x270>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f9fe 	bl	8000f1c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff f9fa 	bl	8000f1c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e180      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d03a      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d019      	beq.n	8001b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f9de 	bl	8000f1c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff f9da 	bl	8000f1c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e160      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x26c>)
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f000 face 	bl	8002124 <RCC_Delay>
 8001b88:	e01c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff f9c4 	bl	8000f1c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b96:	e00f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff f9c0 	bl	8000f1c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d908      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e146      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	42420000 	.word	0x42420000
 8001bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1e9      	bne.n	8001b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80a6 	beq.w	8001d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10d      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a87      	ldr	r2, [pc, #540]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	61d3      	str	r3, [r2, #28]
 8001bee:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7e      	ldr	r2, [pc, #504]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff f981 	bl	8000f1c <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff f97d 	bl	8000f1c <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	; 0x64
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e103      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4c8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x312>
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a6e      	ldr	r2, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	e02d      	b.n	8001cae <HAL_RCC_OscConfig+0x36e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x334>
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6213      	str	r3, [r2, #32]
 8001c72:	e01c      	b.n	8001cae <HAL_RCC_OscConfig+0x36e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x356>
 8001c7c:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a60      	ldr	r2, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	e00b      	b.n	8001cae <HAL_RCC_OscConfig+0x36e>
 8001c96:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d015      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f931 	bl	8000f1c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff f92d 	bl	8000f1c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0b1      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ee      	beq.n	8001cbe <HAL_RCC_OscConfig+0x37e>
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f91b 	bl	8000f1c <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7ff f917 	bl	8000f1c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e09b      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d00:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ee      	bne.n	8001cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d105      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8087 	beq.w	8001e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d061      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d146      	bne.n	8001dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff f8eb 	bl	8000f1c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7ff f8e7 	bl	8000f1c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e06d      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4921      	ldr	r1, [pc, #132]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a19      	ldr	r1, [r3, #32]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	430b      	orrs	r3, r1
 8001d96:	491b      	ldr	r1, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f8bb 	bl	8000f1c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f8b7 	bl	8000f1c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e03d      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x46a>
 8001dc8:	e035      	b.n	8001e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f8a4 	bl	8000f1c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f8a0 	bl	8000f1c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e026      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x498>
 8001df6:	e01e      	b.n	8001e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e019      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x500>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0d0      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4965      	ldr	r1, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d040      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d115      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e073      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06b      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4936      	ldr	r1, [pc, #216]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7fe fff2 	bl	8000f1c <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7fe ffee 	bl	8000f1c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e053      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d210      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f821 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	490a      	ldr	r1, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1cc>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe ff50 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	08004324 	.word	0x08004324
 8002010:	20000004 	.word	0x20000004
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x30>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x36>
 8002046:	e027      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800204a:	613b      	str	r3, [r7, #16]
      break;
 800204c:	e027      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	0c5b      	lsrs	r3, r3, #17
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800207a:	fb03 f202 	mul.w	r2, r3, r2
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e004      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	613b      	str	r3, [r7, #16]
      break;
 8002096:	e002      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800209a:	613b      	str	r3, [r7, #16]
      break;
 800209c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209e:	693b      	ldr	r3, [r7, #16]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	0800433c 	.word	0x0800433c
 80020b8:	0800434c 	.word	0x0800434c
 80020bc:	003d0900 	.word	0x003d0900

080020c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d8:	f7ff fff2 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	4903      	ldr	r1, [pc, #12]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08004334 	.word	0x08004334

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002100:	f7ff ffde 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0adb      	lsrs	r3, r3, #11
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08004334 	.word	0x08004334

08002124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <RCC_Delay+0x34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <RCC_Delay+0x38>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0a5b      	lsrs	r3, r3, #9
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002140:	bf00      	nop
  }
  while (Delay --);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	60fa      	str	r2, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f9      	bne.n	8002140 <RCC_Delay+0x1c>
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	20000004 	.word	0x20000004
 800215c:	10624dd3 	.word	0x10624dd3

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e041      	b.n	80021f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fc50 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 fd26 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e041      	b.n	8002294 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f839 	bl	800229c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f000 fcd7 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_IC_Start_DMA+0x22>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e013      	b.n	80022fa <HAL_TIM_IC_Start_DMA+0x4a>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_IC_Start_DMA+0x32>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e00b      	b.n	80022fa <HAL_TIM_IC_Start_DMA+0x4a>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d104      	bne.n	80022f2 <HAL_TIM_IC_Start_DMA+0x42>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	e003      	b.n	80022fa <HAL_TIM_IC_Start_DMA+0x4a>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d104      	bne.n	800230c <HAL_TIM_IC_Start_DMA+0x5c>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e013      	b.n	8002334 <HAL_TIM_IC_Start_DMA+0x84>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d104      	bne.n	800231c <HAL_TIM_IC_Start_DMA+0x6c>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e00b      	b.n	8002334 <HAL_TIM_IC_Start_DMA+0x84>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d104      	bne.n	800232c <HAL_TIM_IC_Start_DMA+0x7c>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e003      	b.n	8002334 <HAL_TIM_IC_Start_DMA+0x84>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002332:	b2db      	uxtb	r3, r3
 8002334:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002336:	7dbb      	ldrb	r3, [r7, #22]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d002      	beq.n	8002342 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800233c:	7d7b      	ldrb	r3, [r7, #21]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d101      	bne.n	8002346 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
 8002344:	e12d      	b.n	80025a2 <HAL_TIM_IC_Start_DMA+0x2f2>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002346:	7dbb      	ldrb	r3, [r7, #22]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d143      	bne.n	80023d4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800234c:	7d7b      	ldrb	r3, [r7, #21]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d140      	bne.n	80023d4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_TIM_IC_Start_DMA+0xae>
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e11f      	b.n	80025a2 <HAL_TIM_IC_Start_DMA+0x2f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_TIM_IC_Start_DMA+0xc2>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002370:	e013      	b.n	800239a <HAL_TIM_IC_Start_DMA+0xea>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d104      	bne.n	8002382 <HAL_TIM_IC_Start_DMA+0xd2>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002380:	e00b      	b.n	800239a <HAL_TIM_IC_Start_DMA+0xea>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d104      	bne.n	8002392 <HAL_TIM_IC_Start_DMA+0xe2>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002390:	e003      	b.n	800239a <HAL_TIM_IC_Start_DMA+0xea>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2202      	movs	r2, #2
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_TIM_IC_Start_DMA+0xfa>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) || (Length == 0U))
 80023a8:	e016      	b.n	80023d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_IC_Start_DMA+0x10a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) || (Length == 0U))
 80023b8:	e00e      	b.n	80023d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d104      	bne.n	80023ca <HAL_TIM_IC_Start_DMA+0x11a>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 80023c8:	e006      	b.n	80023d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 80023d2:	e001      	b.n	80023d8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0e4      	b.n	80025a2 <HAL_TIM_IC_Start_DMA+0x2f2>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fdfa 	bl	8002fda <TIM_CCxChannelCmd>

  switch (Channel)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	f200 80ad 	bhi.w	8002548 <HAL_TIM_IC_Start_DMA+0x298>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <HAL_TIM_IC_Start_DMA+0x144>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002429 	.word	0x08002429
 80023f8:	08002549 	.word	0x08002549
 80023fc:	08002549 	.word	0x08002549
 8002400:	08002549 	.word	0x08002549
 8002404:	08002471 	.word	0x08002471
 8002408:	08002549 	.word	0x08002549
 800240c:	08002549 	.word	0x08002549
 8002410:	08002549 	.word	0x08002549
 8002414:	080024b9 	.word	0x080024b9
 8002418:	08002549 	.word	0x08002549
 800241c:	08002549 	.word	0x08002549
 8002420:	08002549 	.word	0x08002549
 8002424:	08002501 	.word	0x08002501
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	4a5f      	ldr	r2, [pc, #380]	; (80025ac <HAL_TIM_IC_Start_DMA+0x2fc>)
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	4a5e      	ldr	r2, [pc, #376]	; (80025b0 <HAL_TIM_IC_Start_DMA+0x300>)
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	4a5d      	ldr	r2, [pc, #372]	; (80025b4 <HAL_TIM_IC_Start_DMA+0x304>)
 800243e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3334      	adds	r3, #52	; 0x34
 800244a:	4619      	mov	r1, r3
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	f7fe fed6 	bl	8001200 <HAL_DMA_Start_IT>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0a1      	b.n	80025a2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	60da      	str	r2, [r3, #12]
      break;
 800246e:	e06e      	b.n	800254e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	4a4d      	ldr	r2, [pc, #308]	; (80025ac <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_TIM_IC_Start_DMA+0x300>)
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_TIM_IC_Start_DMA+0x304>)
 8002486:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3338      	adds	r3, #56	; 0x38
 8002492:	4619      	mov	r1, r3
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	f7fe feb2 	bl	8001200 <HAL_DMA_Start_IT>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07d      	b.n	80025a2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024b4:	60da      	str	r2, [r3, #12]
      break;
 80024b6:	e04a      	b.n	800254e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	4a3b      	ldr	r2, [pc, #236]	; (80025ac <HAL_TIM_IC_Start_DMA+0x2fc>)
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	4a3a      	ldr	r2, [pc, #232]	; (80025b0 <HAL_TIM_IC_Start_DMA+0x300>)
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	4a39      	ldr	r2, [pc, #228]	; (80025b4 <HAL_TIM_IC_Start_DMA+0x304>)
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	333c      	adds	r3, #60	; 0x3c
 80024da:	4619      	mov	r1, r3
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	f7fe fe8e 	bl	8001200 <HAL_DMA_Start_IT>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e059      	b.n	80025a2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fc:	60da      	str	r2, [r3, #12]
      break;
 80024fe:	e026      	b.n	800254e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_TIM_IC_Start_DMA+0x2fc>)
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <HAL_TIM_IC_Start_DMA+0x300>)
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_TIM_IC_Start_DMA+0x304>)
 8002516:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	4619      	mov	r1, r3
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	f7fe fe6a 	bl	8001200 <HAL_DMA_Start_IT>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e035      	b.n	80025a2 <HAL_TIM_IC_Start_DMA+0x2f2>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002544:	60da      	str	r2, [r3, #12]
      break;
 8002546:	e002      	b.n	800254e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	75fb      	strb	r3, [r7, #23]
      break;
 800254c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_TIM_IC_Start_DMA+0x308>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_TIM_IC_Start_DMA+0x2bc>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d004      	beq.n	800256c <HAL_TIM_IC_Start_DMA+0x2bc>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_TIM_IC_Start_DMA+0x30c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_TIM_IC_Start_DMA+0x2e0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d010      	beq.n	80025a0 <HAL_TIM_IC_Start_DMA+0x2f0>
    {
      __HAL_TIM_ENABLE(htim);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	e007      	b.n	80025a0 <HAL_TIM_IC_Start_DMA+0x2f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	08002ac1 	.word	0x08002ac1
 80025b0:	08002b89 	.word	0x08002b89
 80025b4:	08002a2f 	.word	0x08002a2f
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400

080025c0 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fcff 	bl	8002fda <TIM_CCxChannelCmd>

  switch (Channel)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d854      	bhi.n	800268c <HAL_TIM_IC_Stop_DMA+0xcc>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_TIM_IC_Stop_DMA+0x28>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	0800261d 	.word	0x0800261d
 80025ec:	0800268d 	.word	0x0800268d
 80025f0:	0800268d 	.word	0x0800268d
 80025f4:	0800268d 	.word	0x0800268d
 80025f8:	08002639 	.word	0x08002639
 80025fc:	0800268d 	.word	0x0800268d
 8002600:	0800268d 	.word	0x0800268d
 8002604:	0800268d 	.word	0x0800268d
 8002608:	08002655 	.word	0x08002655
 800260c:	0800268d 	.word	0x0800268d
 8002610:	0800268d 	.word	0x0800268d
 8002614:	0800268d 	.word	0x0800268d
 8002618:	08002671 	.word	0x08002671
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800262a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fe45 	bl	80012c0 <HAL_DMA_Abort_IT>
      break;
 8002636:	e02c      	b.n	8002692 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002646:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fe37 	bl	80012c0 <HAL_DMA_Abort_IT>
      break;
 8002652:	e01e      	b.n	8002692 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002662:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fe29 	bl	80012c0 <HAL_DMA_Abort_IT>
      break;
 800266e:	e010      	b.n	8002692 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800267e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fe1b 	bl	80012c0 <HAL_DMA_Abort_IT>
      break;
 800268a:	e002      	b.n	8002692 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	bf00      	nop
  }

  if (status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d14f      	bne.n	8002738 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	f241 1311 	movw	r3, #4369	; 0x1111
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10f      	bne.n	80026c8 <HAL_TIM_IC_Stop_DMA+0x108>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	f240 4344 	movw	r3, #1092	; 0x444
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_IC_Stop_DMA+0x108>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <HAL_TIM_IC_Stop_DMA+0x118>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d6:	e013      	b.n	8002700 <HAL_TIM_IC_Stop_DMA+0x140>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d104      	bne.n	80026e8 <HAL_TIM_IC_Stop_DMA+0x128>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e6:	e00b      	b.n	8002700 <HAL_TIM_IC_Stop_DMA+0x140>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d104      	bne.n	80026f8 <HAL_TIM_IC_Stop_DMA+0x138>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f6:	e003      	b.n	8002700 <HAL_TIM_IC_Stop_DMA+0x140>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <HAL_TIM_IC_Stop_DMA+0x150>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800270e:	e013      	b.n	8002738 <HAL_TIM_IC_Stop_DMA+0x178>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d104      	bne.n	8002720 <HAL_TIM_IC_Stop_DMA+0x160>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800271e:	e00b      	b.n	8002738 <HAL_TIM_IC_Stop_DMA+0x178>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b08      	cmp	r3, #8
 8002724:	d104      	bne.n	8002730 <HAL_TIM_IC_Stop_DMA+0x170>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800272e:	e003      	b.n	8002738 <HAL_TIM_IC_Stop_DMA+0x178>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop

08002744 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_TIM_IC_ConfigChannel+0x1e>
 800275e:	2302      	movs	r3, #2
 8002760:	e088      	b.n	8002874 <HAL_TIM_IC_ConfigChannel+0x130>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002780:	f000 fa8e 	bl	8002ca0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 020c 	bic.w	r2, r2, #12
 8002792:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6999      	ldr	r1, [r3, #24]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	619a      	str	r2, [r3, #24]
 80027a6:	e060      	b.n	800286a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d11c      	bne.n	80027e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80027be:	f000 faf1 	bl	8002da4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6999      	ldr	r1, [r3, #24]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	021a      	lsls	r2, r3, #8
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	619a      	str	r2, [r3, #24]
 80027e6:	e040      	b.n	800286a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d11b      	bne.n	8002826 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80027fe:	f000 fb3c 	bl	8002e7a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 020c 	bic.w	r2, r2, #12
 8002810:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69d9      	ldr	r1, [r3, #28]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	61da      	str	r2, [r3, #28]
 8002824:	e021      	b.n	800286a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d11c      	bne.n	8002866 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800283c:	f000 fb58 	bl	8002ef0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800284e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69d9      	ldr	r1, [r3, #28]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	021a      	lsls	r2, r3, #8
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	61da      	str	r2, [r3, #28]
 8002864:	e001      	b.n	800286a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_TIM_ConfigClockSource+0x1c>
 8002894:	2302      	movs	r3, #2
 8002896:	e0b4      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0x186>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d0:	d03e      	beq.n	8002950 <HAL_TIM_ConfigClockSource+0xd4>
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	f200 8087 	bhi.w	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	f000 8086 	beq.w	80029ee <HAL_TIM_ConfigClockSource+0x172>
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	d87f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028e8:	2b70      	cmp	r3, #112	; 0x70
 80028ea:	d01a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xa6>
 80028ec:	2b70      	cmp	r3, #112	; 0x70
 80028ee:	d87b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f0:	2b60      	cmp	r3, #96	; 0x60
 80028f2:	d050      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x11a>
 80028f4:	2b60      	cmp	r3, #96	; 0x60
 80028f6:	d877      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f8:	2b50      	cmp	r3, #80	; 0x50
 80028fa:	d03c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xfa>
 80028fc:	2b50      	cmp	r3, #80	; 0x50
 80028fe:	d873      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d058      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d86f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b30      	cmp	r3, #48	; 0x30
 800290a:	d064      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 800290c:	2b30      	cmp	r3, #48	; 0x30
 800290e:	d86b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d060      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002914:	2b20      	cmp	r3, #32
 8002916:	d867      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d05c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 800291c:	2b10      	cmp	r3, #16
 800291e:	d05a      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	e062      	b.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002932:	f000 fb33 	bl	8002f9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	609a      	str	r2, [r3, #8]
      break;
 800294e:	e04f      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002960:	f000 fb1c 	bl	8002f9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002972:	609a      	str	r2, [r3, #8]
      break;
 8002974:	e03c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	461a      	mov	r2, r3
 8002984:	f000 f9e0 	bl	8002d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2150      	movs	r1, #80	; 0x50
 800298e:	4618      	mov	r0, r3
 8002990:	f000 faea 	bl	8002f68 <TIM_ITRx_SetConfig>
      break;
 8002994:	e02c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 fa3a 	bl	8002e1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2160      	movs	r1, #96	; 0x60
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fada 	bl	8002f68 <TIM_ITRx_SetConfig>
      break;
 80029b4:	e01c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	461a      	mov	r2, r3
 80029c4:	f000 f9c0 	bl	8002d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2140      	movs	r1, #64	; 0x40
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 faca 	bl	8002f68 <TIM_ITRx_SetConfig>
      break;
 80029d4:	e00c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fac1 	bl	8002f68 <TIM_ITRx_SetConfig>
      break;
 80029e6:	e003      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e000      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d107      	bne.n	8002a56 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a54:	e02a      	b.n	8002aac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d107      	bne.n	8002a70 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2202      	movs	r2, #2
 8002a64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a6e:	e01d      	b.n	8002aac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d107      	bne.n	8002a8a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	e010      	b.n	8002aac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2208      	movs	r2, #8
 8002a98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aa2:	e003      	b.n	8002aac <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ffb5 	bl	8002a1c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d10f      	bne.n	8002af8 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d146      	bne.n	8002b74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af6:	e03d      	b.n	8002b74 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10f      	bne.n	8002b22 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2202      	movs	r2, #2
 8002b06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d131      	bne.n	8002b74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b20:	e028      	b.n	8002b74 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d10f      	bne.n	8002b4c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11c      	bne.n	8002b74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4a:	e013      	b.n	8002b74 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10e      	bne.n	8002b74 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d107      	bne.n	8002b74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7fd fc01 	bl	800037c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d103      	bne.n	8002ba8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	771a      	strb	r2, [r3, #28]
 8002ba6:	e019      	b.n	8002bdc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d103      	bne.n	8002bba <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	771a      	strb	r2, [r3, #28]
 8002bb8:	e010      	b.n	8002bdc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d103      	bne.n	8002bcc <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	771a      	strb	r2, [r3, #28]
 8002bca:	e007      	b.n	8002bdc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d102      	bne.n	8002bdc <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff ff14 	bl	8002a0a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <TIM_Base_SetConfig+0x28>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d003      	beq.n	8002c18 <TIM_Base_SetConfig+0x28>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <TIM_Base_SetConfig+0xac>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d108      	bne.n	8002c2a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <TIM_Base_SetConfig+0x52>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d003      	beq.n	8002c42 <TIM_Base_SetConfig+0x52>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <TIM_Base_SetConfig+0xac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400

08002ca0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 0201 	bic.w	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <TIM_TI1_SetConfig+0xa0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <TIM_TI1_SetConfig+0x3e>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d003      	beq.n	8002cde <TIM_TI1_SetConfig+0x3e>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <TIM_TI1_SetConfig+0xa4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <TIM_TI1_SetConfig+0x42>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <TIM_TI1_SetConfig+0x44>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e003      	b.n	8002d02 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f023 030a 	bic.w	r3, r3, #10
 8002d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 030a 	and.w	r3, r3, #10
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40000400 	.word	0x40000400

08002d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 030a 	bic.w	r3, r3, #10
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f023 0210 	bic.w	r2, r3, #16
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	031b      	lsls	r3, r3, #12
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002df6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f023 0210 	bic.w	r2, r3, #16
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	031b      	lsls	r3, r3, #12
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	621a      	str	r2, [r3, #32]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b087      	sub	sp, #28
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	621a      	str	r2, [r3, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	031b      	lsls	r3, r3, #12
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	031b      	lsls	r3, r3, #12
 8002f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f043 0307 	orr.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	021a      	lsls	r2, r3, #8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2201      	movs	r2, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1a      	ldr	r2, [r3, #32]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	431a      	orrs	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
	...

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e041      	b.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d004      	beq.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10c      	bne.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400

080030d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e042      	b.n	800316c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fd30 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f91d 	bl	8003358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800312c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800313c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800314c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d16d      	bne.n	8003270 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_UART_Transmit+0x2c>
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e066      	b.n	8003272 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2221      	movs	r2, #33	; 0x21
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b2:	f7fd feb3 	bl	8000f1c <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Transmit+0x6c>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031e8:	e02a      	b.n	8003240 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f840 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e036      	b.n	8003272 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3302      	adds	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e007      	b.n	8003232 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3301      	adds	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1cf      	bne.n	80031ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f810 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e006      	b.n	8003272 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b090      	sub	sp, #64	; 0x40
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328a:	e050      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d04c      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
 800329a:	f7fd fe3f 	bl	8000f1c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d241      	bcs.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ca:	637a      	str	r2, [r7, #52]	; 0x34
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e5      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	613b      	str	r3, [r7, #16]
   return(result);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3314      	adds	r3, #20
 80032fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032fe:	623a      	str	r2, [r7, #32]
 8003300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	69f9      	ldr	r1, [r7, #28]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	61bb      	str	r3, [r7, #24]
   return(result);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e5      	bne.n	80032de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e00f      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	429a      	cmp	r2, r3
 800334a:	d09f      	beq.n	800328c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3740      	adds	r7, #64	; 0x40
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003392:	f023 030c 	bic.w	r3, r3, #12
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	430b      	orrs	r3, r1
 800339e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2c      	ldr	r2, [pc, #176]	; (800346c <UART_SetConfig+0x114>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d103      	bne.n	80033c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7fe fe9c 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	e002      	b.n	80033ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033c8:	f7fe fe84 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 80033cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009a      	lsls	r2, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	4a22      	ldr	r2, [pc, #136]	; (8003470 <UART_SetConfig+0x118>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	0119      	lsls	r1, r3, #4
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009a      	lsls	r2, r3, #2
 80033f8:	441a      	add	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	fbb2 f2f3 	udiv	r2, r2, r3
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <UART_SetConfig+0x118>)
 8003406:	fba3 0302 	umull	r0, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2064      	movs	r0, #100	; 0x64
 800340e:	fb00 f303 	mul.w	r3, r0, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	3332      	adds	r3, #50	; 0x32
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <UART_SetConfig+0x118>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003424:	4419      	add	r1, r3
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <UART_SetConfig+0x118>)
 800343e:	fba3 0302 	umull	r0, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	fb00 f303 	mul.w	r3, r0, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a07      	ldr	r2, [pc, #28]	; (8003470 <UART_SetConfig+0x118>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	440a      	add	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40013800 	.word	0x40013800
 8003470:	51eb851f 	.word	0x51eb851f

08003474 <std>:
 8003474:	2300      	movs	r3, #0
 8003476:	b510      	push	{r4, lr}
 8003478:	4604      	mov	r4, r0
 800347a:	e9c0 3300 	strd	r3, r3, [r0]
 800347e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003482:	6083      	str	r3, [r0, #8]
 8003484:	8181      	strh	r1, [r0, #12]
 8003486:	6643      	str	r3, [r0, #100]	; 0x64
 8003488:	81c2      	strh	r2, [r0, #14]
 800348a:	6183      	str	r3, [r0, #24]
 800348c:	4619      	mov	r1, r3
 800348e:	2208      	movs	r2, #8
 8003490:	305c      	adds	r0, #92	; 0x5c
 8003492:	f000 f906 	bl	80036a2 <memset>
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <std+0x58>)
 8003498:	6224      	str	r4, [r4, #32]
 800349a:	6263      	str	r3, [r4, #36]	; 0x24
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <std+0x5c>)
 800349e:	62a3      	str	r3, [r4, #40]	; 0x28
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <std+0x60>)
 80034a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <std+0x64>)
 80034a6:	6323      	str	r3, [r4, #48]	; 0x30
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <std+0x68>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d006      	beq.n	80034bc <std+0x48>
 80034ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80034b2:	4294      	cmp	r4, r2
 80034b4:	d002      	beq.n	80034bc <std+0x48>
 80034b6:	33d0      	adds	r3, #208	; 0xd0
 80034b8:	429c      	cmp	r4, r3
 80034ba:	d105      	bne.n	80034c8 <std+0x54>
 80034bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c4:	f000 b966 	b.w	8003794 <__retarget_lock_init_recursive>
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	bf00      	nop
 80034cc:	0800361d 	.word	0x0800361d
 80034d0:	0800363f 	.word	0x0800363f
 80034d4:	08003677 	.word	0x08003677
 80034d8:	0800369b 	.word	0x0800369b
 80034dc:	200002e8 	.word	0x200002e8

080034e0 <stdio_exit_handler>:
 80034e0:	4a02      	ldr	r2, [pc, #8]	; (80034ec <stdio_exit_handler+0xc>)
 80034e2:	4903      	ldr	r1, [pc, #12]	; (80034f0 <stdio_exit_handler+0x10>)
 80034e4:	4803      	ldr	r0, [pc, #12]	; (80034f4 <stdio_exit_handler+0x14>)
 80034e6:	f000 b869 	b.w	80035bc <_fwalk_sglue>
 80034ea:	bf00      	nop
 80034ec:	20000010 	.word	0x20000010
 80034f0:	08004035 	.word	0x08004035
 80034f4:	2000001c 	.word	0x2000001c

080034f8 <cleanup_stdio>:
 80034f8:	6841      	ldr	r1, [r0, #4]
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <cleanup_stdio+0x34>)
 80034fc:	b510      	push	{r4, lr}
 80034fe:	4299      	cmp	r1, r3
 8003500:	4604      	mov	r4, r0
 8003502:	d001      	beq.n	8003508 <cleanup_stdio+0x10>
 8003504:	f000 fd96 	bl	8004034 <_fflush_r>
 8003508:	68a1      	ldr	r1, [r4, #8]
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <cleanup_stdio+0x38>)
 800350c:	4299      	cmp	r1, r3
 800350e:	d002      	beq.n	8003516 <cleanup_stdio+0x1e>
 8003510:	4620      	mov	r0, r4
 8003512:	f000 fd8f 	bl	8004034 <_fflush_r>
 8003516:	68e1      	ldr	r1, [r4, #12]
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <cleanup_stdio+0x3c>)
 800351a:	4299      	cmp	r1, r3
 800351c:	d004      	beq.n	8003528 <cleanup_stdio+0x30>
 800351e:	4620      	mov	r0, r4
 8003520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003524:	f000 bd86 	b.w	8004034 <_fflush_r>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	200002e8 	.word	0x200002e8
 8003530:	20000350 	.word	0x20000350
 8003534:	200003b8 	.word	0x200003b8

08003538 <global_stdio_init.part.0>:
 8003538:	b510      	push	{r4, lr}
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <global_stdio_init.part.0+0x30>)
 800353c:	4c0b      	ldr	r4, [pc, #44]	; (800356c <global_stdio_init.part.0+0x34>)
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <global_stdio_init.part.0+0x38>)
 8003540:	4620      	mov	r0, r4
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	2104      	movs	r1, #4
 8003546:	2200      	movs	r2, #0
 8003548:	f7ff ff94 	bl	8003474 <std>
 800354c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003550:	2201      	movs	r2, #1
 8003552:	2109      	movs	r1, #9
 8003554:	f7ff ff8e 	bl	8003474 <std>
 8003558:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800355c:	2202      	movs	r2, #2
 800355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003562:	2112      	movs	r1, #18
 8003564:	f7ff bf86 	b.w	8003474 <std>
 8003568:	20000420 	.word	0x20000420
 800356c:	200002e8 	.word	0x200002e8
 8003570:	080034e1 	.word	0x080034e1

08003574 <__sfp_lock_acquire>:
 8003574:	4801      	ldr	r0, [pc, #4]	; (800357c <__sfp_lock_acquire+0x8>)
 8003576:	f000 b90e 	b.w	8003796 <__retarget_lock_acquire_recursive>
 800357a:	bf00      	nop
 800357c:	20000429 	.word	0x20000429

08003580 <__sfp_lock_release>:
 8003580:	4801      	ldr	r0, [pc, #4]	; (8003588 <__sfp_lock_release+0x8>)
 8003582:	f000 b909 	b.w	8003798 <__retarget_lock_release_recursive>
 8003586:	bf00      	nop
 8003588:	20000429 	.word	0x20000429

0800358c <__sinit>:
 800358c:	b510      	push	{r4, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	f7ff fff0 	bl	8003574 <__sfp_lock_acquire>
 8003594:	6a23      	ldr	r3, [r4, #32]
 8003596:	b11b      	cbz	r3, 80035a0 <__sinit+0x14>
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f7ff bff0 	b.w	8003580 <__sfp_lock_release>
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <__sinit+0x28>)
 80035a2:	6223      	str	r3, [r4, #32]
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__sinit+0x2c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f5      	bne.n	8003598 <__sinit+0xc>
 80035ac:	f7ff ffc4 	bl	8003538 <global_stdio_init.part.0>
 80035b0:	e7f2      	b.n	8003598 <__sinit+0xc>
 80035b2:	bf00      	nop
 80035b4:	080034f9 	.word	0x080034f9
 80035b8:	20000420 	.word	0x20000420

080035bc <_fwalk_sglue>:
 80035bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035c0:	4607      	mov	r7, r0
 80035c2:	4688      	mov	r8, r1
 80035c4:	4614      	mov	r4, r2
 80035c6:	2600      	movs	r6, #0
 80035c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035cc:	f1b9 0901 	subs.w	r9, r9, #1
 80035d0:	d505      	bpl.n	80035de <_fwalk_sglue+0x22>
 80035d2:	6824      	ldr	r4, [r4, #0]
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d1f7      	bne.n	80035c8 <_fwalk_sglue+0xc>
 80035d8:	4630      	mov	r0, r6
 80035da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035de:	89ab      	ldrh	r3, [r5, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d907      	bls.n	80035f4 <_fwalk_sglue+0x38>
 80035e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035e8:	3301      	adds	r3, #1
 80035ea:	d003      	beq.n	80035f4 <_fwalk_sglue+0x38>
 80035ec:	4629      	mov	r1, r5
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	4306      	orrs	r6, r0
 80035f4:	3568      	adds	r5, #104	; 0x68
 80035f6:	e7e9      	b.n	80035cc <_fwalk_sglue+0x10>

080035f8 <iprintf>:
 80035f8:	b40f      	push	{r0, r1, r2, r3}
 80035fa:	b507      	push	{r0, r1, r2, lr}
 80035fc:	4906      	ldr	r1, [pc, #24]	; (8003618 <iprintf+0x20>)
 80035fe:	ab04      	add	r3, sp, #16
 8003600:	6808      	ldr	r0, [r1, #0]
 8003602:	f853 2b04 	ldr.w	r2, [r3], #4
 8003606:	6881      	ldr	r1, [r0, #8]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	f000 f9e3 	bl	80039d4 <_vfiprintf_r>
 800360e:	b003      	add	sp, #12
 8003610:	f85d eb04 	ldr.w	lr, [sp], #4
 8003614:	b004      	add	sp, #16
 8003616:	4770      	bx	lr
 8003618:	20000068 	.word	0x20000068

0800361c <__sread>:
 800361c:	b510      	push	{r4, lr}
 800361e:	460c      	mov	r4, r1
 8003620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003624:	f000 f868 	bl	80036f8 <_read_r>
 8003628:	2800      	cmp	r0, #0
 800362a:	bfab      	itete	ge
 800362c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800362e:	89a3      	ldrhlt	r3, [r4, #12]
 8003630:	181b      	addge	r3, r3, r0
 8003632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003636:	bfac      	ite	ge
 8003638:	6563      	strge	r3, [r4, #84]	; 0x54
 800363a:	81a3      	strhlt	r3, [r4, #12]
 800363c:	bd10      	pop	{r4, pc}

0800363e <__swrite>:
 800363e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003642:	461f      	mov	r7, r3
 8003644:	898b      	ldrh	r3, [r1, #12]
 8003646:	4605      	mov	r5, r0
 8003648:	05db      	lsls	r3, r3, #23
 800364a:	460c      	mov	r4, r1
 800364c:	4616      	mov	r6, r2
 800364e:	d505      	bpl.n	800365c <__swrite+0x1e>
 8003650:	2302      	movs	r3, #2
 8003652:	2200      	movs	r2, #0
 8003654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003658:	f000 f83c 	bl	80036d4 <_lseek_r>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	4632      	mov	r2, r6
 8003660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	4628      	mov	r0, r5
 8003668:	463b      	mov	r3, r7
 800366a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800366e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003672:	f000 b853 	b.w	800371c <_write_r>

08003676 <__sseek>:
 8003676:	b510      	push	{r4, lr}
 8003678:	460c      	mov	r4, r1
 800367a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367e:	f000 f829 	bl	80036d4 <_lseek_r>
 8003682:	1c43      	adds	r3, r0, #1
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	bf15      	itete	ne
 8003688:	6560      	strne	r0, [r4, #84]	; 0x54
 800368a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800368e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003692:	81a3      	strheq	r3, [r4, #12]
 8003694:	bf18      	it	ne
 8003696:	81a3      	strhne	r3, [r4, #12]
 8003698:	bd10      	pop	{r4, pc}

0800369a <__sclose>:
 800369a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369e:	f000 b809 	b.w	80036b4 <_close_r>

080036a2 <memset>:
 80036a2:	4603      	mov	r3, r0
 80036a4:	4402      	add	r2, r0
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d100      	bne.n	80036ac <memset+0xa>
 80036aa:	4770      	bx	lr
 80036ac:	f803 1b01 	strb.w	r1, [r3], #1
 80036b0:	e7f9      	b.n	80036a6 <memset+0x4>
	...

080036b4 <_close_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	2300      	movs	r3, #0
 80036b8:	4d05      	ldr	r5, [pc, #20]	; (80036d0 <_close_r+0x1c>)
 80036ba:	4604      	mov	r4, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	f7fd fb41 	bl	8000d46 <_close>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d102      	bne.n	80036ce <_close_r+0x1a>
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	b103      	cbz	r3, 80036ce <_close_r+0x1a>
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	20000424 	.word	0x20000424

080036d4 <_lseek_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	2200      	movs	r2, #0
 80036de:	4d05      	ldr	r5, [pc, #20]	; (80036f4 <_lseek_r+0x20>)
 80036e0:	602a      	str	r2, [r5, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7fd fb53 	bl	8000d8e <_lseek>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_lseek_r+0x1e>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_lseek_r+0x1e>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000424 	.word	0x20000424

080036f8 <_read_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4604      	mov	r4, r0
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	2200      	movs	r2, #0
 8003702:	4d05      	ldr	r5, [pc, #20]	; (8003718 <_read_r+0x20>)
 8003704:	602a      	str	r2, [r5, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f7fd fae4 	bl	8000cd4 <_read>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_read_r+0x1e>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_read_r+0x1e>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20000424 	.word	0x20000424

0800371c <_write_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	2200      	movs	r2, #0
 8003726:	4d05      	ldr	r5, [pc, #20]	; (800373c <_write_r+0x20>)
 8003728:	602a      	str	r2, [r5, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f7fd faef 	bl	8000d0e <_write>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_write_r+0x1e>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_write_r+0x1e>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	20000424 	.word	0x20000424

08003740 <__errno>:
 8003740:	4b01      	ldr	r3, [pc, #4]	; (8003748 <__errno+0x8>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000068 	.word	0x20000068

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	2600      	movs	r6, #0
 8003750:	4d0c      	ldr	r5, [pc, #48]	; (8003784 <__libc_init_array+0x38>)
 8003752:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003754:	1b64      	subs	r4, r4, r5
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	42a6      	cmp	r6, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	f000 fdca 	bl	80042f4 <_init>
 8003760:	2600      	movs	r6, #0
 8003762:	4d0a      	ldr	r5, [pc, #40]	; (800378c <__libc_init_array+0x40>)
 8003764:	4c0a      	ldr	r4, [pc, #40]	; (8003790 <__libc_init_array+0x44>)
 8003766:	1b64      	subs	r4, r4, r5
 8003768:	10a4      	asrs	r4, r4, #2
 800376a:	42a6      	cmp	r6, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f855 3b04 	ldr.w	r3, [r5], #4
 8003774:	4798      	blx	r3
 8003776:	3601      	adds	r6, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f855 3b04 	ldr.w	r3, [r5], #4
 800377e:	4798      	blx	r3
 8003780:	3601      	adds	r6, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	08004384 	.word	0x08004384
 8003788:	08004384 	.word	0x08004384
 800378c:	08004384 	.word	0x08004384
 8003790:	08004388 	.word	0x08004388

08003794 <__retarget_lock_init_recursive>:
 8003794:	4770      	bx	lr

08003796 <__retarget_lock_acquire_recursive>:
 8003796:	4770      	bx	lr

08003798 <__retarget_lock_release_recursive>:
 8003798:	4770      	bx	lr
	...

0800379c <_free_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4605      	mov	r5, r0
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d040      	beq.n	8003826 <_free_r+0x8a>
 80037a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a8:	1f0c      	subs	r4, r1, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfb8      	it	lt
 80037ae:	18e4      	addlt	r4, r4, r3
 80037b0:	f000 f8dc 	bl	800396c <__malloc_lock>
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <_free_r+0x8c>)
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	b933      	cbnz	r3, 80037c8 <_free_r+0x2c>
 80037ba:	6063      	str	r3, [r4, #4]
 80037bc:	6014      	str	r4, [r2, #0]
 80037be:	4628      	mov	r0, r5
 80037c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c4:	f000 b8d8 	b.w	8003978 <__malloc_unlock>
 80037c8:	42a3      	cmp	r3, r4
 80037ca:	d908      	bls.n	80037de <_free_r+0x42>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	1821      	adds	r1, r4, r0
 80037d0:	428b      	cmp	r3, r1
 80037d2:	bf01      	itttt	eq
 80037d4:	6819      	ldreq	r1, [r3, #0]
 80037d6:	685b      	ldreq	r3, [r3, #4]
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	e7ed      	b.n	80037ba <_free_r+0x1e>
 80037de:	461a      	mov	r2, r3
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b10b      	cbz	r3, 80037e8 <_free_r+0x4c>
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d9fa      	bls.n	80037de <_free_r+0x42>
 80037e8:	6811      	ldr	r1, [r2, #0]
 80037ea:	1850      	adds	r0, r2, r1
 80037ec:	42a0      	cmp	r0, r4
 80037ee:	d10b      	bne.n	8003808 <_free_r+0x6c>
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	4401      	add	r1, r0
 80037f4:	1850      	adds	r0, r2, r1
 80037f6:	4283      	cmp	r3, r0
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	d1e0      	bne.n	80037be <_free_r+0x22>
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4408      	add	r0, r1
 8003802:	6010      	str	r0, [r2, #0]
 8003804:	6053      	str	r3, [r2, #4]
 8003806:	e7da      	b.n	80037be <_free_r+0x22>
 8003808:	d902      	bls.n	8003810 <_free_r+0x74>
 800380a:	230c      	movs	r3, #12
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	e7d6      	b.n	80037be <_free_r+0x22>
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	1821      	adds	r1, r4, r0
 8003814:	428b      	cmp	r3, r1
 8003816:	bf01      	itttt	eq
 8003818:	6819      	ldreq	r1, [r3, #0]
 800381a:	685b      	ldreq	r3, [r3, #4]
 800381c:	1809      	addeq	r1, r1, r0
 800381e:	6021      	streq	r1, [r4, #0]
 8003820:	6063      	str	r3, [r4, #4]
 8003822:	6054      	str	r4, [r2, #4]
 8003824:	e7cb      	b.n	80037be <_free_r+0x22>
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	2000042c 	.word	0x2000042c

0800382c <sbrk_aligned>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	4e0e      	ldr	r6, [pc, #56]	; (8003868 <sbrk_aligned+0x3c>)
 8003830:	460c      	mov	r4, r1
 8003832:	6831      	ldr	r1, [r6, #0]
 8003834:	4605      	mov	r5, r0
 8003836:	b911      	cbnz	r1, 800383e <sbrk_aligned+0x12>
 8003838:	f000 fcba 	bl	80041b0 <_sbrk_r>
 800383c:	6030      	str	r0, [r6, #0]
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f000 fcb5 	bl	80041b0 <_sbrk_r>
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	d00a      	beq.n	8003860 <sbrk_aligned+0x34>
 800384a:	1cc4      	adds	r4, r0, #3
 800384c:	f024 0403 	bic.w	r4, r4, #3
 8003850:	42a0      	cmp	r0, r4
 8003852:	d007      	beq.n	8003864 <sbrk_aligned+0x38>
 8003854:	1a21      	subs	r1, r4, r0
 8003856:	4628      	mov	r0, r5
 8003858:	f000 fcaa 	bl	80041b0 <_sbrk_r>
 800385c:	3001      	adds	r0, #1
 800385e:	d101      	bne.n	8003864 <sbrk_aligned+0x38>
 8003860:	f04f 34ff 	mov.w	r4, #4294967295
 8003864:	4620      	mov	r0, r4
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	20000430 	.word	0x20000430

0800386c <_malloc_r>:
 800386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003870:	1ccd      	adds	r5, r1, #3
 8003872:	f025 0503 	bic.w	r5, r5, #3
 8003876:	3508      	adds	r5, #8
 8003878:	2d0c      	cmp	r5, #12
 800387a:	bf38      	it	cc
 800387c:	250c      	movcc	r5, #12
 800387e:	2d00      	cmp	r5, #0
 8003880:	4607      	mov	r7, r0
 8003882:	db01      	blt.n	8003888 <_malloc_r+0x1c>
 8003884:	42a9      	cmp	r1, r5
 8003886:	d905      	bls.n	8003894 <_malloc_r+0x28>
 8003888:	230c      	movs	r3, #12
 800388a:	2600      	movs	r6, #0
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4630      	mov	r0, r6
 8003890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003894:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003968 <_malloc_r+0xfc>
 8003898:	f000 f868 	bl	800396c <__malloc_lock>
 800389c:	f8d8 3000 	ldr.w	r3, [r8]
 80038a0:	461c      	mov	r4, r3
 80038a2:	bb5c      	cbnz	r4, 80038fc <_malloc_r+0x90>
 80038a4:	4629      	mov	r1, r5
 80038a6:	4638      	mov	r0, r7
 80038a8:	f7ff ffc0 	bl	800382c <sbrk_aligned>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	4604      	mov	r4, r0
 80038b0:	d155      	bne.n	800395e <_malloc_r+0xf2>
 80038b2:	f8d8 4000 	ldr.w	r4, [r8]
 80038b6:	4626      	mov	r6, r4
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	d145      	bne.n	8003948 <_malloc_r+0xdc>
 80038bc:	2c00      	cmp	r4, #0
 80038be:	d048      	beq.n	8003952 <_malloc_r+0xe6>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	4631      	mov	r1, r6
 80038c4:	4638      	mov	r0, r7
 80038c6:	eb04 0903 	add.w	r9, r4, r3
 80038ca:	f000 fc71 	bl	80041b0 <_sbrk_r>
 80038ce:	4581      	cmp	r9, r0
 80038d0:	d13f      	bne.n	8003952 <_malloc_r+0xe6>
 80038d2:	6821      	ldr	r1, [r4, #0]
 80038d4:	4638      	mov	r0, r7
 80038d6:	1a6d      	subs	r5, r5, r1
 80038d8:	4629      	mov	r1, r5
 80038da:	f7ff ffa7 	bl	800382c <sbrk_aligned>
 80038de:	3001      	adds	r0, #1
 80038e0:	d037      	beq.n	8003952 <_malloc_r+0xe6>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	442b      	add	r3, r5
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	f8d8 3000 	ldr.w	r3, [r8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d038      	beq.n	8003962 <_malloc_r+0xf6>
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	42a2      	cmp	r2, r4
 80038f4:	d12b      	bne.n	800394e <_malloc_r+0xe2>
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e00f      	b.n	800391c <_malloc_r+0xb0>
 80038fc:	6822      	ldr	r2, [r4, #0]
 80038fe:	1b52      	subs	r2, r2, r5
 8003900:	d41f      	bmi.n	8003942 <_malloc_r+0xd6>
 8003902:	2a0b      	cmp	r2, #11
 8003904:	d917      	bls.n	8003936 <_malloc_r+0xca>
 8003906:	1961      	adds	r1, r4, r5
 8003908:	42a3      	cmp	r3, r4
 800390a:	6025      	str	r5, [r4, #0]
 800390c:	bf18      	it	ne
 800390e:	6059      	strne	r1, [r3, #4]
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	bf08      	it	eq
 8003914:	f8c8 1000 	streq.w	r1, [r8]
 8003918:	5162      	str	r2, [r4, r5]
 800391a:	604b      	str	r3, [r1, #4]
 800391c:	4638      	mov	r0, r7
 800391e:	f104 060b 	add.w	r6, r4, #11
 8003922:	f000 f829 	bl	8003978 <__malloc_unlock>
 8003926:	f026 0607 	bic.w	r6, r6, #7
 800392a:	1d23      	adds	r3, r4, #4
 800392c:	1af2      	subs	r2, r6, r3
 800392e:	d0ae      	beq.n	800388e <_malloc_r+0x22>
 8003930:	1b9b      	subs	r3, r3, r6
 8003932:	50a3      	str	r3, [r4, r2]
 8003934:	e7ab      	b.n	800388e <_malloc_r+0x22>
 8003936:	42a3      	cmp	r3, r4
 8003938:	6862      	ldr	r2, [r4, #4]
 800393a:	d1dd      	bne.n	80038f8 <_malloc_r+0x8c>
 800393c:	f8c8 2000 	str.w	r2, [r8]
 8003940:	e7ec      	b.n	800391c <_malloc_r+0xb0>
 8003942:	4623      	mov	r3, r4
 8003944:	6864      	ldr	r4, [r4, #4]
 8003946:	e7ac      	b.n	80038a2 <_malloc_r+0x36>
 8003948:	4634      	mov	r4, r6
 800394a:	6876      	ldr	r6, [r6, #4]
 800394c:	e7b4      	b.n	80038b8 <_malloc_r+0x4c>
 800394e:	4613      	mov	r3, r2
 8003950:	e7cc      	b.n	80038ec <_malloc_r+0x80>
 8003952:	230c      	movs	r3, #12
 8003954:	4638      	mov	r0, r7
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	f000 f80e 	bl	8003978 <__malloc_unlock>
 800395c:	e797      	b.n	800388e <_malloc_r+0x22>
 800395e:	6025      	str	r5, [r4, #0]
 8003960:	e7dc      	b.n	800391c <_malloc_r+0xb0>
 8003962:	605b      	str	r3, [r3, #4]
 8003964:	deff      	udf	#255	; 0xff
 8003966:	bf00      	nop
 8003968:	2000042c 	.word	0x2000042c

0800396c <__malloc_lock>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__malloc_lock+0x8>)
 800396e:	f7ff bf12 	b.w	8003796 <__retarget_lock_acquire_recursive>
 8003972:	bf00      	nop
 8003974:	20000428 	.word	0x20000428

08003978 <__malloc_unlock>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__malloc_unlock+0x8>)
 800397a:	f7ff bf0d 	b.w	8003798 <__retarget_lock_release_recursive>
 800397e:	bf00      	nop
 8003980:	20000428 	.word	0x20000428

08003984 <__sfputc_r>:
 8003984:	6893      	ldr	r3, [r2, #8]
 8003986:	b410      	push	{r4}
 8003988:	3b01      	subs	r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	da07      	bge.n	80039a0 <__sfputc_r+0x1c>
 8003990:	6994      	ldr	r4, [r2, #24]
 8003992:	42a3      	cmp	r3, r4
 8003994:	db01      	blt.n	800399a <__sfputc_r+0x16>
 8003996:	290a      	cmp	r1, #10
 8003998:	d102      	bne.n	80039a0 <__sfputc_r+0x1c>
 800399a:	bc10      	pop	{r4}
 800399c:	f000 bb72 	b.w	8004084 <__swbuf_r>
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	1c58      	adds	r0, r3, #1
 80039a4:	6010      	str	r0, [r2, #0]
 80039a6:	7019      	strb	r1, [r3, #0]
 80039a8:	4608      	mov	r0, r1
 80039aa:	bc10      	pop	{r4}
 80039ac:	4770      	bx	lr

080039ae <__sfputs_r>:
 80039ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b0:	4606      	mov	r6, r0
 80039b2:	460f      	mov	r7, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	18d5      	adds	r5, r2, r3
 80039b8:	42ac      	cmp	r4, r5
 80039ba:	d101      	bne.n	80039c0 <__sfputs_r+0x12>
 80039bc:	2000      	movs	r0, #0
 80039be:	e007      	b.n	80039d0 <__sfputs_r+0x22>
 80039c0:	463a      	mov	r2, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c8:	f7ff ffdc 	bl	8003984 <__sfputc_r>
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d1f3      	bne.n	80039b8 <__sfputs_r+0xa>
 80039d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039d4 <_vfiprintf_r>:
 80039d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d8:	460d      	mov	r5, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	4698      	mov	r8, r3
 80039de:	4606      	mov	r6, r0
 80039e0:	b09d      	sub	sp, #116	; 0x74
 80039e2:	b118      	cbz	r0, 80039ec <_vfiprintf_r+0x18>
 80039e4:	6a03      	ldr	r3, [r0, #32]
 80039e6:	b90b      	cbnz	r3, 80039ec <_vfiprintf_r+0x18>
 80039e8:	f7ff fdd0 	bl	800358c <__sinit>
 80039ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039ee:	07d9      	lsls	r1, r3, #31
 80039f0:	d405      	bmi.n	80039fe <_vfiprintf_r+0x2a>
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	059a      	lsls	r2, r3, #22
 80039f6:	d402      	bmi.n	80039fe <_vfiprintf_r+0x2a>
 80039f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039fa:	f7ff fecc 	bl	8003796 <__retarget_lock_acquire_recursive>
 80039fe:	89ab      	ldrh	r3, [r5, #12]
 8003a00:	071b      	lsls	r3, r3, #28
 8003a02:	d501      	bpl.n	8003a08 <_vfiprintf_r+0x34>
 8003a04:	692b      	ldr	r3, [r5, #16]
 8003a06:	b99b      	cbnz	r3, 8003a30 <_vfiprintf_r+0x5c>
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f000 fb78 	bl	8004100 <__swsetup_r>
 8003a10:	b170      	cbz	r0, 8003a30 <_vfiprintf_r+0x5c>
 8003a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a14:	07dc      	lsls	r4, r3, #31
 8003a16:	d504      	bpl.n	8003a22 <_vfiprintf_r+0x4e>
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	b01d      	add	sp, #116	; 0x74
 8003a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a22:	89ab      	ldrh	r3, [r5, #12]
 8003a24:	0598      	lsls	r0, r3, #22
 8003a26:	d4f7      	bmi.n	8003a18 <_vfiprintf_r+0x44>
 8003a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a2a:	f7ff feb5 	bl	8003798 <__retarget_lock_release_recursive>
 8003a2e:	e7f3      	b.n	8003a18 <_vfiprintf_r+0x44>
 8003a30:	2300      	movs	r3, #0
 8003a32:	9309      	str	r3, [sp, #36]	; 0x24
 8003a34:	2320      	movs	r3, #32
 8003a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a3a:	2330      	movs	r3, #48	; 0x30
 8003a3c:	f04f 0901 	mov.w	r9, #1
 8003a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003bf4 <_vfiprintf_r+0x220>
 8003a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	469a      	mov	sl, r3
 8003a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a54:	b10a      	cbz	r2, 8003a5a <_vfiprintf_r+0x86>
 8003a56:	2a25      	cmp	r2, #37	; 0x25
 8003a58:	d1f9      	bne.n	8003a4e <_vfiprintf_r+0x7a>
 8003a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8003a5e:	d00b      	beq.n	8003a78 <_vfiprintf_r+0xa4>
 8003a60:	465b      	mov	r3, fp
 8003a62:	4622      	mov	r2, r4
 8003a64:	4629      	mov	r1, r5
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7ff ffa1 	bl	80039ae <__sfputs_r>
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	f000 80a9 	beq.w	8003bc4 <_vfiprintf_r+0x1f0>
 8003a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a74:	445a      	add	r2, fp
 8003a76:	9209      	str	r2, [sp, #36]	; 0x24
 8003a78:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a1 	beq.w	8003bc4 <_vfiprintf_r+0x1f0>
 8003a82:	2300      	movs	r3, #0
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a8c:	f10a 0a01 	add.w	sl, sl, #1
 8003a90:	9304      	str	r3, [sp, #16]
 8003a92:	9307      	str	r3, [sp, #28]
 8003a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a98:	931a      	str	r3, [sp, #104]	; 0x68
 8003a9a:	4654      	mov	r4, sl
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa2:	4854      	ldr	r0, [pc, #336]	; (8003bf4 <_vfiprintf_r+0x220>)
 8003aa4:	f000 fb94 	bl	80041d0 <memchr>
 8003aa8:	9a04      	ldr	r2, [sp, #16]
 8003aaa:	b9d8      	cbnz	r0, 8003ae4 <_vfiprintf_r+0x110>
 8003aac:	06d1      	lsls	r1, r2, #27
 8003aae:	bf44      	itt	mi
 8003ab0:	2320      	movmi	r3, #32
 8003ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab6:	0713      	lsls	r3, r2, #28
 8003ab8:	bf44      	itt	mi
 8003aba:	232b      	movmi	r3, #43	; 0x2b
 8003abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac6:	d015      	beq.n	8003af4 <_vfiprintf_r+0x120>
 8003ac8:	4654      	mov	r4, sl
 8003aca:	2000      	movs	r0, #0
 8003acc:	f04f 0c0a 	mov.w	ip, #10
 8003ad0:	9a07      	ldr	r2, [sp, #28]
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ad8:	3b30      	subs	r3, #48	; 0x30
 8003ada:	2b09      	cmp	r3, #9
 8003adc:	d94d      	bls.n	8003b7a <_vfiprintf_r+0x1a6>
 8003ade:	b1b0      	cbz	r0, 8003b0e <_vfiprintf_r+0x13a>
 8003ae0:	9207      	str	r2, [sp, #28]
 8003ae2:	e014      	b.n	8003b0e <_vfiprintf_r+0x13a>
 8003ae4:	eba0 0308 	sub.w	r3, r0, r8
 8003ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8003aec:	4313      	orrs	r3, r2
 8003aee:	46a2      	mov	sl, r4
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	e7d2      	b.n	8003a9a <_vfiprintf_r+0xc6>
 8003af4:	9b03      	ldr	r3, [sp, #12]
 8003af6:	1d19      	adds	r1, r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	9103      	str	r1, [sp, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bfbb      	ittet	lt
 8003b00:	425b      	neglt	r3, r3
 8003b02:	f042 0202 	orrlt.w	r2, r2, #2
 8003b06:	9307      	strge	r3, [sp, #28]
 8003b08:	9307      	strlt	r3, [sp, #28]
 8003b0a:	bfb8      	it	lt
 8003b0c:	9204      	strlt	r2, [sp, #16]
 8003b0e:	7823      	ldrb	r3, [r4, #0]
 8003b10:	2b2e      	cmp	r3, #46	; 0x2e
 8003b12:	d10c      	bne.n	8003b2e <_vfiprintf_r+0x15a>
 8003b14:	7863      	ldrb	r3, [r4, #1]
 8003b16:	2b2a      	cmp	r3, #42	; 0x2a
 8003b18:	d134      	bne.n	8003b84 <_vfiprintf_r+0x1b0>
 8003b1a:	9b03      	ldr	r3, [sp, #12]
 8003b1c:	3402      	adds	r4, #2
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	9203      	str	r2, [sp, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bfb8      	it	lt
 8003b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b2c:	9305      	str	r3, [sp, #20]
 8003b2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bf8 <_vfiprintf_r+0x224>
 8003b32:	2203      	movs	r2, #3
 8003b34:	4650      	mov	r0, sl
 8003b36:	7821      	ldrb	r1, [r4, #0]
 8003b38:	f000 fb4a 	bl	80041d0 <memchr>
 8003b3c:	b138      	cbz	r0, 8003b4e <_vfiprintf_r+0x17a>
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	9b04      	ldr	r3, [sp, #16]
 8003b42:	eba0 000a 	sub.w	r0, r0, sl
 8003b46:	4082      	lsls	r2, r0
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	3401      	adds	r4, #1
 8003b4c:	9304      	str	r3, [sp, #16]
 8003b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b52:	2206      	movs	r2, #6
 8003b54:	4829      	ldr	r0, [pc, #164]	; (8003bfc <_vfiprintf_r+0x228>)
 8003b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b5a:	f000 fb39 	bl	80041d0 <memchr>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d03f      	beq.n	8003be2 <_vfiprintf_r+0x20e>
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <_vfiprintf_r+0x22c>)
 8003b64:	bb1b      	cbnz	r3, 8003bae <_vfiprintf_r+0x1da>
 8003b66:	9b03      	ldr	r3, [sp, #12]
 8003b68:	3307      	adds	r3, #7
 8003b6a:	f023 0307 	bic.w	r3, r3, #7
 8003b6e:	3308      	adds	r3, #8
 8003b70:	9303      	str	r3, [sp, #12]
 8003b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b74:	443b      	add	r3, r7
 8003b76:	9309      	str	r3, [sp, #36]	; 0x24
 8003b78:	e768      	b.n	8003a4c <_vfiprintf_r+0x78>
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b82:	e7a6      	b.n	8003ad2 <_vfiprintf_r+0xfe>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f04f 0c0a 	mov.w	ip, #10
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	3401      	adds	r4, #1
 8003b8e:	9305      	str	r3, [sp, #20]
 8003b90:	4620      	mov	r0, r4
 8003b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b96:	3a30      	subs	r2, #48	; 0x30
 8003b98:	2a09      	cmp	r2, #9
 8003b9a:	d903      	bls.n	8003ba4 <_vfiprintf_r+0x1d0>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0c6      	beq.n	8003b2e <_vfiprintf_r+0x15a>
 8003ba0:	9105      	str	r1, [sp, #20]
 8003ba2:	e7c4      	b.n	8003b2e <_vfiprintf_r+0x15a>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bac:	e7f0      	b.n	8003b90 <_vfiprintf_r+0x1bc>
 8003bae:	ab03      	add	r3, sp, #12
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	462a      	mov	r2, r5
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <_vfiprintf_r+0x230>)
 8003bb8:	a904      	add	r1, sp, #16
 8003bba:	f3af 8000 	nop.w
 8003bbe:	4607      	mov	r7, r0
 8003bc0:	1c78      	adds	r0, r7, #1
 8003bc2:	d1d6      	bne.n	8003b72 <_vfiprintf_r+0x19e>
 8003bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bc6:	07d9      	lsls	r1, r3, #31
 8003bc8:	d405      	bmi.n	8003bd6 <_vfiprintf_r+0x202>
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	059a      	lsls	r2, r3, #22
 8003bce:	d402      	bmi.n	8003bd6 <_vfiprintf_r+0x202>
 8003bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bd2:	f7ff fde1 	bl	8003798 <__retarget_lock_release_recursive>
 8003bd6:	89ab      	ldrh	r3, [r5, #12]
 8003bd8:	065b      	lsls	r3, r3, #25
 8003bda:	f53f af1d 	bmi.w	8003a18 <_vfiprintf_r+0x44>
 8003bde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003be0:	e71c      	b.n	8003a1c <_vfiprintf_r+0x48>
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4630      	mov	r0, r6
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <_vfiprintf_r+0x230>)
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	f000 f87d 	bl	8003cec <_printf_i>
 8003bf2:	e7e4      	b.n	8003bbe <_vfiprintf_r+0x1ea>
 8003bf4:	0800434e 	.word	0x0800434e
 8003bf8:	08004354 	.word	0x08004354
 8003bfc:	08004358 	.word	0x08004358
 8003c00:	00000000 	.word	0x00000000
 8003c04:	080039af 	.word	0x080039af

08003c08 <_printf_common>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	4699      	mov	r9, r3
 8003c10:	688a      	ldr	r2, [r1, #8]
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	4607      	mov	r7, r0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bfb8      	it	lt
 8003c1a:	4613      	movlt	r3, r2
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c22:	460c      	mov	r4, r1
 8003c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c28:	b10a      	cbz	r2, 8003c2e <_printf_common+0x26>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	0699      	lsls	r1, r3, #26
 8003c32:	bf42      	ittt	mi
 8003c34:	6833      	ldrmi	r3, [r6, #0]
 8003c36:	3302      	addmi	r3, #2
 8003c38:	6033      	strmi	r3, [r6, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	f015 0506 	ands.w	r5, r5, #6
 8003c40:	d106      	bne.n	8003c50 <_printf_common+0x48>
 8003c42:	f104 0a19 	add.w	sl, r4, #25
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	6832      	ldr	r2, [r6, #0]
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc2b      	bgt.n	8003ca8 <_printf_common+0xa0>
 8003c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c54:	1e13      	subs	r3, r2, #0
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	bf18      	it	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d430      	bmi.n	8003cc2 <_printf_common+0xba>
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c68:	47c0      	blx	r8
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d023      	beq.n	8003cb6 <_printf_common+0xae>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf14      	ite	ne
 8003c7a:	2500      	movne	r5, #0
 8003c7c:	6833      	ldreq	r3, [r6, #0]
 8003c7e:	f04f 0600 	mov.w	r6, #0
 8003c82:	bf08      	it	eq
 8003c84:	68e5      	ldreq	r5, [r4, #12]
 8003c86:	f104 041a 	add.w	r4, r4, #26
 8003c8a:	bf08      	it	eq
 8003c8c:	1aed      	subeq	r5, r5, r3
 8003c8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c92:	bf08      	it	eq
 8003c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	bfc4      	itt	gt
 8003c9c:	1a9b      	subgt	r3, r3, r2
 8003c9e:	18ed      	addgt	r5, r5, r3
 8003ca0:	42b5      	cmp	r5, r6
 8003ca2:	d11a      	bne.n	8003cda <_printf_common+0xd2>
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	e008      	b.n	8003cba <_printf_common+0xb2>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4652      	mov	r2, sl
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	47c0      	blx	r8
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d103      	bne.n	8003cbe <_printf_common+0xb6>
 8003cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbe:	3501      	adds	r5, #1
 8003cc0:	e7c1      	b.n	8003c46 <_printf_common+0x3e>
 8003cc2:	2030      	movs	r0, #48	; 0x30
 8003cc4:	18e1      	adds	r1, r4, r3
 8003cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cd0:	4422      	add	r2, r4
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cd8:	e7c2      	b.n	8003c60 <_printf_common+0x58>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4622      	mov	r2, r4
 8003cde:	4649      	mov	r1, r9
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	47c0      	blx	r8
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d0e6      	beq.n	8003cb6 <_printf_common+0xae>
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7d9      	b.n	8003ca0 <_printf_common+0x98>

08003cec <_printf_i>:
 8003cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	7e0f      	ldrb	r7, [r1, #24]
 8003cf2:	4691      	mov	r9, r2
 8003cf4:	2f78      	cmp	r7, #120	; 0x78
 8003cf6:	4680      	mov	r8, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	469a      	mov	sl, r3
 8003cfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d02:	d807      	bhi.n	8003d14 <_printf_i+0x28>
 8003d04:	2f62      	cmp	r7, #98	; 0x62
 8003d06:	d80a      	bhi.n	8003d1e <_printf_i+0x32>
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	f000 80d5 	beq.w	8003eb8 <_printf_i+0x1cc>
 8003d0e:	2f58      	cmp	r7, #88	; 0x58
 8003d10:	f000 80c1 	beq.w	8003e96 <_printf_i+0x1aa>
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d1c:	e03a      	b.n	8003d94 <_printf_i+0xa8>
 8003d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d22:	2b15      	cmp	r3, #21
 8003d24:	d8f6      	bhi.n	8003d14 <_printf_i+0x28>
 8003d26:	a101      	add	r1, pc, #4	; (adr r1, 8003d2c <_printf_i+0x40>)
 8003d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	08003d99 	.word	0x08003d99
 8003d34:	08003d15 	.word	0x08003d15
 8003d38:	08003d15 	.word	0x08003d15
 8003d3c:	08003d15 	.word	0x08003d15
 8003d40:	08003d15 	.word	0x08003d15
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003d15 	.word	0x08003d15
 8003d4c:	08003d15 	.word	0x08003d15
 8003d50:	08003d15 	.word	0x08003d15
 8003d54:	08003d15 	.word	0x08003d15
 8003d58:	08003e9f 	.word	0x08003e9f
 8003d5c:	08003dc5 	.word	0x08003dc5
 8003d60:	08003e59 	.word	0x08003e59
 8003d64:	08003d15 	.word	0x08003d15
 8003d68:	08003d15 	.word	0x08003d15
 8003d6c:	08003ec1 	.word	0x08003ec1
 8003d70:	08003d15 	.word	0x08003d15
 8003d74:	08003dc5 	.word	0x08003dc5
 8003d78:	08003d15 	.word	0x08003d15
 8003d7c:	08003d15 	.word	0x08003d15
 8003d80:	08003e61 	.word	0x08003e61
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	1d1a      	adds	r2, r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	602a      	str	r2, [r5, #0]
 8003d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0a0      	b.n	8003eda <_printf_i+0x1ee>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	682b      	ldr	r3, [r5, #0]
 8003d9c:	0607      	lsls	r7, r0, #24
 8003d9e:	f103 0104 	add.w	r1, r3, #4
 8003da2:	6029      	str	r1, [r5, #0]
 8003da4:	d501      	bpl.n	8003daa <_printf_i+0xbe>
 8003da6:	681e      	ldr	r6, [r3, #0]
 8003da8:	e003      	b.n	8003db2 <_printf_i+0xc6>
 8003daa:	0646      	lsls	r6, r0, #25
 8003dac:	d5fb      	bpl.n	8003da6 <_printf_i+0xba>
 8003dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003db2:	2e00      	cmp	r6, #0
 8003db4:	da03      	bge.n	8003dbe <_printf_i+0xd2>
 8003db6:	232d      	movs	r3, #45	; 0x2d
 8003db8:	4276      	negs	r6, r6
 8003dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dbe:	230a      	movs	r3, #10
 8003dc0:	4859      	ldr	r0, [pc, #356]	; (8003f28 <_printf_i+0x23c>)
 8003dc2:	e012      	b.n	8003dea <_printf_i+0xfe>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	1d19      	adds	r1, r3, #4
 8003dca:	6029      	str	r1, [r5, #0]
 8003dcc:	0605      	lsls	r5, r0, #24
 8003dce:	d501      	bpl.n	8003dd4 <_printf_i+0xe8>
 8003dd0:	681e      	ldr	r6, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <_printf_i+0xee>
 8003dd4:	0641      	lsls	r1, r0, #25
 8003dd6:	d5fb      	bpl.n	8003dd0 <_printf_i+0xe4>
 8003dd8:	881e      	ldrh	r6, [r3, #0]
 8003dda:	2f6f      	cmp	r7, #111	; 0x6f
 8003ddc:	bf0c      	ite	eq
 8003dde:	2308      	moveq	r3, #8
 8003de0:	230a      	movne	r3, #10
 8003de2:	4851      	ldr	r0, [pc, #324]	; (8003f28 <_printf_i+0x23c>)
 8003de4:	2100      	movs	r1, #0
 8003de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dea:	6865      	ldr	r5, [r4, #4]
 8003dec:	2d00      	cmp	r5, #0
 8003dee:	bfa8      	it	ge
 8003df0:	6821      	ldrge	r1, [r4, #0]
 8003df2:	60a5      	str	r5, [r4, #8]
 8003df4:	bfa4      	itt	ge
 8003df6:	f021 0104 	bicge.w	r1, r1, #4
 8003dfa:	6021      	strge	r1, [r4, #0]
 8003dfc:	b90e      	cbnz	r6, 8003e02 <_printf_i+0x116>
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	d04b      	beq.n	8003e9a <_printf_i+0x1ae>
 8003e02:	4615      	mov	r5, r2
 8003e04:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e08:	fb03 6711 	mls	r7, r3, r1, r6
 8003e0c:	5dc7      	ldrb	r7, [r0, r7]
 8003e0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e12:	4637      	mov	r7, r6
 8003e14:	42bb      	cmp	r3, r7
 8003e16:	460e      	mov	r6, r1
 8003e18:	d9f4      	bls.n	8003e04 <_printf_i+0x118>
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d10b      	bne.n	8003e36 <_printf_i+0x14a>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	07de      	lsls	r6, r3, #31
 8003e22:	d508      	bpl.n	8003e36 <_printf_i+0x14a>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	6861      	ldr	r1, [r4, #4]
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	bfde      	ittt	le
 8003e2c:	2330      	movle	r3, #48	; 0x30
 8003e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e36:	1b52      	subs	r2, r2, r5
 8003e38:	6122      	str	r2, [r4, #16]
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4640      	mov	r0, r8
 8003e40:	f8cd a000 	str.w	sl, [sp]
 8003e44:	aa03      	add	r2, sp, #12
 8003e46:	f7ff fedf 	bl	8003c08 <_printf_common>
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d14a      	bne.n	8003ee4 <_printf_i+0x1f8>
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	b004      	add	sp, #16
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	f043 0320 	orr.w	r3, r3, #32
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	2778      	movs	r7, #120	; 0x78
 8003e62:	4832      	ldr	r0, [pc, #200]	; (8003f2c <_printf_i+0x240>)
 8003e64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	6829      	ldr	r1, [r5, #0]
 8003e6c:	061f      	lsls	r7, r3, #24
 8003e6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e72:	d402      	bmi.n	8003e7a <_printf_i+0x18e>
 8003e74:	065f      	lsls	r7, r3, #25
 8003e76:	bf48      	it	mi
 8003e78:	b2b6      	uxthmi	r6, r6
 8003e7a:	07df      	lsls	r7, r3, #31
 8003e7c:	bf48      	it	mi
 8003e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e82:	6029      	str	r1, [r5, #0]
 8003e84:	bf48      	it	mi
 8003e86:	6023      	strmi	r3, [r4, #0]
 8003e88:	b91e      	cbnz	r6, 8003e92 <_printf_i+0x1a6>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f023 0320 	bic.w	r3, r3, #32
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	2310      	movs	r3, #16
 8003e94:	e7a6      	b.n	8003de4 <_printf_i+0xf8>
 8003e96:	4824      	ldr	r0, [pc, #144]	; (8003f28 <_printf_i+0x23c>)
 8003e98:	e7e4      	b.n	8003e64 <_printf_i+0x178>
 8003e9a:	4615      	mov	r5, r2
 8003e9c:	e7bd      	b.n	8003e1a <_printf_i+0x12e>
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	6826      	ldr	r6, [r4, #0]
 8003ea2:	1d18      	adds	r0, r3, #4
 8003ea4:	6961      	ldr	r1, [r4, #20]
 8003ea6:	6028      	str	r0, [r5, #0]
 8003ea8:	0635      	lsls	r5, r6, #24
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	d501      	bpl.n	8003eb2 <_printf_i+0x1c6>
 8003eae:	6019      	str	r1, [r3, #0]
 8003eb0:	e002      	b.n	8003eb8 <_printf_i+0x1cc>
 8003eb2:	0670      	lsls	r0, r6, #25
 8003eb4:	d5fb      	bpl.n	8003eae <_printf_i+0x1c2>
 8003eb6:	8019      	strh	r1, [r3, #0]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4615      	mov	r5, r2
 8003ebc:	6123      	str	r3, [r4, #16]
 8003ebe:	e7bc      	b.n	8003e3a <_printf_i+0x14e>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	1d1a      	adds	r2, r3, #4
 8003ec6:	602a      	str	r2, [r5, #0]
 8003ec8:	681d      	ldr	r5, [r3, #0]
 8003eca:	6862      	ldr	r2, [r4, #4]
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f97f 	bl	80041d0 <memchr>
 8003ed2:	b108      	cbz	r0, 8003ed8 <_printf_i+0x1ec>
 8003ed4:	1b40      	subs	r0, r0, r5
 8003ed6:	6060      	str	r0, [r4, #4]
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	6123      	str	r3, [r4, #16]
 8003edc:	2300      	movs	r3, #0
 8003ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee2:	e7aa      	b.n	8003e3a <_printf_i+0x14e>
 8003ee4:	462a      	mov	r2, r5
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	47d0      	blx	sl
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d0ad      	beq.n	8003e4e <_printf_i+0x162>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	079b      	lsls	r3, r3, #30
 8003ef6:	d413      	bmi.n	8003f20 <_printf_i+0x234>
 8003ef8:	68e0      	ldr	r0, [r4, #12]
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	4298      	cmp	r0, r3
 8003efe:	bfb8      	it	lt
 8003f00:	4618      	movlt	r0, r3
 8003f02:	e7a6      	b.n	8003e52 <_printf_i+0x166>
 8003f04:	2301      	movs	r3, #1
 8003f06:	4632      	mov	r2, r6
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	47d0      	blx	sl
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d09d      	beq.n	8003e4e <_printf_i+0x162>
 8003f12:	3501      	adds	r5, #1
 8003f14:	68e3      	ldr	r3, [r4, #12]
 8003f16:	9903      	ldr	r1, [sp, #12]
 8003f18:	1a5b      	subs	r3, r3, r1
 8003f1a:	42ab      	cmp	r3, r5
 8003f1c:	dcf2      	bgt.n	8003f04 <_printf_i+0x218>
 8003f1e:	e7eb      	b.n	8003ef8 <_printf_i+0x20c>
 8003f20:	2500      	movs	r5, #0
 8003f22:	f104 0619 	add.w	r6, r4, #25
 8003f26:	e7f5      	b.n	8003f14 <_printf_i+0x228>
 8003f28:	0800435f 	.word	0x0800435f
 8003f2c:	08004370 	.word	0x08004370

08003f30 <__sflush_r>:
 8003f30:	898a      	ldrh	r2, [r1, #12]
 8003f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f34:	4605      	mov	r5, r0
 8003f36:	0710      	lsls	r0, r2, #28
 8003f38:	460c      	mov	r4, r1
 8003f3a:	d457      	bmi.n	8003fec <__sflush_r+0xbc>
 8003f3c:	684b      	ldr	r3, [r1, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	dc04      	bgt.n	8003f4c <__sflush_r+0x1c>
 8003f42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	dc01      	bgt.n	8003f4c <__sflush_r+0x1c>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	d0fa      	beq.n	8003f48 <__sflush_r+0x18>
 8003f52:	2300      	movs	r3, #0
 8003f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f58:	682f      	ldr	r7, [r5, #0]
 8003f5a:	6a21      	ldr	r1, [r4, #32]
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	d032      	beq.n	8003fc6 <__sflush_r+0x96>
 8003f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	075a      	lsls	r2, r3, #29
 8003f66:	d505      	bpl.n	8003f74 <__sflush_r+0x44>
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	1ac0      	subs	r0, r0, r3
 8003f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f6e:	b10b      	cbz	r3, 8003f74 <__sflush_r+0x44>
 8003f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f72:	1ac0      	subs	r0, r0, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	4602      	mov	r2, r0
 8003f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	6a21      	ldr	r1, [r4, #32]
 8003f7e:	47b0      	blx	r6
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	d106      	bne.n	8003f94 <__sflush_r+0x64>
 8003f86:	6829      	ldr	r1, [r5, #0]
 8003f88:	291d      	cmp	r1, #29
 8003f8a:	d82b      	bhi.n	8003fe4 <__sflush_r+0xb4>
 8003f8c:	4a28      	ldr	r2, [pc, #160]	; (8004030 <__sflush_r+0x100>)
 8003f8e:	410a      	asrs	r2, r1
 8003f90:	07d6      	lsls	r6, r2, #31
 8003f92:	d427      	bmi.n	8003fe4 <__sflush_r+0xb4>
 8003f94:	2200      	movs	r2, #0
 8003f96:	6062      	str	r2, [r4, #4]
 8003f98:	6922      	ldr	r2, [r4, #16]
 8003f9a:	04d9      	lsls	r1, r3, #19
 8003f9c:	6022      	str	r2, [r4, #0]
 8003f9e:	d504      	bpl.n	8003faa <__sflush_r+0x7a>
 8003fa0:	1c42      	adds	r2, r0, #1
 8003fa2:	d101      	bne.n	8003fa8 <__sflush_r+0x78>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b903      	cbnz	r3, 8003faa <__sflush_r+0x7a>
 8003fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8003faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fac:	602f      	str	r7, [r5, #0]
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	d0ca      	beq.n	8003f48 <__sflush_r+0x18>
 8003fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	d002      	beq.n	8003fc0 <__sflush_r+0x90>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7ff fbee 	bl	800379c <_free_r>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8003fc4:	e7c1      	b.n	8003f4a <__sflush_r+0x1a>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b0      	blx	r6
 8003fcc:	1c41      	adds	r1, r0, #1
 8003fce:	d1c8      	bne.n	8003f62 <__sflush_r+0x32>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0c5      	beq.n	8003f62 <__sflush_r+0x32>
 8003fd6:	2b1d      	cmp	r3, #29
 8003fd8:	d001      	beq.n	8003fde <__sflush_r+0xae>
 8003fda:	2b16      	cmp	r3, #22
 8003fdc:	d101      	bne.n	8003fe2 <__sflush_r+0xb2>
 8003fde:	602f      	str	r7, [r5, #0]
 8003fe0:	e7b2      	b.n	8003f48 <__sflush_r+0x18>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	e7ae      	b.n	8003f4a <__sflush_r+0x1a>
 8003fec:	690f      	ldr	r7, [r1, #16]
 8003fee:	2f00      	cmp	r7, #0
 8003ff0:	d0aa      	beq.n	8003f48 <__sflush_r+0x18>
 8003ff2:	0793      	lsls	r3, r2, #30
 8003ff4:	bf18      	it	ne
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	680e      	ldr	r6, [r1, #0]
 8003ffa:	bf08      	it	eq
 8003ffc:	694b      	ldreq	r3, [r1, #20]
 8003ffe:	1bf6      	subs	r6, r6, r7
 8004000:	600f      	str	r7, [r1, #0]
 8004002:	608b      	str	r3, [r1, #8]
 8004004:	2e00      	cmp	r6, #0
 8004006:	dd9f      	ble.n	8003f48 <__sflush_r+0x18>
 8004008:	4633      	mov	r3, r6
 800400a:	463a      	mov	r2, r7
 800400c:	4628      	mov	r0, r5
 800400e:	6a21      	ldr	r1, [r4, #32]
 8004010:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004014:	47e0      	blx	ip
 8004016:	2800      	cmp	r0, #0
 8004018:	dc06      	bgt.n	8004028 <__sflush_r+0xf8>
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	e790      	b.n	8003f4a <__sflush_r+0x1a>
 8004028:	4407      	add	r7, r0
 800402a:	1a36      	subs	r6, r6, r0
 800402c:	e7ea      	b.n	8004004 <__sflush_r+0xd4>
 800402e:	bf00      	nop
 8004030:	dfbffffe 	.word	0xdfbffffe

08004034 <_fflush_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	690b      	ldr	r3, [r1, #16]
 8004038:	4605      	mov	r5, r0
 800403a:	460c      	mov	r4, r1
 800403c:	b913      	cbnz	r3, 8004044 <_fflush_r+0x10>
 800403e:	2500      	movs	r5, #0
 8004040:	4628      	mov	r0, r5
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	b118      	cbz	r0, 800404e <_fflush_r+0x1a>
 8004046:	6a03      	ldr	r3, [r0, #32]
 8004048:	b90b      	cbnz	r3, 800404e <_fflush_r+0x1a>
 800404a:	f7ff fa9f 	bl	800358c <__sinit>
 800404e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f3      	beq.n	800403e <_fflush_r+0xa>
 8004056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004058:	07d0      	lsls	r0, r2, #31
 800405a:	d404      	bmi.n	8004066 <_fflush_r+0x32>
 800405c:	0599      	lsls	r1, r3, #22
 800405e:	d402      	bmi.n	8004066 <_fflush_r+0x32>
 8004060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004062:	f7ff fb98 	bl	8003796 <__retarget_lock_acquire_recursive>
 8004066:	4628      	mov	r0, r5
 8004068:	4621      	mov	r1, r4
 800406a:	f7ff ff61 	bl	8003f30 <__sflush_r>
 800406e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004070:	4605      	mov	r5, r0
 8004072:	07da      	lsls	r2, r3, #31
 8004074:	d4e4      	bmi.n	8004040 <_fflush_r+0xc>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	059b      	lsls	r3, r3, #22
 800407a:	d4e1      	bmi.n	8004040 <_fflush_r+0xc>
 800407c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407e:	f7ff fb8b 	bl	8003798 <__retarget_lock_release_recursive>
 8004082:	e7dd      	b.n	8004040 <_fflush_r+0xc>

08004084 <__swbuf_r>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	460e      	mov	r6, r1
 8004088:	4614      	mov	r4, r2
 800408a:	4605      	mov	r5, r0
 800408c:	b118      	cbz	r0, 8004096 <__swbuf_r+0x12>
 800408e:	6a03      	ldr	r3, [r0, #32]
 8004090:	b90b      	cbnz	r3, 8004096 <__swbuf_r+0x12>
 8004092:	f7ff fa7b 	bl	800358c <__sinit>
 8004096:	69a3      	ldr	r3, [r4, #24]
 8004098:	60a3      	str	r3, [r4, #8]
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	071a      	lsls	r2, r3, #28
 800409e:	d525      	bpl.n	80040ec <__swbuf_r+0x68>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	b31b      	cbz	r3, 80040ec <__swbuf_r+0x68>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	6922      	ldr	r2, [r4, #16]
 80040a8:	b2f6      	uxtb	r6, r6
 80040aa:	1a98      	subs	r0, r3, r2
 80040ac:	6963      	ldr	r3, [r4, #20]
 80040ae:	4637      	mov	r7, r6
 80040b0:	4283      	cmp	r3, r0
 80040b2:	dc04      	bgt.n	80040be <__swbuf_r+0x3a>
 80040b4:	4621      	mov	r1, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	f7ff ffbc 	bl	8004034 <_fflush_r>
 80040bc:	b9e0      	cbnz	r0, 80040f8 <__swbuf_r+0x74>
 80040be:	68a3      	ldr	r3, [r4, #8]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60a3      	str	r3, [r4, #8]
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	6022      	str	r2, [r4, #0]
 80040ca:	701e      	strb	r6, [r3, #0]
 80040cc:	6962      	ldr	r2, [r4, #20]
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d004      	beq.n	80040de <__swbuf_r+0x5a>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	07db      	lsls	r3, r3, #31
 80040d8:	d506      	bpl.n	80040e8 <__swbuf_r+0x64>
 80040da:	2e0a      	cmp	r6, #10
 80040dc:	d104      	bne.n	80040e8 <__swbuf_r+0x64>
 80040de:	4621      	mov	r1, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f7ff ffa7 	bl	8004034 <_fflush_r>
 80040e6:	b938      	cbnz	r0, 80040f8 <__swbuf_r+0x74>
 80040e8:	4638      	mov	r0, r7
 80040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ec:	4621      	mov	r1, r4
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 f806 	bl	8004100 <__swsetup_r>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d0d5      	beq.n	80040a4 <__swbuf_r+0x20>
 80040f8:	f04f 37ff 	mov.w	r7, #4294967295
 80040fc:	e7f4      	b.n	80040e8 <__swbuf_r+0x64>
	...

08004100 <__swsetup_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <__swsetup_r+0xac>)
 8004104:	4605      	mov	r5, r0
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	460c      	mov	r4, r1
 800410a:	b118      	cbz	r0, 8004114 <__swsetup_r+0x14>
 800410c:	6a03      	ldr	r3, [r0, #32]
 800410e:	b90b      	cbnz	r3, 8004114 <__swsetup_r+0x14>
 8004110:	f7ff fa3c 	bl	800358c <__sinit>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800411a:	0718      	lsls	r0, r3, #28
 800411c:	d422      	bmi.n	8004164 <__swsetup_r+0x64>
 800411e:	06d9      	lsls	r1, r3, #27
 8004120:	d407      	bmi.n	8004132 <__swsetup_r+0x32>
 8004122:	2309      	movs	r3, #9
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800412a:	f04f 30ff 	mov.w	r0, #4294967295
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	e034      	b.n	800419c <__swsetup_r+0x9c>
 8004132:	0758      	lsls	r0, r3, #29
 8004134:	d512      	bpl.n	800415c <__swsetup_r+0x5c>
 8004136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004138:	b141      	cbz	r1, 800414c <__swsetup_r+0x4c>
 800413a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800413e:	4299      	cmp	r1, r3
 8004140:	d002      	beq.n	8004148 <__swsetup_r+0x48>
 8004142:	4628      	mov	r0, r5
 8004144:	f7ff fb2a 	bl	800379c <_free_r>
 8004148:	2300      	movs	r3, #0
 800414a:	6363      	str	r3, [r4, #52]	; 0x34
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f043 0308 	orr.w	r3, r3, #8
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	b94b      	cbnz	r3, 800417c <__swsetup_r+0x7c>
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800416e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004172:	d003      	beq.n	800417c <__swsetup_r+0x7c>
 8004174:	4621      	mov	r1, r4
 8004176:	4628      	mov	r0, r5
 8004178:	f000 f85d 	bl	8004236 <__smakebuf_r>
 800417c:	89a0      	ldrh	r0, [r4, #12]
 800417e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004182:	f010 0301 	ands.w	r3, r0, #1
 8004186:	d00a      	beq.n	800419e <__swsetup_r+0x9e>
 8004188:	2300      	movs	r3, #0
 800418a:	60a3      	str	r3, [r4, #8]
 800418c:	6963      	ldr	r3, [r4, #20]
 800418e:	425b      	negs	r3, r3
 8004190:	61a3      	str	r3, [r4, #24]
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	b943      	cbnz	r3, 80041a8 <__swsetup_r+0xa8>
 8004196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800419a:	d1c4      	bne.n	8004126 <__swsetup_r+0x26>
 800419c:	bd38      	pop	{r3, r4, r5, pc}
 800419e:	0781      	lsls	r1, r0, #30
 80041a0:	bf58      	it	pl
 80041a2:	6963      	ldrpl	r3, [r4, #20]
 80041a4:	60a3      	str	r3, [r4, #8]
 80041a6:	e7f4      	b.n	8004192 <__swsetup_r+0x92>
 80041a8:	2000      	movs	r0, #0
 80041aa:	e7f7      	b.n	800419c <__swsetup_r+0x9c>
 80041ac:	20000068 	.word	0x20000068

080041b0 <_sbrk_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	2300      	movs	r3, #0
 80041b4:	4d05      	ldr	r5, [pc, #20]	; (80041cc <_sbrk_r+0x1c>)
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	f7fc fdf4 	bl	8000da8 <_sbrk>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_sbrk_r+0x1a>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_sbrk_r+0x1a>
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	20000424 	.word	0x20000424

080041d0 <memchr>:
 80041d0:	4603      	mov	r3, r0
 80041d2:	b510      	push	{r4, lr}
 80041d4:	b2c9      	uxtb	r1, r1
 80041d6:	4402      	add	r2, r0
 80041d8:	4293      	cmp	r3, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	d101      	bne.n	80041e2 <memchr+0x12>
 80041de:	2000      	movs	r0, #0
 80041e0:	e003      	b.n	80041ea <memchr+0x1a>
 80041e2:	7804      	ldrb	r4, [r0, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	428c      	cmp	r4, r1
 80041e8:	d1f6      	bne.n	80041d8 <memchr+0x8>
 80041ea:	bd10      	pop	{r4, pc}

080041ec <__swhatbuf_r>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	460c      	mov	r4, r1
 80041f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f4:	4615      	mov	r5, r2
 80041f6:	2900      	cmp	r1, #0
 80041f8:	461e      	mov	r6, r3
 80041fa:	b096      	sub	sp, #88	; 0x58
 80041fc:	da0c      	bge.n	8004218 <__swhatbuf_r+0x2c>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	2100      	movs	r1, #0
 8004202:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004206:	bf0c      	ite	eq
 8004208:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800420c:	2340      	movne	r3, #64	; 0x40
 800420e:	2000      	movs	r0, #0
 8004210:	6031      	str	r1, [r6, #0]
 8004212:	602b      	str	r3, [r5, #0]
 8004214:	b016      	add	sp, #88	; 0x58
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	466a      	mov	r2, sp
 800421a:	f000 f849 	bl	80042b0 <_fstat_r>
 800421e:	2800      	cmp	r0, #0
 8004220:	dbed      	blt.n	80041fe <__swhatbuf_r+0x12>
 8004222:	9901      	ldr	r1, [sp, #4]
 8004224:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004228:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800422c:	4259      	negs	r1, r3
 800422e:	4159      	adcs	r1, r3
 8004230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004234:	e7eb      	b.n	800420e <__swhatbuf_r+0x22>

08004236 <__smakebuf_r>:
 8004236:	898b      	ldrh	r3, [r1, #12]
 8004238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800423a:	079d      	lsls	r5, r3, #30
 800423c:	4606      	mov	r6, r0
 800423e:	460c      	mov	r4, r1
 8004240:	d507      	bpl.n	8004252 <__smakebuf_r+0x1c>
 8004242:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	2301      	movs	r3, #1
 800424c:	6163      	str	r3, [r4, #20]
 800424e:	b002      	add	sp, #8
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	466a      	mov	r2, sp
 8004254:	ab01      	add	r3, sp, #4
 8004256:	f7ff ffc9 	bl	80041ec <__swhatbuf_r>
 800425a:	9900      	ldr	r1, [sp, #0]
 800425c:	4605      	mov	r5, r0
 800425e:	4630      	mov	r0, r6
 8004260:	f7ff fb04 	bl	800386c <_malloc_r>
 8004264:	b948      	cbnz	r0, 800427a <__smakebuf_r+0x44>
 8004266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800426a:	059a      	lsls	r2, r3, #22
 800426c:	d4ef      	bmi.n	800424e <__smakebuf_r+0x18>
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	f043 0302 	orr.w	r3, r3, #2
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	e7e3      	b.n	8004242 <__smakebuf_r+0xc>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	6020      	str	r0, [r4, #0]
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	9b00      	ldr	r3, [sp, #0]
 8004286:	6120      	str	r0, [r4, #16]
 8004288:	6163      	str	r3, [r4, #20]
 800428a:	9b01      	ldr	r3, [sp, #4]
 800428c:	b15b      	cbz	r3, 80042a6 <__smakebuf_r+0x70>
 800428e:	4630      	mov	r0, r6
 8004290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004294:	f000 f81e 	bl	80042d4 <_isatty_r>
 8004298:	b128      	cbz	r0, 80042a6 <__smakebuf_r+0x70>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	f023 0303 	bic.w	r3, r3, #3
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	431d      	orrs	r5, r3
 80042aa:	81a5      	strh	r5, [r4, #12]
 80042ac:	e7cf      	b.n	800424e <__smakebuf_r+0x18>
	...

080042b0 <_fstat_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	2300      	movs	r3, #0
 80042b4:	4d06      	ldr	r5, [pc, #24]	; (80042d0 <_fstat_r+0x20>)
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	602b      	str	r3, [r5, #0]
 80042be:	f7fc fd4d 	bl	8000d5c <_fstat>
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	d102      	bne.n	80042cc <_fstat_r+0x1c>
 80042c6:	682b      	ldr	r3, [r5, #0]
 80042c8:	b103      	cbz	r3, 80042cc <_fstat_r+0x1c>
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	bd38      	pop	{r3, r4, r5, pc}
 80042ce:	bf00      	nop
 80042d0:	20000424 	.word	0x20000424

080042d4 <_isatty_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	2300      	movs	r3, #0
 80042d8:	4d05      	ldr	r5, [pc, #20]	; (80042f0 <_isatty_r+0x1c>)
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	f7fc fd4b 	bl	8000d7a <_isatty>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_isatty_r+0x1a>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_isatty_r+0x1a>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	20000424 	.word	0x20000424

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
